%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 192 62
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Donnerstag, 6. Februar 2025 um 21:49:27 Mitteleurop√§ische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
192 62 setpagesize
0 0 0 0 setmargins
0 0 setorigin
192 62 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
192.000 0.00000 l
192.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
192.000 0.00000 l
192.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 192 62 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -463.000 -214.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
463.000 214.000 m
655.000 214.000 l
655.000 276.000 l
463.000 276.000 l
463.000 214.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -463.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -463.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -463.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
f
0 J
1.45000 M
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
476.946 224.451 m
477.040 226.326 l
476.821 226.326 l
476.780 225.993 476.722 225.758 476.649 225.623  c
476.524 225.394 476.358 225.227 476.149 225.123  c
475.951 225.008 475.691 224.951 475.368 224.951  c
474.243 224.951 l
474.243 231.029 l
474.243 231.519 474.295 231.821 474.399 231.936  c
474.556 232.102 474.785 232.186 475.087 232.186  c
475.368 232.186 l
475.368 232.404 l
471.993 232.404 l
471.993 232.186 l
472.274 232.186 l
472.608 232.186 472.847 232.087 472.993 231.889  c
473.076 231.764 473.118 231.477 473.118 231.029  c
473.118 224.951 l
472.165 224.951 l
471.790 224.951 471.524 224.982 471.368 225.045  c
471.170 225.118 470.998 225.258 470.853 225.467  c
470.707 225.675 470.623 225.962 470.603 226.326  c
470.368 226.326 l
470.462 224.451 l
476.946 224.451 l
h
480.761 231.623 m
480.209 232.050 479.860 232.300 479.714 232.373  c
479.506 232.467 479.282 232.514 479.042 232.514  c
478.677 232.514 478.370 232.389 478.120 232.139  c
477.881 231.878 477.761 231.545 477.761 231.139  c
477.761 230.868 477.823 230.639 477.948 230.451  c
478.104 230.191 478.381 229.946 478.776 229.717  c
479.172 229.477 479.834 229.186 480.761 228.842  c
480.761 228.639 l
480.761 228.097 480.672 227.727 480.495 227.529  c
480.328 227.331 480.084 227.232 479.761 227.232  c
479.511 227.232 479.313 227.300 479.167 227.436  c
479.021 227.571 478.948 227.722 478.948 227.889  c
478.964 228.232 l
478.964 228.410 478.917 228.550 478.823 228.654  c
478.729 228.748 478.610 228.795 478.464 228.795  c
478.318 228.795 478.198 228.743 478.104 228.639  c
478.021 228.535 477.979 228.399 477.979 228.232  c
477.979 227.889 478.151 227.576 478.495 227.295  c
478.839 227.014 479.318 226.873 479.933 226.873  c
480.412 226.873 480.802 226.956 481.104 227.123  c
481.334 227.238 481.506 227.425 481.620 227.686  c
481.693 227.852 481.729 228.196 481.729 228.717  c
481.729 230.545 l
481.729 231.055 481.735 231.368 481.745 231.482  c
481.766 231.597 481.797 231.675 481.839 231.717  c
481.891 231.748 481.948 231.764 482.011 231.764  c
482.073 231.764 482.125 231.753 482.167 231.732  c
482.250 231.680 482.407 231.535 482.636 231.295  c
482.636 231.623 l
482.198 232.217 481.782 232.514 481.386 232.514  c
481.198 232.514 481.047 232.446 480.933 232.311  c
480.818 232.175 480.761 231.946 480.761 231.623  c
h
480.761 231.248 m
480.761 229.201 l
480.167 229.441 479.787 229.607 479.620 229.701  c
479.308 229.878 479.084 230.061 478.948 230.248  c
478.813 230.436 478.745 230.639 478.745 230.857  c
478.745 231.139 478.828 231.373 478.995 231.561  c
479.172 231.748 479.370 231.842 479.589 231.842  c
479.881 231.842 480.271 231.644 480.761 231.248  c
h
484.399 224.076 m
484.566 224.076 484.707 224.133 484.821 224.248  c
484.936 224.363 484.993 224.503 484.993 224.670  c
484.993 224.826 484.936 224.967 484.821 225.092  c
484.707 225.206 484.566 225.264 484.399 225.264  c
484.243 225.264 484.103 225.206 483.978 225.092  c
483.863 224.967 483.806 224.826 483.806 224.670  c
483.806 224.503 483.863 224.363 483.978 224.248  c
484.092 224.133 484.233 224.076 484.399 224.076  c
h
484.899 226.873 m
484.899 231.186 l
484.899 231.529 484.920 231.758 484.962 231.873  c
485.014 231.977 485.087 232.055 485.181 232.107  c
485.274 232.160 485.451 232.186 485.712 232.186  c
485.712 232.404 l
483.103 232.404 l
483.103 232.186 l
483.363 232.186 483.535 232.165 483.618 232.123  c
483.712 232.071 483.785 231.988 483.837 231.873  c
483.889 231.748 483.915 231.519 483.915 231.186  c
483.915 229.123 l
483.915 228.540 483.899 228.165 483.868 227.998  c
483.837 227.873 483.790 227.785 483.728 227.732  c
483.675 227.680 483.597 227.654 483.493 227.654  c
483.389 227.654 483.259 227.686 483.103 227.748  c
483.024 227.529 l
484.634 226.873 l
484.899 226.873 l
h
486.077 227.029 m
488.327 227.029 l
488.327 227.248 l
488.119 227.269 487.983 227.311 487.921 227.373  c
487.858 227.425 487.827 227.508 487.827 227.623  c
487.827 227.738 487.858 227.883 487.921 228.061  c
489.077 231.139 l
490.218 228.623 l
489.921 227.842 l
489.827 227.602 489.702 227.441 489.546 227.357  c
489.463 227.295 489.306 227.258 489.077 227.248  c
489.077 227.029 l
491.624 227.029 l
491.624 227.248 l
491.343 227.258 491.145 227.311 491.030 227.404  c
490.947 227.467 490.905 227.566 490.905 227.701  c
490.905 227.785 490.921 227.868 490.952 227.951  c
492.171 231.029 l
493.312 228.061 l
493.384 227.842 493.421 227.670 493.421 227.545  c
493.421 227.472 493.384 227.410 493.312 227.357  c
493.239 227.295 493.088 227.258 492.858 227.248  c
492.858 227.029 l
494.562 227.029 l
494.562 227.248 l
494.218 227.300 493.968 227.535 493.812 227.951  c
492.015 232.576 l
491.765 232.576 l
490.437 229.139 l
488.858 232.576 l
488.655 232.576 l
486.921 228.061 l
486.806 227.769 486.692 227.576 486.577 227.482  c
486.473 227.378 486.306 227.300 486.077 227.248  c
486.077 227.029 l
h
498.087 231.623 m
497.535 232.050 497.186 232.300 497.040 232.373  c
496.832 232.467 496.608 232.514 496.368 232.514  c
496.004 232.514 495.696 232.389 495.446 232.139  c
495.207 231.878 495.087 231.545 495.087 231.139  c
495.087 230.868 495.149 230.639 495.274 230.451  c
495.431 230.191 495.707 229.946 496.103 229.717  c
496.498 229.477 497.160 229.186 498.087 228.842  c
498.087 228.639 l
498.087 228.097 497.998 227.727 497.821 227.529  c
497.655 227.331 497.410 227.232 497.087 227.232  c
496.837 227.232 496.639 227.300 496.493 227.436  c
496.347 227.571 496.274 227.722 496.274 227.889  c
496.290 228.232 l
496.290 228.410 496.243 228.550 496.149 228.654  c
496.056 228.748 495.936 228.795 495.790 228.795  c
495.644 228.795 495.524 228.743 495.431 228.639  c
495.347 228.535 495.306 228.399 495.306 228.232  c
495.306 227.889 495.478 227.576 495.821 227.295  c
496.165 227.014 496.644 226.873 497.259 226.873  c
497.738 226.873 498.129 226.956 498.431 227.123  c
498.660 227.238 498.832 227.425 498.946 227.686  c
499.019 227.852 499.056 228.196 499.056 228.717  c
499.056 230.545 l
499.056 231.055 499.061 231.368 499.071 231.482  c
499.092 231.597 499.123 231.675 499.165 231.717  c
499.217 231.748 499.274 231.764 499.337 231.764  c
499.399 231.764 499.451 231.753 499.493 231.732  c
499.576 231.680 499.733 231.535 499.962 231.295  c
499.962 231.623 l
499.524 232.217 499.108 232.514 498.712 232.514  c
498.524 232.514 498.373 232.446 498.259 232.311  c
498.144 232.175 498.087 231.946 498.087 231.623  c
h
498.087 231.248 m
498.087 229.201 l
497.493 229.441 497.113 229.607 496.946 229.701  c
496.634 229.878 496.410 230.061 496.274 230.248  c
496.139 230.436 496.071 230.639 496.071 230.857  c
496.071 231.139 496.155 231.373 496.321 231.561  c
496.498 231.748 496.696 231.842 496.915 231.842  c
497.207 231.842 497.597 231.644 498.087 231.248  c
h
501.929 228.014 m
502.564 227.253 503.163 226.873 503.726 226.873  c
504.017 226.873 504.267 226.946 504.476 227.092  c
504.694 227.238 504.866 227.482 504.991 227.826  c
505.075 228.055 505.116 228.415 505.116 228.904  c
505.116 231.186 l
505.116 231.529 505.142 231.764 505.194 231.889  c
505.246 231.982 505.319 232.055 505.413 232.107  c
505.507 232.160 505.684 232.186 505.944 232.186  c
505.944 232.404 l
503.288 232.404 l
503.288 232.186 l
503.397 232.186 l
503.647 232.186 503.819 232.149 503.913 232.076  c
504.017 232.003 504.090 231.894 504.132 231.748  c
504.142 231.686 504.147 231.498 504.147 231.186  c
504.147 228.998 l
504.147 228.508 504.085 228.154 503.960 227.936  c
503.835 227.706 503.621 227.592 503.319 227.592  c
502.851 227.592 502.387 227.847 501.929 228.357  c
501.929 231.186 l
501.929 231.550 501.950 231.774 501.991 231.857  c
502.054 231.972 502.132 232.055 502.226 232.107  c
502.319 232.160 502.512 232.186 502.804 232.186  c
502.804 232.404 l
500.147 232.404 l
500.147 232.186 l
500.272 232.186 l
500.543 232.186 500.726 232.118 500.819 231.982  c
500.913 231.847 500.960 231.581 500.960 231.186  c
500.960 229.201 l
500.960 228.555 500.944 228.165 500.913 228.029  c
500.892 227.883 500.851 227.785 500.788 227.732  c
500.726 227.680 500.642 227.654 500.538 227.654  c
500.434 227.654 500.304 227.686 500.147 227.748  c
500.069 227.529 l
501.679 226.873 l
501.929 226.873 l
501.929 228.014 l
h
f
2 J
10.0000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
f
0 J
1.45000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
628.156 224.670 m
628.156 224.451 l
630.969 224.451 l
630.969 224.670 l
630.672 224.670 l
630.359 224.670 630.120 224.800 629.953 225.061  c
629.870 225.186 629.828 225.467 629.828 225.904  c
629.828 229.139 l
629.828 229.930 629.750 230.550 629.594 230.998  c
629.437 231.436 629.125 231.811 628.656 232.123  c
628.198 232.436 627.573 232.592 626.781 232.592  c
625.906 232.592 625.245 232.441 624.797 232.139  c
624.349 231.837 624.031 231.430 623.844 230.920  c
623.719 230.576 623.656 229.925 623.656 228.967  c
623.656 225.857 l
623.656 225.378 623.588 225.061 623.453 224.904  c
623.318 224.748 623.099 224.670 622.797 224.670  c
622.500 224.670 l
622.500 224.451 l
625.937 224.451 l
625.937 224.670 l
625.625 224.670 l
625.302 224.670 625.068 224.774 624.922 224.982  c
624.828 225.128 624.781 225.420 624.781 225.857  c
624.781 229.326 l
624.781 229.639 624.807 229.993 624.859 230.389  c
624.922 230.785 625.026 231.097 625.172 231.326  c
625.318 231.545 625.531 231.727 625.812 231.873  c
626.094 232.019 626.437 232.092 626.844 232.092  c
627.364 232.092 627.828 231.977 628.234 231.748  c
628.651 231.519 628.932 231.227 629.078 230.873  c
629.234 230.519 629.312 229.920 629.312 229.076  c
629.312 225.857 l
629.312 225.368 629.255 225.061 629.140 224.936  c
628.984 224.758 628.760 224.670 628.469 224.670  c
628.156 224.670 l
h
636.603 224.279 m
636.603 227.029 l
636.385 227.029 l
636.322 226.498 636.197 226.076 636.010 225.764  c
635.832 225.451 635.572 225.206 635.228 225.029  c
634.895 224.842 634.551 224.748 634.197 224.748  c
633.791 224.748 633.452 224.873 633.181 225.123  c
632.921 225.363 632.791 225.644 632.791 225.967  c
632.791 226.206 632.874 226.425 633.041 226.623  c
633.280 226.915 633.853 227.305 634.760 227.795  c
635.510 228.191 636.020 228.498 636.291 228.717  c
636.562 228.925 636.770 229.175 636.916 229.467  c
637.062 229.758 637.135 230.061 637.135 230.373  c
637.135 230.977 636.900 231.498 636.431 231.936  c
635.963 232.373 635.364 232.592 634.635 232.592  c
634.405 232.592 634.187 232.571 633.978 232.529  c
633.864 232.508 633.614 232.441 633.228 232.326  c
632.843 232.201 632.603 232.139 632.510 232.139  c
632.405 232.139 632.322 232.170 632.260 232.232  c
632.207 232.285 632.171 232.404 632.150 232.592  c
631.931 232.592 l
631.931 229.857 l
632.150 229.857 l
632.254 230.430 632.390 230.857 632.556 231.139  c
632.734 231.420 632.994 231.654 633.338 231.842  c
633.692 232.029 634.082 232.123 634.510 232.123  c
634.999 232.123 635.385 231.998 635.666 231.748  c
635.947 231.488 636.088 231.180 636.088 230.826  c
636.088 230.628 636.036 230.430 635.931 230.232  c
635.827 230.035 635.661 229.852 635.431 229.686  c
635.275 229.561 634.859 229.311 634.181 228.936  c
633.504 228.550 633.020 228.248 632.728 228.029  c
632.447 227.800 632.228 227.550 632.072 227.279  c
631.926 226.998 631.853 226.696 631.853 226.373  c
631.853 225.800 632.072 225.311 632.510 224.904  c
632.947 224.488 633.504 224.279 634.181 224.279  c
634.598 224.279 635.046 224.383 635.525 224.592  c
635.744 224.686 635.895 224.732 635.978 224.732  c
636.082 224.732 636.166 224.701 636.228 224.639  c
636.301 224.576 636.353 224.456 636.385 224.279  c
636.603 224.279 l
h
643.262 229.748 m
640.199 229.748 l
639.652 230.998 l
639.517 231.311 639.449 231.540 639.449 231.686  c
639.449 231.811 639.506 231.920 639.621 232.014  c
639.735 232.097 639.985 232.154 640.371 232.186  c
640.371 232.404 l
637.871 232.404 l
637.871 232.186 l
638.204 232.123 638.418 232.045 638.512 231.951  c
638.709 231.764 638.933 231.383 639.183 230.811  c
641.980 224.279 l
642.183 224.279 l
644.949 230.889 l
645.168 231.420 645.366 231.764 645.543 231.920  c
645.730 232.076 645.985 232.165 646.308 232.186  c
646.308 232.404 l
643.168 232.404 l
643.168 232.186 l
643.491 232.175 643.704 232.123 643.808 232.029  c
643.923 231.936 643.980 231.826 643.980 231.701  c
643.980 231.524 643.902 231.253 643.746 230.889  c
643.262 229.748 l
h
643.105 229.311 m
641.762 226.092 l
640.371 229.311 l
643.105 229.311 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 256.000 m
611.440 256.000 l
S
newpath
619.440 256.000 m
607.440 251.000 l
610.440 256.000 l
607.440 261.000 l
h
f
newpath
526.885 247.873 m
526.338 249.404 l
521.651 249.404 l
521.651 249.186 l
523.026 247.925 523.995 246.899 524.557 246.107  c
525.120 245.305 525.401 244.576 525.401 243.920  c
525.401 243.420 525.245 243.008 524.932 242.686  c
524.630 242.352 524.260 242.186 523.823 242.186  c
523.437 242.186 523.088 242.300 522.776 242.529  c
522.463 242.758 522.234 243.097 522.088 243.545  c
521.870 243.545 l
521.974 242.816 522.224 242.258 522.620 241.873  c
523.026 241.488 523.531 241.295 524.135 241.295  c
524.781 241.295 525.317 241.503 525.745 241.920  c
526.182 242.326 526.401 242.811 526.401 243.373  c
526.401 243.779 526.307 244.186 526.120 244.592  c
525.828 245.217 525.359 245.883 524.713 246.592  c
523.745 247.654 523.135 248.295 522.885 248.514  c
524.963 248.514 l
525.390 248.514 525.687 248.498 525.854 248.467  c
526.021 248.436 526.172 248.373 526.307 248.279  c
526.453 248.186 526.573 248.050 526.666 247.873  c
526.885 247.873 l
h
527.823 245.482 m
527.823 244.576 527.958 243.795 528.229 243.139  c
528.500 242.482 528.864 241.993 529.323 241.670  c
529.677 241.420 530.041 241.295 530.416 241.295  c
531.021 241.295 531.567 241.607 532.057 242.232  c
532.661 242.993 532.963 244.035 532.963 245.357  c
532.963 246.274 532.828 247.055 532.557 247.701  c
532.297 248.347 531.958 248.816 531.541 249.107  c
531.135 249.399 530.739 249.545 530.354 249.545  c
529.594 249.545 528.963 249.097 528.463 248.201  c
528.036 247.451 527.823 246.545 527.823 245.482  c
h
528.963 245.623 m
528.963 246.717 529.099 247.607 529.370 248.295  c
529.599 248.878 529.932 249.170 530.370 249.170  c
530.578 249.170 530.797 249.076 531.026 248.889  c
531.255 248.701 531.427 248.383 531.541 247.936  c
531.719 247.269 531.807 246.321 531.807 245.092  c
531.807 244.186 531.713 243.430 531.526 242.826  c
531.390 242.378 531.208 242.061 530.979 241.873  c
530.823 241.748 530.630 241.686 530.401 241.686  c
530.140 241.686 529.906 241.805 529.698 242.045  c
529.416 242.368 529.224 242.878 529.120 243.576  c
529.015 244.264 528.963 244.946 528.963 245.623  c
h
538.885 247.873 m
538.338 249.404 l
533.651 249.404 l
533.651 249.186 l
535.026 247.925 535.995 246.899 536.557 246.107  c
537.120 245.305 537.401 244.576 537.401 243.920  c
537.401 243.420 537.245 243.008 536.932 242.686  c
536.630 242.352 536.260 242.186 535.823 242.186  c
535.437 242.186 535.088 242.300 534.776 242.529  c
534.463 242.758 534.234 243.097 534.088 243.545  c
533.870 243.545 l
533.974 242.816 534.224 242.258 534.620 241.873  c
535.026 241.488 535.531 241.295 536.135 241.295  c
536.781 241.295 537.317 241.503 537.745 241.920  c
538.182 242.326 538.401 242.811 538.401 243.373  c
538.401 243.779 538.307 244.186 538.120 244.592  c
537.828 245.217 537.359 245.883 536.713 246.592  c
535.745 247.654 535.135 248.295 534.885 248.514  c
536.963 248.514 l
537.390 248.514 537.687 248.498 537.854 248.467  c
538.021 248.436 538.172 248.373 538.307 248.279  c
538.453 248.186 538.573 248.050 538.666 247.873  c
538.885 247.873 l
h
539.823 245.482 m
539.823 244.576 539.958 243.795 540.229 243.139  c
540.500 242.482 540.864 241.993 541.323 241.670  c
541.677 241.420 542.041 241.295 542.416 241.295  c
543.021 241.295 543.567 241.607 544.057 242.232  c
544.661 242.993 544.963 244.035 544.963 245.357  c
544.963 246.274 544.828 247.055 544.557 247.701  c
544.297 248.347 543.958 248.816 543.541 249.107  c
543.135 249.399 542.739 249.545 542.354 249.545  c
541.594 249.545 540.963 249.097 540.463 248.201  c
540.036 247.451 539.823 246.545 539.823 245.482  c
h
540.963 245.623 m
540.963 246.717 541.099 247.607 541.370 248.295  c
541.599 248.878 541.932 249.170 542.370 249.170  c
542.578 249.170 542.797 249.076 543.026 248.889  c
543.255 248.701 543.427 248.383 543.541 247.936  c
543.719 247.269 543.807 246.321 543.807 245.092  c
543.807 244.186 543.713 243.430 543.526 242.826  c
543.390 242.378 543.208 242.061 542.979 241.873  c
542.823 241.748 542.630 241.686 542.401 241.686  c
542.140 241.686 541.906 241.805 541.698 242.045  c
541.416 242.368 541.224 242.878 541.120 243.576  c
541.015 244.264 540.963 244.946 540.963 245.623  c
h
550.666 249.498 m
551.073 250.186 551.505 250.691 551.963 251.014  c
552.422 251.337 552.948 251.519 553.541 251.561  c
553.541 251.748 l
553.000 251.738 552.422 251.633 551.807 251.436  c
551.203 251.238 550.625 250.962 550.073 250.607  c
549.521 250.264 549.047 249.894 548.651 249.498  c
548.088 249.269 547.640 249.024 547.307 248.764  c
546.838 248.389 546.469 247.925 546.198 247.373  c
545.937 246.821 545.807 246.170 545.807 245.420  c
545.807 244.232 546.192 243.248 546.963 242.467  c
547.734 241.675 548.666 241.279 549.760 241.279  c
550.802 241.279 551.698 241.675 552.448 242.467  c
553.208 243.248 553.588 244.238 553.588 245.436  c
553.588 246.404 553.317 247.258 552.776 247.998  c
552.245 248.727 551.541 249.227 550.666 249.498  c
h
549.682 241.732 m
548.974 241.732 548.401 241.982 547.963 242.482  c
547.422 243.128 547.151 244.107 547.151 245.420  c
547.151 246.701 547.427 247.691 547.979 248.389  c
548.406 248.920 548.974 249.186 549.682 249.186  c
550.422 249.186 551.015 248.920 551.463 248.389  c
551.995 247.753 552.260 246.816 552.260 245.576  c
552.260 244.628 552.114 243.831 551.823 243.186  c
551.594 242.686 551.297 242.321 550.932 242.092  c
550.567 241.852 550.151 241.732 549.682 241.732  c
h
554.661 242.967 m
554.890 242.436 555.176 242.024 555.520 241.732  c
555.864 241.441 556.296 241.295 556.817 241.295  c
557.452 241.295 557.937 241.503 558.270 241.920  c
558.530 242.222 558.661 242.550 558.661 242.904  c
558.661 243.488 558.296 244.087 557.567 244.701  c
558.056 244.889 558.426 245.160 558.676 245.514  c
558.926 245.868 559.051 246.290 559.051 246.779  c
559.051 247.467 558.832 248.061 558.395 248.561  c
557.832 249.217 557.010 249.545 555.926 249.545  c
555.385 249.545 555.015 249.477 554.817 249.342  c
554.629 249.206 554.536 249.066 554.536 248.920  c
554.536 248.805 554.582 248.706 554.676 248.623  c
554.770 248.529 554.879 248.482 555.004 248.482  c
555.109 248.482 555.207 248.498 555.301 248.529  c
555.374 248.550 555.525 248.623 555.754 248.748  c
555.994 248.873 556.155 248.946 556.239 248.967  c
556.385 249.008 556.541 249.029 556.707 249.029  c
557.103 249.029 557.447 248.878 557.739 248.576  c
558.041 248.264 558.192 247.899 558.192 247.482  c
558.192 247.170 558.124 246.868 557.989 246.576  c
557.885 246.357 557.770 246.191 557.645 246.076  c
557.478 245.920 557.249 245.779 556.957 245.654  c
556.666 245.529 556.369 245.467 556.067 245.467  c
555.879 245.467 l
555.879 245.279 l
556.181 245.248 556.489 245.139 556.801 244.951  c
557.114 244.764 557.338 244.545 557.473 244.295  c
557.619 244.035 557.692 243.748 557.692 243.436  c
557.692 243.040 557.567 242.717 557.317 242.467  c
557.067 242.217 556.754 242.092 556.379 242.092  c
555.765 242.092 555.254 242.415 554.848 243.061  c
554.661 242.967 l
h
561.739 243.873 m
561.926 243.873 562.082 243.936 562.207 244.061  c
562.332 244.186 562.395 244.342 562.395 244.529  c
562.395 244.706 562.332 244.857 562.207 244.982  c
562.082 245.107 561.926 245.170 561.739 245.170  c
561.562 245.170 561.411 245.107 561.286 244.982  c
561.161 244.857 561.098 244.706 561.098 244.529  c
561.098 244.342 561.161 244.186 561.286 244.061  c
561.411 243.936 561.562 243.873 561.739 243.873  c
h
561.739 248.264 m
561.916 248.264 562.067 248.331 562.192 248.467  c
562.327 248.592 562.395 248.743 562.395 248.920  c
562.395 249.097 562.327 249.253 562.192 249.389  c
562.067 249.514 561.916 249.576 561.739 249.576  c
561.551 249.576 561.395 249.514 561.270 249.389  c
561.145 249.253 561.082 249.097 561.082 248.920  c
561.082 248.743 561.145 248.592 561.270 248.467  c
561.395 248.331 561.551 248.264 561.739 248.264  c
h
567.026 247.451 m
567.276 247.451 l
567.317 247.982 567.484 248.394 567.776 248.686  c
568.067 248.967 568.505 249.133 569.088 249.186  c
569.088 245.764 l
568.213 245.222 567.630 244.743 567.338 244.326  c
567.130 244.024 567.026 243.660 567.026 243.232  c
567.026 242.753 567.203 242.337 567.557 241.982  c
567.922 241.618 568.432 241.399 569.088 241.326  c
569.088 240.795 l
569.463 240.795 l
569.463 241.326 l
569.786 241.347 570.057 241.383 570.276 241.436  c
570.390 241.467 570.765 241.602 571.401 241.842  c
571.401 243.592 l
571.166 243.592 l
571.125 242.977 570.963 242.529 570.682 242.248  c
570.411 241.956 570.005 241.779 569.463 241.717  c
569.463 244.701 l
570.453 245.389 571.083 245.894 571.354 246.217  c
571.635 246.540 571.776 246.946 571.776 247.436  c
571.776 247.977 571.573 248.456 571.166 248.873  c
570.760 249.279 570.192 249.514 569.463 249.576  c
569.463 250.326 l
569.088 250.326 l
569.088 249.576 l
568.724 249.555 568.380 249.508 568.057 249.436  c
567.745 249.373 567.401 249.264 567.026 249.107  c
567.026 247.451 l
h
569.088 244.451 m
569.088 241.732 l
568.703 241.774 568.411 241.899 568.213 242.107  c
568.026 242.305 567.932 242.555 567.932 242.857  c
567.932 243.139 568.015 243.404 568.182 243.654  c
568.359 243.904 568.661 244.170 569.088 244.451  c
h
569.463 249.186 m
569.755 249.133 569.979 249.061 570.135 248.967  c
570.354 248.831 570.526 248.654 570.651 248.436  c
570.786 248.217 570.854 247.982 570.854 247.732  c
570.854 247.472 570.776 247.227 570.620 246.998  c
570.463 246.769 570.078 246.441 569.463 246.014  c
569.463 249.186 l
h
577.963 246.467 m
577.963 247.311 l
576.901 247.311 l
576.901 249.404 l
575.932 249.404 l
575.932 247.311 l
572.573 247.311 l
572.573 246.561 l
576.260 241.295 l
576.901 241.295 l
576.901 246.467 l
577.963 246.467 l
h
575.932 246.467 m
575.932 242.529 l
573.151 246.467 l
575.932 246.467 l
h
579.588 241.451 m
583.854 241.451 l
583.854 241.686 l
581.198 249.576 l
580.541 249.576 l
582.916 242.420 l
580.729 242.420 l
580.291 242.420 579.979 242.472 579.791 242.576  c
579.469 242.753 579.203 243.029 578.995 243.404  c
578.838 243.342 l
579.588 241.451 l
h
585.026 249.576 m
585.026 249.357 l
585.526 249.347 585.995 249.227 586.432 248.998  c
586.870 248.769 587.291 248.368 587.698 247.795  c
588.114 247.222 588.401 246.597 588.557 245.920  c
587.942 246.316 587.390 246.514 586.901 246.514  c
586.338 246.514 585.854 246.300 585.448 245.873  c
585.052 245.436 584.854 244.857 584.854 244.139  c
584.854 243.441 585.057 242.821 585.463 242.279  c
585.942 241.623 586.567 241.295 587.338 241.295  c
587.995 241.295 588.552 241.566 589.010 242.107  c
589.583 242.774 589.870 243.597 589.870 244.576  c
589.870 245.462 589.651 246.285 589.213 247.045  c
588.786 247.805 588.187 248.441 587.416 248.951  c
586.781 249.368 586.094 249.576 585.354 249.576  c
585.026 249.576 l
h
588.651 245.482 m
588.724 244.972 588.760 244.566 588.760 244.264  c
588.760 243.889 588.692 243.482 588.557 243.045  c
588.432 242.597 588.250 242.258 588.010 242.029  c
587.781 241.790 587.515 241.670 587.213 241.670  c
586.859 241.670 586.552 241.826 586.291 242.139  c
586.031 242.451 585.901 242.920 585.901 243.545  c
585.901 244.368 586.078 245.008 586.432 245.467  c
586.682 245.811 586.995 245.982 587.370 245.982  c
587.547 245.982 587.755 245.941 587.995 245.857  c
588.245 245.764 588.463 245.639 588.651 245.482  c
h
595.291 249.404 m
592.229 242.717 l
592.229 248.029 l
592.229 248.519 592.281 248.821 592.385 248.936  c
592.531 249.102 592.760 249.186 593.073 249.186  c
593.354 249.186 l
593.354 249.404 l
590.588 249.404 l
590.588 249.186 l
590.870 249.186 l
591.203 249.186 591.442 249.087 591.588 248.889  c
591.672 248.764 591.713 248.477 591.713 248.029  c
591.713 242.842 l
591.713 242.488 591.672 242.232 591.588 242.076  c
591.536 241.962 591.437 241.868 591.291 241.795  c
591.146 241.712 590.911 241.670 590.588 241.670  c
590.588 241.451 l
592.838 241.451 l
595.713 247.670 l
598.557 241.451 l
600.807 241.451 l
600.807 241.670 l
600.526 241.670 l
600.192 241.670 599.953 241.774 599.807 241.982  c
599.724 242.107 599.682 242.394 599.682 242.842  c
599.682 248.029 l
599.682 248.519 599.734 248.821 599.838 248.936  c
599.984 249.102 600.213 249.186 600.526 249.186  c
600.807 249.186 l
600.807 249.404 l
597.432 249.404 l
597.432 249.186 l
597.713 249.186 l
598.047 249.186 598.286 249.087 598.432 248.889  c
598.515 248.764 598.557 248.477 598.557 248.029  c
598.557 242.717 l
595.495 249.404 l
595.291 249.404 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
