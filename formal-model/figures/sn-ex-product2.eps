%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 187 62
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Dienstag, 26. November 2024 um 15:30:55 Mitteleuropäische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
187 62 setpagesize
0 0 0 0 setmargins
0 0 setorigin
187 62 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 187 62 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
468.000 214.000 m
655.000 214.000 l
655.000 276.000 l
468.000 276.000 l
468.000 214.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
f
0 J
1.45000 M
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
S
2 J
10.0000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
f
0 J
1.45000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
633.175 224.155 m
633.341 224.155 633.482 224.212 633.596 224.326  c
633.711 224.441 633.768 224.582 633.768 224.748  c
633.768 224.905 633.711 225.045 633.596 225.170  c
633.482 225.285 633.341 225.342 633.175 225.342  c
633.018 225.342 632.878 225.285 632.753 225.170  c
632.638 225.045 632.581 224.905 632.581 224.748  c
632.581 224.582 632.638 224.441 632.753 224.326  c
632.867 224.212 633.008 224.155 633.175 224.155  c
h
633.675 226.951 m
633.675 231.264 l
633.675 231.608 633.695 231.837 633.737 231.951  c
633.789 232.056 633.862 232.134 633.956 232.186  c
634.050 232.238 634.227 232.264 634.487 232.264  c
634.487 232.483 l
631.878 232.483 l
631.878 232.264 l
632.138 232.264 632.310 232.243 632.393 232.201  c
632.487 232.149 632.560 232.066 632.612 231.951  c
632.664 231.826 632.690 231.597 632.690 231.264  c
632.690 229.201 l
632.690 228.618 632.675 228.243 632.643 228.076  c
632.612 227.951 632.565 227.863 632.503 227.811  c
632.451 227.759 632.373 227.733 632.268 227.733  c
632.164 227.733 632.034 227.764 631.878 227.826  c
631.800 227.608 l
633.409 226.951 l
633.675 226.951 l
h
639.680 228.076 m
641.384 230.623 l
641.852 231.332 642.201 231.780 642.430 231.967  c
642.660 232.144 642.951 232.243 643.305 232.264  c
643.305 232.483 l
639.884 232.483 l
639.884 232.264 l
640.113 232.264 640.285 232.243 640.399 232.201  c
640.483 232.160 640.550 232.103 640.602 232.030  c
640.654 231.957 640.680 231.884 640.680 231.811  c
640.680 231.728 640.660 231.639 640.618 231.545  c
640.597 231.483 640.493 231.311 640.305 231.030  c
638.946 228.983 l
637.290 231.123 l
637.113 231.353 637.003 231.504 636.962 231.576  c
636.930 231.649 636.915 231.728 636.915 231.811  c
636.915 231.936 636.967 232.040 637.071 232.123  c
637.186 232.207 637.389 232.254 637.680 232.264  c
637.680 232.483 l
634.868 232.483 l
634.868 232.264 l
635.066 232.243 635.238 232.201 635.384 232.139  c
635.623 232.035 635.852 231.899 636.071 231.733  c
636.290 231.556 636.540 231.290 636.821 230.936  c
638.696 228.576 l
637.134 226.280 l
636.707 225.665 636.342 225.259 636.040 225.061  c
635.748 224.863 635.410 224.759 635.024 224.748  c
635.024 224.530 l
638.696 224.530 l
638.696 224.748 l
638.384 224.759 638.170 224.811 638.055 224.905  c
637.941 224.998 637.884 225.097 637.884 225.201  c
637.884 225.347 637.977 225.561 638.165 225.842  c
639.384 227.655 l
640.790 225.873 l
640.957 225.665 641.055 225.524 641.087 225.451  c
641.128 225.368 641.149 225.285 641.149 225.201  c
641.149 225.118 641.128 225.045 641.087 224.983  c
641.024 224.899 640.946 224.842 640.852 224.811  c
640.769 224.780 640.587 224.759 640.305 224.748  c
640.305 224.530 l
643.118 224.530 l
643.118 224.748 l
642.899 224.759 642.717 224.795 642.571 224.858  c
642.363 224.951 642.170 225.076 641.993 225.233  c
641.816 225.379 641.566 225.655 641.243 226.061  c
639.680 228.076 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
484.547 228.420 m
485.099 228.545 485.510 228.733 485.781 228.983  c
486.156 229.347 486.344 229.790 486.344 230.311  c
486.344 230.707 486.219 231.087 485.969 231.451  c
485.719 231.806 485.375 232.066 484.938 232.233  c
484.510 232.399 483.849 232.483 482.953 232.483  c
479.203 232.483 l
479.203 232.264 l
479.500 232.264 l
479.833 232.264 480.073 232.160 480.219 231.951  c
480.302 231.816 480.344 231.524 480.344 231.076  c
480.344 225.936 l
480.344 225.446 480.286 225.139 480.172 225.014  c
480.026 224.837 479.802 224.748 479.500 224.748  c
479.203 224.748 l
479.203 224.530 l
482.641 224.530 l
483.276 224.530 483.786 224.576 484.172 224.670  c
484.755 224.816 485.203 225.071 485.516 225.436  c
485.828 225.790 485.984 226.196 485.984 226.655  c
485.984 227.050 485.859 227.410 485.609 227.733  c
485.370 228.045 485.016 228.274 484.547 228.420  c
h
481.469 228.108 m
481.615 228.139 481.781 228.160 481.969 228.170  c
482.156 228.181 482.359 228.186 482.578 228.186  c
483.151 228.186 483.578 228.129 483.859 228.014  c
484.151 227.889 484.370 227.701 484.516 227.451  c
484.672 227.191 484.750 226.910 484.750 226.608  c
484.750 226.149 484.562 225.759 484.188 225.436  c
483.812 225.103 483.260 224.936 482.531 224.936  c
482.135 224.936 481.781 224.978 481.469 225.061  c
481.469 228.108 l
h
481.469 231.905 m
481.927 232.009 482.375 232.061 482.812 232.061  c
483.521 232.061 484.057 231.905 484.422 231.592  c
484.797 231.269 484.984 230.873 484.984 230.405  c
484.984 230.103 484.901 229.811 484.734 229.530  c
484.568 229.238 484.292 229.009 483.906 228.842  c
483.531 228.675 483.068 228.592 482.516 228.592  c
482.266 228.592 482.052 228.597 481.875 228.608  c
481.708 228.618 481.573 228.634 481.469 228.655  c
481.469 231.905 l
h
489.223 224.155 m
489.223 231.264 l
489.223 231.608 489.249 231.837 489.301 231.951  c
489.353 232.056 489.426 232.134 489.520 232.186  c
489.624 232.238 489.816 232.264 490.098 232.264  c
490.098 232.483 l
487.457 232.483 l
487.457 232.264 l
487.707 232.264 487.874 232.243 487.957 232.201  c
488.051 232.149 488.124 232.066 488.176 231.951  c
488.228 231.826 488.254 231.597 488.254 231.264  c
488.254 226.389 l
488.254 225.785 488.238 225.415 488.207 225.280  c
488.186 225.144 488.145 225.050 488.082 224.998  c
488.020 224.946 487.941 224.920 487.848 224.920  c
487.743 224.920 487.613 224.951 487.457 225.014  c
487.363 224.811 l
488.957 224.155 l
489.223 224.155 l
h
493.760 231.701 m
493.208 232.129 492.859 232.379 492.713 232.451  c
492.505 232.545 492.281 232.592 492.041 232.592  c
491.676 232.592 491.369 232.467 491.119 232.217  c
490.880 231.957 490.760 231.623 490.760 231.217  c
490.760 230.946 490.822 230.717 490.947 230.530  c
491.104 230.269 491.380 230.024 491.775 229.795  c
492.171 229.556 492.833 229.264 493.760 228.920  c
493.760 228.717 l
493.760 228.175 493.671 227.806 493.494 227.608  c
493.327 227.410 493.083 227.311 492.760 227.311  c
492.510 227.311 492.312 227.379 492.166 227.514  c
492.020 227.649 491.947 227.800 491.947 227.967  c
491.963 228.311 l
491.963 228.488 491.916 228.629 491.822 228.733  c
491.729 228.826 491.609 228.873 491.463 228.873  c
491.317 228.873 491.197 228.821 491.104 228.717  c
491.020 228.613 490.979 228.478 490.979 228.311  c
490.979 227.967 491.150 227.655 491.494 227.373  c
491.838 227.092 492.317 226.951 492.932 226.951  c
493.411 226.951 493.801 227.035 494.104 227.201  c
494.333 227.316 494.505 227.504 494.619 227.764  c
494.692 227.931 494.729 228.274 494.729 228.795  c
494.729 230.623 l
494.729 231.134 494.734 231.446 494.744 231.561  c
494.765 231.675 494.796 231.754 494.838 231.795  c
494.890 231.826 494.947 231.842 495.010 231.842  c
495.072 231.842 495.124 231.832 495.166 231.811  c
495.249 231.759 495.406 231.613 495.635 231.373  c
495.635 231.701 l
495.197 232.295 494.781 232.592 494.385 232.592  c
494.197 232.592 494.046 232.524 493.932 232.389  c
493.817 232.254 493.760 232.024 493.760 231.701  c
h
493.760 231.326 m
493.760 229.280 l
493.166 229.519 492.786 229.686 492.619 229.780  c
492.307 229.957 492.083 230.139 491.947 230.326  c
491.812 230.514 491.744 230.717 491.744 230.936  c
491.744 231.217 491.827 231.451 491.994 231.639  c
492.171 231.826 492.369 231.920 492.588 231.920  c
492.880 231.920 493.270 231.722 493.760 231.326  c
h
499.836 231.873 m
499.576 232.155 499.320 232.358 499.070 232.483  c
498.820 232.597 498.549 232.655 498.258 232.655  c
497.674 232.655 497.164 232.410 496.727 231.920  c
496.289 231.420 496.070 230.785 496.070 230.014  c
496.070 229.254 496.310 228.556 496.789 227.920  c
497.279 227.274 497.904 226.951 498.664 226.951  c
499.133 226.951 499.523 227.103 499.836 227.405  c
499.836 226.405 l
499.836 225.800 499.820 225.431 499.789 225.295  c
499.758 225.149 499.711 225.050 499.648 224.998  c
499.586 224.946 499.508 224.920 499.414 224.920  c
499.310 224.920 499.174 224.951 499.008 225.014  c
498.930 224.811 l
500.539 224.155 l
500.805 224.155 l
500.805 230.358 l
500.805 230.983 500.815 231.368 500.836 231.514  c
500.867 231.649 500.914 231.743 500.977 231.795  c
501.049 231.847 501.128 231.873 501.211 231.873  c
501.315 231.873 501.456 231.842 501.633 231.780  c
501.695 231.983 l
500.102 232.655 l
499.836 232.655 l
499.836 231.873 l
h
499.836 231.467 m
499.836 228.701 l
499.805 228.441 499.732 228.201 499.617 227.983  c
499.503 227.764 499.346 227.597 499.148 227.483  c
498.961 227.368 498.773 227.311 498.586 227.311  c
498.242 227.311 497.935 227.467 497.664 227.780  c
497.310 228.186 497.133 228.780 497.133 229.561  c
497.133 230.353 497.305 230.957 497.648 231.373  c
497.992 231.790 498.378 231.998 498.805 231.998  c
499.159 231.998 499.503 231.821 499.836 231.467  c
h
502.945 229.139 m
502.935 229.931 503.128 230.556 503.523 231.014  c
503.909 231.462 504.367 231.686 504.898 231.686  c
505.253 231.686 505.560 231.592 505.820 231.405  c
506.081 231.207 506.299 230.873 506.477 230.405  c
506.648 230.530 l
506.565 231.061 506.326 231.550 505.930 231.998  c
505.544 232.436 505.055 232.655 504.461 232.655  c
503.815 232.655 503.263 232.405 502.805 231.905  c
502.346 231.394 502.117 230.717 502.117 229.873  c
502.117 228.957 502.352 228.243 502.820 227.733  c
503.289 227.212 503.878 226.951 504.586 226.951  c
505.190 226.951 505.685 227.149 506.070 227.545  c
506.456 227.941 506.648 228.472 506.648 229.139  c
502.945 229.139 l
h
502.945 228.795 m
505.430 228.795 l
505.409 228.451 505.367 228.212 505.305 228.076  c
505.211 227.858 505.065 227.686 504.867 227.561  c
504.669 227.436 504.466 227.373 504.258 227.373  c
503.935 227.373 503.643 227.498 503.383 227.748  c
503.133 227.998 502.987 228.347 502.945 228.795  c
h
512.537 228.420 m
513.089 228.545 513.501 228.733 513.771 228.983  c
514.146 229.347 514.334 229.790 514.334 230.311  c
514.334 230.707 514.209 231.087 513.959 231.451  c
513.709 231.806 513.365 232.066 512.928 232.233  c
512.501 232.399 511.839 232.483 510.943 232.483  c
507.193 232.483 l
507.193 232.264 l
507.490 232.264 l
507.824 232.264 508.063 232.160 508.209 231.951  c
508.292 231.816 508.334 231.524 508.334 231.076  c
508.334 225.936 l
508.334 225.446 508.277 225.139 508.162 225.014  c
508.016 224.837 507.792 224.748 507.490 224.748  c
507.193 224.748 l
507.193 224.530 l
510.631 224.530 l
511.266 224.530 511.777 224.576 512.162 224.670  c
512.745 224.816 513.193 225.071 513.506 225.436  c
513.818 225.790 513.975 226.196 513.975 226.655  c
513.975 227.050 513.850 227.410 513.600 227.733  c
513.360 228.045 513.006 228.274 512.537 228.420  c
h
509.459 228.108 m
509.605 228.139 509.771 228.160 509.959 228.170  c
510.146 228.181 510.350 228.186 510.568 228.186  c
511.141 228.186 511.568 228.129 511.850 228.014  c
512.141 227.889 512.360 227.701 512.506 227.451  c
512.662 227.191 512.740 226.910 512.740 226.608  c
512.740 226.149 512.553 225.759 512.178 225.436  c
511.803 225.103 511.251 224.936 510.521 224.936  c
510.126 224.936 509.771 224.978 509.459 225.061  c
509.459 228.108 l
h
509.459 231.905 m
509.917 232.009 510.365 232.061 510.803 232.061  c
511.511 232.061 512.048 231.905 512.412 231.592  c
512.787 231.269 512.975 230.873 512.975 230.405  c
512.975 230.103 512.891 229.811 512.725 229.530  c
512.558 229.238 512.282 229.009 511.896 228.842  c
511.521 228.675 511.058 228.592 510.506 228.592  c
510.256 228.592 510.042 228.597 509.865 228.608  c
509.699 228.618 509.563 228.634 509.459 228.655  c
509.459 231.905 l
h
518.416 231.701 m
517.864 232.129 517.515 232.379 517.369 232.451  c
517.161 232.545 516.937 232.592 516.697 232.592  c
516.333 232.592 516.025 232.467 515.775 232.217  c
515.536 231.957 515.416 231.623 515.416 231.217  c
515.416 230.946 515.479 230.717 515.604 230.530  c
515.760 230.269 516.036 230.024 516.432 229.795  c
516.827 229.556 517.489 229.264 518.416 228.920  c
518.416 228.717 l
518.416 228.175 518.327 227.806 518.150 227.608  c
517.984 227.410 517.739 227.311 517.416 227.311  c
517.166 227.311 516.968 227.379 516.822 227.514  c
516.676 227.649 516.604 227.800 516.604 227.967  c
516.619 228.311 l
516.619 228.488 516.572 228.629 516.479 228.733  c
516.385 228.826 516.265 228.873 516.119 228.873  c
515.973 228.873 515.854 228.821 515.760 228.717  c
515.676 228.613 515.635 228.478 515.635 228.311  c
515.635 227.967 515.807 227.655 516.150 227.373  c
516.494 227.092 516.973 226.951 517.588 226.951  c
518.067 226.951 518.458 227.035 518.760 227.201  c
518.989 227.316 519.161 227.504 519.275 227.764  c
519.348 227.931 519.385 228.274 519.385 228.795  c
519.385 230.623 l
519.385 231.134 519.390 231.446 519.400 231.561  c
519.421 231.675 519.452 231.754 519.494 231.795  c
519.546 231.826 519.604 231.842 519.666 231.842  c
519.729 231.842 519.781 231.832 519.822 231.811  c
519.906 231.759 520.062 231.613 520.291 231.373  c
520.291 231.701 l
519.854 232.295 519.437 232.592 519.041 232.592  c
518.854 232.592 518.702 232.524 518.588 232.389  c
518.473 232.254 518.416 232.024 518.416 231.701  c
h
518.416 231.326 m
518.416 229.280 l
517.822 229.519 517.442 229.686 517.275 229.780  c
516.963 229.957 516.739 230.139 516.604 230.326  c
516.468 230.514 516.400 230.717 516.400 230.936  c
516.400 231.217 516.484 231.451 516.650 231.639  c
516.827 231.826 517.025 231.920 517.244 231.920  c
517.536 231.920 517.926 231.722 518.416 231.326  c
h
522.258 225.358 m
522.258 227.108 l
523.508 227.108 l
523.508 227.530 l
522.258 227.530 l
522.258 230.998 l
522.258 231.353 522.305 231.592 522.398 231.717  c
522.503 231.832 522.633 231.889 522.789 231.889  c
522.914 231.889 523.039 231.853 523.164 231.780  c
523.289 231.696 523.383 231.576 523.445 231.420  c
523.680 231.420 l
523.534 231.795 523.336 232.082 523.086 232.280  c
522.836 232.478 522.581 232.576 522.320 232.576  c
522.143 232.576 521.966 232.524 521.789 232.420  c
521.622 232.316 521.497 232.175 521.414 231.998  c
521.331 231.811 521.289 231.524 521.289 231.139  c
521.289 227.530 l
520.445 227.530 l
520.445 227.326 l
520.654 227.243 520.867 227.103 521.086 226.905  c
521.315 226.696 521.518 226.451 521.695 226.170  c
521.789 226.014 521.914 225.743 522.070 225.358  c
522.258 225.358 l
h
525.592 225.358 m
525.592 227.108 l
526.842 227.108 l
526.842 227.530 l
525.592 227.530 l
525.592 230.998 l
525.592 231.353 525.639 231.592 525.732 231.717  c
525.837 231.832 525.967 231.889 526.123 231.889  c
526.248 231.889 526.373 231.853 526.498 231.780  c
526.623 231.696 526.717 231.576 526.779 231.420  c
527.014 231.420 l
526.868 231.795 526.670 232.082 526.420 232.280  c
526.170 232.478 525.915 232.576 525.654 232.576  c
525.477 232.576 525.300 232.524 525.123 232.420  c
524.956 232.316 524.831 232.175 524.748 231.998  c
524.665 231.811 524.623 231.524 524.623 231.139  c
524.623 227.530 l
523.779 227.530 l
523.779 227.326 l
523.988 227.243 524.201 227.103 524.420 226.905  c
524.649 226.696 524.852 226.451 525.029 226.170  c
525.123 226.014 525.248 225.743 525.404 225.358  c
525.592 225.358 l
h
528.270 229.139 m
528.259 229.931 528.452 230.556 528.848 231.014  c
529.233 231.462 529.691 231.686 530.223 231.686  c
530.577 231.686 530.884 231.592 531.145 231.405  c
531.405 231.207 531.624 230.873 531.801 230.405  c
531.973 230.530 l
531.889 231.061 531.650 231.550 531.254 231.998  c
530.868 232.436 530.379 232.655 529.785 232.655  c
529.139 232.655 528.587 232.405 528.129 231.905  c
527.671 231.394 527.441 230.717 527.441 229.873  c
527.441 228.957 527.676 228.243 528.145 227.733  c
528.613 227.212 529.202 226.951 529.910 226.951  c
530.514 226.951 531.009 227.149 531.395 227.545  c
531.780 227.941 531.973 228.472 531.973 229.139  c
528.270 229.139 l
h
528.270 228.795 m
530.754 228.795 l
530.733 228.451 530.691 228.212 530.629 228.076  c
530.535 227.858 530.389 227.686 530.191 227.561  c
529.993 227.436 529.790 227.373 529.582 227.373  c
529.259 227.373 528.967 227.498 528.707 227.748  c
528.457 227.998 528.311 228.347 528.270 228.795  c
h
534.268 226.951 m
534.268 228.170 l
534.715 227.358 535.174 226.951 535.643 226.951  c
535.861 226.951 536.038 227.019 536.174 227.155  c
536.320 227.280 536.393 227.431 536.393 227.608  c
536.393 227.764 536.340 227.894 536.236 227.998  c
536.132 228.103 536.012 228.155 535.877 228.155  c
535.742 228.155 535.585 228.087 535.408 227.951  c
535.242 227.816 535.117 227.748 535.033 227.748  c
534.960 227.748 534.882 227.785 534.799 227.858  c
534.632 228.024 534.455 228.290 534.268 228.655  c
534.268 231.233 l
534.268 231.524 534.304 231.748 534.377 231.905  c
534.429 232.009 534.518 232.097 534.643 232.170  c
534.768 232.233 534.955 232.264 535.205 232.264  c
535.205 232.483 l
532.455 232.483 l
532.455 232.264 l
532.726 232.264 532.929 232.222 533.064 232.139  c
533.158 232.076 533.226 231.978 533.268 231.842  c
533.288 231.780 533.299 231.592 533.299 231.280  c
533.299 229.201 l
533.299 228.576 533.283 228.207 533.252 228.092  c
533.231 227.967 533.184 227.879 533.111 227.826  c
533.049 227.764 532.965 227.733 532.861 227.733  c
532.736 227.733 532.601 227.764 532.455 227.826  c
532.393 227.608 l
534.018 226.951 l
534.268 226.951 l
h
536.389 227.108 m
538.889 227.108 l
538.889 227.326 l
538.764 227.326 l
538.587 227.326 538.451 227.368 538.357 227.451  c
538.274 227.524 538.232 227.618 538.232 227.733  c
538.232 227.879 538.295 228.087 538.420 228.358  c
539.732 231.076 l
540.936 228.108 l
540.998 227.941 541.029 227.780 541.029 227.623  c
541.029 227.561 541.019 227.509 540.998 227.467  c
540.967 227.425 540.915 227.394 540.842 227.373  c
540.779 227.342 540.665 227.326 540.498 227.326  c
540.498 227.108 l
542.248 227.108 l
542.248 227.326 l
542.102 227.347 541.988 227.384 541.904 227.436  c
541.831 227.478 541.748 227.561 541.654 227.686  c
541.613 227.738 541.545 227.889 541.451 228.139  c
539.264 233.498 l
539.055 234.019 538.779 234.410 538.436 234.670  c
538.092 234.941 537.764 235.076 537.451 235.076  c
537.222 235.076 537.029 235.009 536.873 234.873  c
536.727 234.738 536.654 234.587 536.654 234.420  c
536.654 234.254 536.706 234.118 536.811 234.014  c
536.925 233.920 537.076 233.873 537.264 233.873  c
537.389 233.873 537.566 233.915 537.795 233.998  c
537.951 234.061 538.045 234.092 538.076 234.092  c
538.201 234.092 538.331 234.030 538.467 233.905  c
538.602 233.790 538.743 233.556 538.889 233.201  c
539.264 232.264 l
537.342 228.217 l
537.279 228.103 537.186 227.951 537.061 227.764  c
536.956 227.629 536.873 227.540 536.811 227.498  c
536.727 227.436 536.587 227.379 536.389 227.326  c
536.389 227.108 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 256.000 m
611.440 256.000 l
S
newpath
619.440 256.000 m
607.440 251.000 l
610.440 256.000 l
607.440 261.000 l
h
f
newpath
522.129 242.232 m
524.067 241.295 l
524.254 241.295 l
524.254 247.998 l
524.254 248.446 524.270 248.727 524.301 248.842  c
524.343 248.946 524.421 249.029 524.536 249.092  c
524.661 249.144 524.900 249.175 525.254 249.186  c
525.254 249.404 l
522.270 249.404 l
522.270 249.186 l
522.645 249.175 522.885 249.144 522.989 249.092  c
523.103 249.029 523.181 248.951 523.223 248.857  c
523.265 248.764 523.286 248.477 523.286 247.998  c
523.286 243.717 l
523.286 243.133 523.270 242.764 523.239 242.607  c
523.207 242.482 523.155 242.389 523.082 242.326  c
523.010 242.264 522.921 242.232 522.817 242.232  c
522.671 242.232 522.473 242.295 522.223 242.420  c
522.129 242.232 l
h
532.223 247.873 m
531.676 249.404 l
526.989 249.404 l
526.989 249.186 l
528.364 247.925 529.332 246.899 529.895 246.107  c
530.457 245.305 530.739 244.576 530.739 243.920  c
530.739 243.420 530.582 243.008 530.270 242.686  c
529.968 242.352 529.598 242.186 529.161 242.186  c
528.775 242.186 528.426 242.300 528.114 242.529  c
527.801 242.758 527.572 243.097 527.426 243.545  c
527.207 243.545 l
527.312 242.816 527.562 242.258 527.957 241.873  c
528.364 241.488 528.869 241.295 529.473 241.295  c
530.119 241.295 530.655 241.503 531.082 241.920  c
531.520 242.326 531.739 242.811 531.739 243.373  c
531.739 243.779 531.645 244.186 531.457 244.592  c
531.166 245.217 530.697 245.883 530.051 246.592  c
529.082 247.654 528.473 248.295 528.223 248.514  c
530.301 248.514 l
530.728 248.514 531.025 248.498 531.192 248.467  c
531.359 248.436 531.510 248.373 531.645 248.279  c
531.791 248.186 531.911 248.050 532.004 247.873  c
532.223 247.873 l
h
536.082 241.076 m
533.207 249.576 l
532.739 249.576 l
535.614 241.076 l
536.082 241.076 l
h
541.557 247.873 m
541.010 249.404 l
536.323 249.404 l
536.323 249.186 l
537.698 247.925 538.666 246.899 539.229 246.107  c
539.791 245.305 540.073 244.576 540.073 243.920  c
540.073 243.420 539.916 243.008 539.604 242.686  c
539.302 242.352 538.932 242.186 538.495 242.186  c
538.109 242.186 537.760 242.300 537.448 242.529  c
537.135 242.758 536.906 243.097 536.760 243.545  c
536.541 243.545 l
536.646 242.816 536.896 242.258 537.291 241.873  c
537.698 241.488 538.203 241.295 538.807 241.295  c
539.453 241.295 539.989 241.503 540.416 241.920  c
540.854 242.326 541.073 242.811 541.073 243.373  c
541.073 243.779 540.979 244.186 540.791 244.592  c
540.500 245.217 540.031 245.883 539.385 246.592  c
538.416 247.654 537.807 248.295 537.557 248.514  c
539.635 248.514 l
540.062 248.514 540.359 248.498 540.526 248.467  c
540.692 248.436 540.844 248.373 540.979 248.279  c
541.125 248.186 541.245 248.050 541.338 247.873  c
541.557 247.873 l
h
542.495 245.482 m
542.495 244.576 542.630 243.795 542.901 243.139  c
543.172 242.482 543.536 241.993 543.995 241.670  c
544.349 241.420 544.713 241.295 545.088 241.295  c
545.692 241.295 546.239 241.607 546.729 242.232  c
547.333 242.993 547.635 244.035 547.635 245.357  c
547.635 246.274 547.500 247.055 547.229 247.701  c
546.969 248.347 546.630 248.816 546.213 249.107  c
545.807 249.399 545.411 249.545 545.026 249.545  c
544.265 249.545 543.635 249.097 543.135 248.201  c
542.708 247.451 542.495 246.545 542.495 245.482  c
h
543.635 245.623 m
543.635 246.717 543.771 247.607 544.041 248.295  c
544.271 248.878 544.604 249.170 545.041 249.170  c
545.250 249.170 545.469 249.076 545.698 248.889  c
545.927 248.701 546.099 248.383 546.213 247.936  c
546.390 247.269 546.479 246.321 546.479 245.092  c
546.479 244.186 546.385 243.430 546.198 242.826  c
546.062 242.378 545.880 242.061 545.651 241.873  c
545.495 241.748 545.302 241.686 545.073 241.686  c
544.812 241.686 544.578 241.805 544.370 242.045  c
544.088 242.368 543.896 242.878 543.791 243.576  c
543.687 244.264 543.635 244.946 543.635 245.623  c
h
553.557 247.873 m
553.010 249.404 l
548.323 249.404 l
548.323 249.186 l
549.698 247.925 550.666 246.899 551.229 246.107  c
551.791 245.305 552.073 244.576 552.073 243.920  c
552.073 243.420 551.916 243.008 551.604 242.686  c
551.302 242.352 550.932 242.186 550.495 242.186  c
550.109 242.186 549.760 242.300 549.448 242.529  c
549.135 242.758 548.906 243.097 548.760 243.545  c
548.541 243.545 l
548.646 242.816 548.896 242.258 549.291 241.873  c
549.698 241.488 550.203 241.295 550.807 241.295  c
551.453 241.295 551.989 241.503 552.416 241.920  c
552.854 242.326 553.073 242.811 553.073 243.373  c
553.073 243.779 552.979 244.186 552.791 244.592  c
552.500 245.217 552.031 245.883 551.385 246.592  c
550.416 247.654 549.807 248.295 549.557 248.514  c
551.635 248.514 l
552.062 248.514 552.359 248.498 552.526 248.467  c
552.692 248.436 552.844 248.373 552.979 248.279  c
553.125 248.186 553.245 248.050 553.338 247.873  c
553.557 247.873 l
h
554.666 242.967 m
554.896 242.436 555.182 242.024 555.526 241.732  c
555.870 241.441 556.302 241.295 556.823 241.295  c
557.458 241.295 557.942 241.503 558.276 241.920  c
558.536 242.222 558.666 242.550 558.666 242.904  c
558.666 243.488 558.302 244.087 557.573 244.701  c
558.062 244.889 558.432 245.160 558.682 245.514  c
558.932 245.868 559.057 246.290 559.057 246.779  c
559.057 247.467 558.838 248.061 558.401 248.561  c
557.838 249.217 557.015 249.545 555.932 249.545  c
555.390 249.545 555.021 249.477 554.823 249.342  c
554.635 249.206 554.541 249.066 554.541 248.920  c
554.541 248.805 554.588 248.706 554.682 248.623  c
554.776 248.529 554.885 248.482 555.010 248.482  c
555.114 248.482 555.213 248.498 555.307 248.529  c
555.380 248.550 555.531 248.623 555.760 248.748  c
556.000 248.873 556.161 248.946 556.245 248.967  c
556.390 249.008 556.547 249.029 556.713 249.029  c
557.109 249.029 557.453 248.878 557.745 248.576  c
558.047 248.264 558.198 247.899 558.198 247.482  c
558.198 247.170 558.130 246.868 557.995 246.576  c
557.890 246.357 557.776 246.191 557.651 246.076  c
557.484 245.920 557.255 245.779 556.963 245.654  c
556.672 245.529 556.375 245.467 556.073 245.467  c
555.885 245.467 l
555.885 245.279 l
556.187 245.248 556.495 245.139 556.807 244.951  c
557.120 244.764 557.344 244.545 557.479 244.295  c
557.625 244.035 557.698 243.748 557.698 243.436  c
557.698 243.040 557.573 242.717 557.323 242.467  c
557.073 242.217 556.760 242.092 556.385 242.092  c
555.771 242.092 555.260 242.415 554.854 243.061  c
554.666 242.967 l
h
561.745 243.873 m
561.932 243.873 562.088 243.936 562.213 244.061  c
562.338 244.186 562.401 244.342 562.401 244.529  c
562.401 244.706 562.338 244.857 562.213 244.982  c
562.088 245.107 561.932 245.170 561.745 245.170  c
561.567 245.170 561.416 245.107 561.291 244.982  c
561.166 244.857 561.104 244.706 561.104 244.529  c
561.104 244.342 561.166 244.186 561.291 244.061  c
561.416 243.936 561.567 243.873 561.745 243.873  c
h
561.745 248.264 m
561.922 248.264 562.073 248.331 562.198 248.467  c
562.333 248.592 562.401 248.743 562.401 248.920  c
562.401 249.097 562.333 249.253 562.198 249.389  c
562.073 249.514 561.922 249.576 561.745 249.576  c
561.557 249.576 561.401 249.514 561.276 249.389  c
561.151 249.253 561.088 249.097 561.088 248.920  c
561.088 248.743 561.151 248.592 561.276 248.467  c
561.401 248.331 561.557 248.264 561.745 248.264  c
h
571.766 241.295 m
571.766 241.514 l
571.256 241.566 570.834 241.670 570.500 241.826  c
570.178 241.972 569.855 242.206 569.532 242.529  c
569.219 242.842 568.959 243.196 568.750 243.592  c
568.542 243.977 568.365 244.436 568.219 244.967  c
568.782 244.581 569.349 244.389 569.922 244.389  c
570.464 244.389 570.933 244.607 571.329 245.045  c
571.724 245.482 571.922 246.045 571.922 246.732  c
571.922 247.399 571.724 248.003 571.329 248.545  c
570.839 249.212 570.198 249.545 569.407 249.545  c
568.865 249.545 568.401 249.363 568.016 248.998  c
567.276 248.300 566.907 247.394 566.907 246.279  c
566.907 245.571 567.047 244.899 567.329 244.264  c
567.620 243.618 568.026 243.050 568.547 242.561  c
569.079 242.061 569.584 241.727 570.063 241.561  c
570.553 241.383 571.011 241.295 571.438 241.295  c
571.766 241.295 l
h
568.125 245.389 m
568.053 245.920 568.016 246.347 568.016 246.670  c
568.016 247.045 568.084 247.456 568.219 247.904  c
568.365 248.342 568.573 248.686 568.844 248.936  c
569.042 249.123 569.287 249.217 569.579 249.217  c
569.912 249.217 570.214 249.055 570.485 248.732  c
570.756 248.410 570.891 247.951 570.891 247.357  c
570.891 246.691 570.756 246.118 570.485 245.639  c
570.224 245.149 569.849 244.904 569.360 244.904  c
569.214 244.904 569.053 244.936 568.875 244.998  c
568.709 245.061 568.459 245.191 568.125 245.389  c
h
572.829 245.482 m
572.829 244.576 572.964 243.795 573.235 243.139  c
573.506 242.482 573.870 241.993 574.329 241.670  c
574.683 241.420 575.047 241.295 575.422 241.295  c
576.026 241.295 576.573 241.607 577.063 242.232  c
577.667 242.993 577.969 244.035 577.969 245.357  c
577.969 246.274 577.834 247.055 577.563 247.701  c
577.303 248.347 576.964 248.816 576.547 249.107  c
576.141 249.399 575.745 249.545 575.360 249.545  c
574.599 249.545 573.969 249.097 573.469 248.201  c
573.042 247.451 572.829 246.545 572.829 245.482  c
h
573.969 245.623 m
573.969 246.717 574.105 247.607 574.375 248.295  c
574.605 248.878 574.938 249.170 575.375 249.170  c
575.584 249.170 575.803 249.076 576.032 248.889  c
576.261 248.701 576.433 248.383 576.547 247.936  c
576.724 247.269 576.813 246.321 576.813 245.092  c
576.813 244.186 576.719 243.430 576.532 242.826  c
576.396 242.378 576.214 242.061 575.985 241.873  c
575.829 241.748 575.636 241.686 575.407 241.686  c
575.146 241.686 574.912 241.805 574.704 242.045  c
574.422 242.368 574.230 242.878 574.125 243.576  c
574.021 244.264 573.969 244.946 573.969 245.623  c
h
578.829 245.482 m
578.829 244.576 578.964 243.795 579.235 243.139  c
579.506 242.482 579.870 241.993 580.329 241.670  c
580.683 241.420 581.047 241.295 581.422 241.295  c
582.026 241.295 582.573 241.607 583.063 242.232  c
583.667 242.993 583.969 244.035 583.969 245.357  c
583.969 246.274 583.834 247.055 583.563 247.701  c
583.303 248.347 582.964 248.816 582.547 249.107  c
582.141 249.399 581.745 249.545 581.360 249.545  c
580.599 249.545 579.969 249.097 579.469 248.201  c
579.042 247.451 578.829 246.545 578.829 245.482  c
h
579.969 245.623 m
579.969 246.717 580.105 247.607 580.375 248.295  c
580.605 248.878 580.938 249.170 581.375 249.170  c
581.584 249.170 581.803 249.076 582.032 248.889  c
582.261 248.701 582.433 248.383 582.547 247.936  c
582.724 247.269 582.813 246.321 582.813 245.092  c
582.813 244.186 582.719 243.430 582.532 242.826  c
582.396 242.378 582.214 242.061 581.985 241.873  c
581.829 241.748 581.636 241.686 581.407 241.686  c
581.146 241.686 580.912 241.805 580.704 242.045  c
580.422 242.368 580.230 242.878 580.125 243.576  c
580.021 244.264 579.969 244.946 579.969 245.623  c
h
587.375 244.576 m
589.032 243.904 l
589.250 243.904 l
589.250 245.154 l
589.532 244.686 589.813 244.357 590.094 244.170  c
590.375 243.972 590.667 243.873 590.969 243.873  c
591.511 243.873 591.959 244.087 592.313 244.514  c
592.761 245.024 592.985 245.696 592.985 246.529  c
592.985 247.456 592.719 248.222 592.188 248.826  c
591.750 249.326 591.198 249.576 590.532 249.576  c
590.240 249.576 589.990 249.535 589.782 249.451  c
589.625 249.389 589.448 249.269 589.250 249.092  c
589.250 250.732 l
589.250 251.097 589.271 251.326 589.313 251.420  c
589.365 251.524 589.443 251.602 589.547 251.654  c
589.662 251.717 589.865 251.748 590.157 251.748  c
590.157 251.967 l
587.344 251.967 l
587.344 251.748 l
587.500 251.748 l
587.709 251.758 587.891 251.722 588.047 251.639  c
588.120 251.587 588.178 251.514 588.219 251.420  c
588.261 251.326 588.282 251.087 588.282 250.701  c
588.282 245.623 l
588.282 245.269 588.266 245.045 588.235 244.951  c
588.204 244.857 588.151 244.790 588.079 244.748  c
588.016 244.696 587.928 244.670 587.813 244.670  c
587.719 244.670 587.599 244.701 587.454 244.764  c
587.375 244.576 l
h
589.250 245.498 m
589.250 247.498 l
589.250 247.936 589.271 248.222 589.313 248.357  c
589.365 248.587 589.495 248.790 589.704 248.967  c
589.922 249.133 590.193 249.217 590.516 249.217  c
590.901 249.217 591.219 249.066 591.469 248.764  c
591.782 248.357 591.938 247.795 591.938 247.076  c
591.938 246.253 591.761 245.623 591.407 245.186  c
591.157 244.883 590.860 244.732 590.516 244.732  c
590.329 244.732 590.141 244.779 589.954 244.873  c
589.808 244.936 589.573 245.144 589.250 245.498  c
h
598.329 247.357 m
598.183 248.066 597.896 248.613 597.469 248.998  c
597.053 249.383 596.589 249.576 596.079 249.576  c
595.464 249.576 594.928 249.321 594.469 248.811  c
594.021 248.290 593.797 247.597 593.797 246.732  c
593.797 245.889 594.047 245.201 594.547 244.670  c
595.058 244.139 595.662 243.873 596.360 243.873  c
596.891 243.873 597.323 244.014 597.657 244.295  c
598.000 244.576 598.172 244.868 598.172 245.170  c
598.172 245.316 598.125 245.436 598.032 245.529  c
597.938 245.623 597.803 245.670 597.625 245.670  c
597.396 245.670 597.224 245.592 597.110 245.436  c
597.037 245.363 596.990 245.212 596.969 244.982  c
596.948 244.743 596.870 244.566 596.735 244.451  c
596.599 244.326 596.412 244.264 596.172 244.264  c
595.776 244.264 595.459 244.410 595.219 244.701  c
594.907 245.087 594.750 245.592 594.750 246.217  c
594.750 246.863 594.907 247.430 595.219 247.920  c
595.532 248.410 595.959 248.654 596.500 248.654  c
596.886 248.654 597.230 248.524 597.532 248.264  c
597.740 248.087 597.948 247.758 598.157 247.279  c
598.329 247.357 l
h
600.217 248.264 m
600.405 248.264 600.561 248.331 600.686 248.467  c
600.811 248.592 600.873 248.743 600.873 248.920  c
600.873 249.097 600.806 249.253 600.670 249.389  c
600.545 249.514 600.394 249.576 600.217 249.576  c
600.040 249.576 599.884 249.514 599.748 249.389  c
599.623 249.253 599.561 249.097 599.561 248.920  c
599.561 248.732 599.623 248.576 599.748 248.451  c
599.884 248.326 600.040 248.264 600.217 248.264  c
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
