%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 187 62
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Dienstag, 26. November 2024 um 15:30:44 Mitteleuropäische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
187 62 setpagesize
0 0 0 0 setmargins
0 0 setorigin
187 62 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 187 62 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
468.000 214.000 m
655.000 214.000 l
655.000 276.000 l
468.000 276.000 l
468.000 214.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
f
0 J
1.45000 M
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
S
2 J
10.0000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
f
0 J
1.45000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
633.333 224.403 m
633.520 227.106 l
633.333 227.106 l
633.093 226.294 632.749 225.710 632.302 225.356  c
631.854 225.002 631.317 224.825 630.692 224.825  c
630.161 224.825 629.682 224.960 629.255 225.231  c
628.828 225.492 628.489 225.919 628.239 226.512  c
627.999 227.096 627.880 227.820 627.880 228.684  c
627.880 229.403 627.994 230.028 628.223 230.559  c
628.463 231.091 628.812 231.497 629.270 231.778  c
629.729 232.059 630.255 232.200 630.848 232.200  c
631.369 232.200 631.828 232.091 632.223 231.872  c
632.619 231.643 633.052 231.200 633.520 230.544  c
633.708 230.669 l
633.302 231.377 632.833 231.898 632.302 232.231  c
631.770 232.554 631.140 232.716 630.411 232.716  c
629.098 232.716 628.083 232.226 627.364 231.247  c
626.822 230.518 626.552 229.664 626.552 228.684  c
626.552 227.882 626.729 227.153 627.083 226.497  c
627.437 225.830 627.927 225.315 628.552 224.950  c
629.177 224.585 629.859 224.403 630.598 224.403  c
631.171 224.403 631.734 224.544 632.286 224.825  c
632.453 224.908 632.572 224.950 632.645 224.950  c
632.749 224.950 632.838 224.914 632.911 224.841  c
633.015 224.736 633.088 224.591 633.130 224.403  c
633.333 224.403 l
h
637.540 231.747 m
636.988 232.174 636.639 232.424 636.493 232.497  c
636.285 232.591 636.061 232.637 635.821 232.637  c
635.457 232.637 635.149 232.512 634.899 232.262  c
634.660 232.002 634.540 231.669 634.540 231.262  c
634.540 230.992 634.602 230.762 634.727 230.575  c
634.884 230.315 635.160 230.070 635.555 229.841  c
635.951 229.601 636.613 229.309 637.540 228.966  c
637.540 228.762 l
637.540 228.221 637.451 227.851 637.274 227.653  c
637.108 227.455 636.863 227.356 636.540 227.356  c
636.290 227.356 636.092 227.424 635.946 227.559  c
635.800 227.695 635.727 227.846 635.727 228.012  c
635.743 228.356 l
635.743 228.533 635.696 228.674 635.602 228.778  c
635.509 228.872 635.389 228.919 635.243 228.919  c
635.097 228.919 634.977 228.867 634.884 228.762  c
634.800 228.658 634.759 228.523 634.759 228.356  c
634.759 228.012 634.930 227.700 635.274 227.419  c
635.618 227.137 636.097 226.997 636.712 226.997  c
637.191 226.997 637.582 227.080 637.884 227.247  c
638.113 227.361 638.285 227.549 638.399 227.809  c
638.472 227.976 638.509 228.320 638.509 228.841  c
638.509 230.669 l
638.509 231.179 638.514 231.492 638.524 231.606  c
638.545 231.721 638.576 231.799 638.618 231.841  c
638.670 231.872 638.727 231.887 638.790 231.887  c
638.852 231.887 638.904 231.877 638.946 231.856  c
639.029 231.804 639.186 231.658 639.415 231.419  c
639.415 231.747 l
638.977 232.341 638.561 232.637 638.165 232.637  c
637.977 232.637 637.826 232.570 637.712 232.434  c
637.597 232.299 637.540 232.070 637.540 231.747  c
h
637.540 231.372 m
637.540 229.325 l
636.946 229.565 636.566 229.731 636.399 229.825  c
636.087 230.002 635.863 230.184 635.727 230.372  c
635.592 230.559 635.524 230.762 635.524 230.981  c
635.524 231.262 635.608 231.497 635.774 231.684  c
635.951 231.872 636.149 231.966 636.368 231.966  c
636.660 231.966 637.050 231.768 637.540 231.372  c
h
641.397 226.997 m
641.397 228.216 l
641.845 227.403 642.304 226.997 642.772 226.997  c
642.991 226.997 643.168 227.065 643.304 227.200  c
643.449 227.325 643.522 227.476 643.522 227.653  c
643.522 227.809 643.470 227.940 643.366 228.044  c
643.262 228.148 643.142 228.200 643.007 228.200  c
642.871 228.200 642.715 228.132 642.538 227.997  c
642.371 227.861 642.246 227.794 642.163 227.794  c
642.090 227.794 642.012 227.830 641.929 227.903  c
641.762 228.070 641.585 228.335 641.397 228.700  c
641.397 231.278 l
641.397 231.570 641.434 231.794 641.507 231.950  c
641.559 232.054 641.647 232.143 641.772 232.216  c
641.897 232.278 642.085 232.309 642.335 232.309  c
642.335 232.528 l
639.585 232.528 l
639.585 232.309 l
639.856 232.309 640.059 232.268 640.194 232.184  c
640.288 232.122 640.356 232.023 640.397 231.887  c
640.418 231.825 640.429 231.637 640.429 231.325  c
640.429 229.247 l
640.429 228.622 640.413 228.252 640.382 228.137  c
640.361 228.012 640.314 227.924 640.241 227.872  c
640.179 227.809 640.095 227.778 639.991 227.778  c
639.866 227.778 639.731 227.809 639.585 227.872  c
639.522 227.653 l
641.147 226.997 l
641.397 226.997 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
484.547 228.466 m
485.099 228.591 485.510 228.778 485.781 229.028  c
486.156 229.393 486.344 229.835 486.344 230.356  c
486.344 230.752 486.219 231.132 485.969 231.497  c
485.719 231.851 485.375 232.111 484.938 232.278  c
484.510 232.445 483.849 232.528 482.953 232.528  c
479.203 232.528 l
479.203 232.309 l
479.500 232.309 l
479.833 232.309 480.073 232.205 480.219 231.997  c
480.302 231.861 480.344 231.570 480.344 231.122  c
480.344 225.981 l
480.344 225.492 480.286 225.184 480.172 225.059  c
480.026 224.882 479.802 224.794 479.500 224.794  c
479.203 224.794 l
479.203 224.575 l
482.641 224.575 l
483.276 224.575 483.786 224.622 484.172 224.716  c
484.755 224.861 485.203 225.117 485.516 225.481  c
485.828 225.835 485.984 226.242 485.984 226.700  c
485.984 227.096 485.859 227.455 485.609 227.778  c
485.370 228.091 485.016 228.320 484.547 228.466  c
h
481.469 228.153 m
481.615 228.184 481.781 228.205 481.969 228.216  c
482.156 228.226 482.359 228.231 482.578 228.231  c
483.151 228.231 483.578 228.174 483.859 228.059  c
484.151 227.934 484.370 227.747 484.516 227.497  c
484.672 227.236 484.750 226.955 484.750 226.653  c
484.750 226.195 484.562 225.804 484.188 225.481  c
483.812 225.148 483.260 224.981 482.531 224.981  c
482.135 224.981 481.781 225.023 481.469 225.106  c
481.469 228.153 l
h
481.469 231.950 m
481.927 232.054 482.375 232.106 482.812 232.106  c
483.521 232.106 484.057 231.950 484.422 231.637  c
484.797 231.315 484.984 230.919 484.984 230.450  c
484.984 230.148 484.901 229.856 484.734 229.575  c
484.568 229.283 484.292 229.054 483.906 228.887  c
483.531 228.721 483.068 228.637 482.516 228.637  c
482.266 228.637 482.052 228.643 481.875 228.653  c
481.708 228.664 481.573 228.679 481.469 228.700  c
481.469 231.950 l
h
490.426 231.747 m
489.874 232.174 489.525 232.424 489.379 232.497  c
489.171 232.591 488.947 232.637 488.707 232.637  c
488.342 232.637 488.035 232.512 487.785 232.262  c
487.546 232.002 487.426 231.669 487.426 231.262  c
487.426 230.992 487.488 230.762 487.613 230.575  c
487.770 230.315 488.046 230.070 488.441 229.841  c
488.837 229.601 489.499 229.309 490.426 228.966  c
490.426 228.762 l
490.426 228.221 490.337 227.851 490.160 227.653  c
489.993 227.455 489.749 227.356 489.426 227.356  c
489.176 227.356 488.978 227.424 488.832 227.559  c
488.686 227.695 488.613 227.846 488.613 228.012  c
488.629 228.356 l
488.629 228.533 488.582 228.674 488.488 228.778  c
488.395 228.872 488.275 228.919 488.129 228.919  c
487.983 228.919 487.863 228.867 487.770 228.762  c
487.686 228.658 487.645 228.523 487.645 228.356  c
487.645 228.012 487.816 227.700 488.160 227.419  c
488.504 227.137 488.983 226.997 489.598 226.997  c
490.077 226.997 490.467 227.080 490.770 227.247  c
490.999 227.361 491.171 227.549 491.285 227.809  c
491.358 227.976 491.395 228.320 491.395 228.841  c
491.395 230.669 l
491.395 231.179 491.400 231.492 491.410 231.606  c
491.431 231.721 491.462 231.799 491.504 231.841  c
491.556 231.872 491.613 231.887 491.676 231.887  c
491.738 231.887 491.790 231.877 491.832 231.856  c
491.915 231.804 492.072 231.658 492.301 231.419  c
492.301 231.747 l
491.863 232.341 491.447 232.637 491.051 232.637  c
490.863 232.637 490.712 232.570 490.598 232.434  c
490.483 232.299 490.426 232.070 490.426 231.747  c
h
490.426 231.372 m
490.426 229.325 l
489.832 229.565 489.452 229.731 489.285 229.825  c
488.973 230.002 488.749 230.184 488.613 230.372  c
488.478 230.559 488.410 230.762 488.410 230.981  c
488.410 231.262 488.493 231.497 488.660 231.684  c
488.837 231.872 489.035 231.966 489.254 231.966  c
489.546 231.966 489.936 231.768 490.426 231.372  c
h
494.268 225.403 m
494.268 227.153 l
495.518 227.153 l
495.518 227.575 l
494.268 227.575 l
494.268 231.044 l
494.268 231.398 494.314 231.637 494.408 231.762  c
494.512 231.877 494.643 231.934 494.799 231.934  c
494.924 231.934 495.049 231.898 495.174 231.825  c
495.299 231.742 495.393 231.622 495.455 231.466  c
495.689 231.466 l
495.544 231.841 495.346 232.127 495.096 232.325  c
494.846 232.523 494.590 232.622 494.330 232.622  c
494.153 232.622 493.976 232.570 493.799 232.466  c
493.632 232.361 493.507 232.221 493.424 232.044  c
493.340 231.856 493.299 231.570 493.299 231.184  c
493.299 227.575 l
492.455 227.575 l
492.455 227.372 l
492.663 227.289 492.877 227.148 493.096 226.950  c
493.325 226.742 493.528 226.497 493.705 226.216  c
493.799 226.059 493.924 225.789 494.080 225.403  c
494.268 225.403 l
h
497.602 225.403 m
497.602 227.153 l
498.852 227.153 l
498.852 227.575 l
497.602 227.575 l
497.602 231.044 l
497.602 231.398 497.648 231.637 497.742 231.762  c
497.846 231.877 497.977 231.934 498.133 231.934  c
498.258 231.934 498.383 231.898 498.508 231.825  c
498.633 231.742 498.727 231.622 498.789 231.466  c
499.023 231.466 l
498.878 231.841 498.680 232.127 498.430 232.325  c
498.180 232.523 497.924 232.622 497.664 232.622  c
497.487 232.622 497.310 232.570 497.133 232.466  c
496.966 232.361 496.841 232.221 496.758 232.044  c
496.674 231.856 496.633 231.570 496.633 231.184  c
496.633 227.575 l
495.789 227.575 l
495.789 227.372 l
495.997 227.289 496.211 227.148 496.430 226.950  c
496.659 226.742 496.862 226.497 497.039 226.216  c
497.133 226.059 497.258 225.789 497.414 225.403  c
497.602 225.403 l
h
500.279 229.184 m
500.269 229.976 500.462 230.601 500.857 231.059  c
501.243 231.507 501.701 231.731 502.232 231.731  c
502.587 231.731 502.894 231.637 503.154 231.450  c
503.415 231.252 503.633 230.919 503.811 230.450  c
503.982 230.575 l
503.899 231.106 503.660 231.596 503.264 232.044  c
502.878 232.481 502.389 232.700 501.795 232.700  c
501.149 232.700 500.597 232.450 500.139 231.950  c
499.680 231.440 499.451 230.762 499.451 229.919  c
499.451 229.002 499.686 228.289 500.154 227.778  c
500.623 227.257 501.212 226.997 501.920 226.997  c
502.524 226.997 503.019 227.195 503.404 227.591  c
503.790 227.986 503.982 228.518 503.982 229.184  c
500.279 229.184 l
h
500.279 228.841 m
502.764 228.841 l
502.743 228.497 502.701 228.257 502.639 228.122  c
502.545 227.903 502.399 227.731 502.201 227.606  c
502.003 227.481 501.800 227.419 501.592 227.419  c
501.269 227.419 500.977 227.544 500.717 227.794  c
500.467 228.044 500.321 228.393 500.279 228.841  c
h
506.277 226.997 m
506.277 228.216 l
506.725 227.403 507.184 226.997 507.652 226.997  c
507.871 226.997 508.048 227.065 508.184 227.200  c
508.329 227.325 508.402 227.476 508.402 227.653  c
508.402 227.809 508.350 227.940 508.246 228.044  c
508.142 228.148 508.022 228.200 507.887 228.200  c
507.751 228.200 507.595 228.132 507.418 227.997  c
507.251 227.861 507.126 227.794 507.043 227.794  c
506.970 227.794 506.892 227.830 506.809 227.903  c
506.642 228.070 506.465 228.335 506.277 228.700  c
506.277 231.278 l
506.277 231.570 506.314 231.794 506.387 231.950  c
506.439 232.054 506.527 232.143 506.652 232.216  c
506.777 232.278 506.965 232.309 507.215 232.309  c
507.215 232.528 l
504.465 232.528 l
504.465 232.309 l
504.736 232.309 504.939 232.268 505.074 232.184  c
505.168 232.122 505.236 232.023 505.277 231.887  c
505.298 231.825 505.309 231.637 505.309 231.325  c
505.309 229.247 l
505.309 228.622 505.293 228.252 505.262 228.137  c
505.241 228.012 505.194 227.924 505.121 227.872  c
505.059 227.809 504.975 227.778 504.871 227.778  c
504.746 227.778 504.611 227.809 504.465 227.872  c
504.402 227.653 l
506.027 226.997 l
506.277 226.997 l
h
508.398 227.153 m
510.898 227.153 l
510.898 227.372 l
510.773 227.372 l
510.596 227.372 510.461 227.414 510.367 227.497  c
510.284 227.570 510.242 227.664 510.242 227.778  c
510.242 227.924 510.305 228.132 510.430 228.403  c
511.742 231.122 l
512.945 228.153 l
513.008 227.986 513.039 227.825 513.039 227.669  c
513.039 227.606 513.029 227.554 513.008 227.512  c
512.977 227.471 512.924 227.440 512.852 227.419  c
512.789 227.387 512.674 227.372 512.508 227.372  c
512.508 227.153 l
514.258 227.153 l
514.258 227.372 l
514.112 227.393 513.997 227.429 513.914 227.481  c
513.841 227.523 513.758 227.606 513.664 227.731  c
513.622 227.783 513.555 227.934 513.461 228.184  c
511.273 233.544 l
511.065 234.065 510.789 234.455 510.445 234.716  c
510.102 234.986 509.773 235.122 509.461 235.122  c
509.232 235.122 509.039 235.054 508.883 234.919  c
508.737 234.783 508.664 234.632 508.664 234.466  c
508.664 234.299 508.716 234.164 508.820 234.059  c
508.935 233.966 509.086 233.919 509.273 233.919  c
509.398 233.919 509.576 233.960 509.805 234.044  c
509.961 234.106 510.055 234.137 510.086 234.137  c
510.211 234.137 510.341 234.075 510.477 233.950  c
510.612 233.835 510.753 233.601 510.898 233.247  c
511.273 232.309 l
509.352 228.262 l
509.289 228.148 509.195 227.997 509.070 227.809  c
508.966 227.674 508.883 227.585 508.820 227.544  c
508.737 227.481 508.596 227.424 508.398 227.372  c
508.398 227.153 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 256.000 m
611.440 256.000 l
S
newpath
619.440 256.000 m
607.440 251.000 l
610.440 256.000 l
607.440 261.000 l
h
f
newpath
528.057 247.873 m
527.510 249.404 l
522.823 249.404 l
522.823 249.186 l
524.198 247.925 525.166 246.899 525.729 246.107  c
526.291 245.305 526.573 244.576 526.573 243.920  c
526.573 243.420 526.416 243.008 526.104 242.686  c
525.802 242.352 525.432 242.186 524.995 242.186  c
524.609 242.186 524.260 242.300 523.948 242.529  c
523.635 242.758 523.406 243.097 523.260 243.545  c
523.041 243.545 l
523.146 242.816 523.396 242.258 523.791 241.873  c
524.198 241.488 524.703 241.295 525.307 241.295  c
525.953 241.295 526.489 241.503 526.916 241.920  c
527.354 242.326 527.573 242.811 527.573 243.373  c
527.573 243.779 527.479 244.186 527.291 244.592  c
527.000 245.217 526.531 245.883 525.885 246.592  c
524.916 247.654 524.307 248.295 524.057 248.514  c
526.135 248.514 l
526.562 248.514 526.859 248.498 527.026 248.467  c
527.192 248.436 527.344 248.373 527.479 248.279  c
527.625 248.186 527.745 248.050 527.838 247.873  c
528.057 247.873 l
h
528.995 245.482 m
528.995 244.576 529.130 243.795 529.401 243.139  c
529.672 242.482 530.036 241.993 530.495 241.670  c
530.849 241.420 531.213 241.295 531.588 241.295  c
532.192 241.295 532.739 241.607 533.229 242.232  c
533.833 242.993 534.135 244.035 534.135 245.357  c
534.135 246.274 534.000 247.055 533.729 247.701  c
533.469 248.347 533.130 248.816 532.713 249.107  c
532.307 249.399 531.911 249.545 531.526 249.545  c
530.765 249.545 530.135 249.097 529.635 248.201  c
529.208 247.451 528.995 246.545 528.995 245.482  c
h
530.135 245.623 m
530.135 246.717 530.271 247.607 530.541 248.295  c
530.771 248.878 531.104 249.170 531.541 249.170  c
531.750 249.170 531.969 249.076 532.198 248.889  c
532.427 248.701 532.599 248.383 532.713 247.936  c
532.890 247.269 532.979 246.321 532.979 245.092  c
532.979 244.186 532.885 243.430 532.698 242.826  c
532.562 242.378 532.380 242.061 532.151 241.873  c
531.995 241.748 531.802 241.686 531.573 241.686  c
531.312 241.686 531.078 241.805 530.870 242.045  c
530.588 242.368 530.396 242.878 530.291 243.576  c
530.187 244.264 530.135 244.946 530.135 245.623  c
h
540.057 247.873 m
539.510 249.404 l
534.823 249.404 l
534.823 249.186 l
536.198 247.925 537.166 246.899 537.729 246.107  c
538.291 245.305 538.573 244.576 538.573 243.920  c
538.573 243.420 538.416 243.008 538.104 242.686  c
537.802 242.352 537.432 242.186 536.995 242.186  c
536.609 242.186 536.260 242.300 535.948 242.529  c
535.635 242.758 535.406 243.097 535.260 243.545  c
535.041 243.545 l
535.146 242.816 535.396 242.258 535.791 241.873  c
536.198 241.488 536.703 241.295 537.307 241.295  c
537.953 241.295 538.489 241.503 538.916 241.920  c
539.354 242.326 539.573 242.811 539.573 243.373  c
539.573 243.779 539.479 244.186 539.291 244.592  c
539.000 245.217 538.531 245.883 537.885 246.592  c
536.916 247.654 536.307 248.295 536.057 248.514  c
538.135 248.514 l
538.562 248.514 538.859 248.498 539.026 248.467  c
539.192 248.436 539.344 248.373 539.479 248.279  c
539.625 248.186 539.745 248.050 539.838 247.873  c
540.057 247.873 l
h
546.057 247.873 m
545.510 249.404 l
540.823 249.404 l
540.823 249.186 l
542.198 247.925 543.166 246.899 543.729 246.107  c
544.291 245.305 544.573 244.576 544.573 243.920  c
544.573 243.420 544.416 243.008 544.104 242.686  c
543.802 242.352 543.432 242.186 542.995 242.186  c
542.609 242.186 542.260 242.300 541.948 242.529  c
541.635 242.758 541.406 243.097 541.260 243.545  c
541.041 243.545 l
541.146 242.816 541.396 242.258 541.791 241.873  c
542.198 241.488 542.703 241.295 543.307 241.295  c
543.953 241.295 544.489 241.503 544.916 241.920  c
545.354 242.326 545.573 242.811 545.573 243.373  c
545.573 243.779 545.479 244.186 545.291 244.592  c
545.000 245.217 544.531 245.883 543.885 246.592  c
542.916 247.654 542.307 248.295 542.057 248.514  c
544.135 248.514 l
544.562 248.514 544.859 248.498 545.026 248.467  c
545.192 248.436 545.344 248.373 545.479 248.279  c
545.625 248.186 545.745 248.050 545.838 247.873  c
546.057 247.873 l
h
548.245 243.873 m
548.432 243.873 548.588 243.936 548.713 244.061  c
548.838 244.186 548.901 244.342 548.901 244.529  c
548.901 244.706 548.838 244.857 548.713 244.982  c
548.588 245.107 548.432 245.170 548.245 245.170  c
548.067 245.170 547.916 245.107 547.791 244.982  c
547.666 244.857 547.604 244.706 547.604 244.529  c
547.604 244.342 547.666 244.186 547.791 244.061  c
547.916 243.936 548.067 243.873 548.245 243.873  c
h
548.245 248.264 m
548.422 248.264 548.573 248.331 548.698 248.467  c
548.833 248.592 548.901 248.743 548.901 248.920  c
548.901 249.097 548.833 249.253 548.698 249.389  c
548.573 249.514 548.422 249.576 548.245 249.576  c
548.057 249.576 547.901 249.514 547.776 249.389  c
547.651 249.253 547.588 249.097 547.588 248.920  c
547.588 248.743 547.651 248.592 547.776 248.467  c
547.901 248.331 548.057 248.264 548.245 248.264  c
h
553.500 242.967 m
553.730 242.436 554.016 242.024 554.360 241.732  c
554.704 241.441 555.136 241.295 555.657 241.295  c
556.292 241.295 556.776 241.503 557.110 241.920  c
557.370 242.222 557.500 242.550 557.500 242.904  c
557.500 243.488 557.136 244.087 556.407 244.701  c
556.896 244.889 557.266 245.160 557.516 245.514  c
557.766 245.868 557.891 246.290 557.891 246.779  c
557.891 247.467 557.672 248.061 557.235 248.561  c
556.672 249.217 555.849 249.545 554.766 249.545  c
554.224 249.545 553.855 249.477 553.657 249.342  c
553.469 249.206 553.375 249.066 553.375 248.920  c
553.375 248.805 553.422 248.706 553.516 248.623  c
553.610 248.529 553.719 248.482 553.844 248.482  c
553.948 248.482 554.047 248.498 554.141 248.529  c
554.214 248.550 554.365 248.623 554.594 248.748  c
554.834 248.873 554.995 248.946 555.079 248.967  c
555.224 249.008 555.381 249.029 555.547 249.029  c
555.943 249.029 556.287 248.878 556.579 248.576  c
556.881 248.264 557.032 247.899 557.032 247.482  c
557.032 247.170 556.964 246.868 556.829 246.576  c
556.724 246.357 556.610 246.191 556.485 246.076  c
556.318 245.920 556.089 245.779 555.797 245.654  c
555.506 245.529 555.209 245.467 554.907 245.467  c
554.719 245.467 l
554.719 245.279 l
555.021 245.248 555.329 245.139 555.641 244.951  c
555.954 244.764 556.178 244.545 556.313 244.295  c
556.459 244.035 556.532 243.748 556.532 243.436  c
556.532 243.040 556.407 242.717 556.157 242.467  c
555.907 242.217 555.594 242.092 555.219 242.092  c
554.605 242.092 554.094 242.415 553.688 243.061  c
553.500 242.967 l
h
559.500 242.967 m
559.730 242.436 560.016 242.024 560.360 241.732  c
560.704 241.441 561.136 241.295 561.657 241.295  c
562.292 241.295 562.776 241.503 563.110 241.920  c
563.370 242.222 563.500 242.550 563.500 242.904  c
563.500 243.488 563.136 244.087 562.407 244.701  c
562.896 244.889 563.266 245.160 563.516 245.514  c
563.766 245.868 563.891 246.290 563.891 246.779  c
563.891 247.467 563.672 248.061 563.235 248.561  c
562.672 249.217 561.849 249.545 560.766 249.545  c
560.224 249.545 559.855 249.477 559.657 249.342  c
559.469 249.206 559.375 249.066 559.375 248.920  c
559.375 248.805 559.422 248.706 559.516 248.623  c
559.610 248.529 559.719 248.482 559.844 248.482  c
559.948 248.482 560.047 248.498 560.141 248.529  c
560.214 248.550 560.365 248.623 560.594 248.748  c
560.834 248.873 560.995 248.946 561.079 248.967  c
561.224 249.008 561.381 249.029 561.547 249.029  c
561.943 249.029 562.287 248.878 562.579 248.576  c
562.881 248.264 563.032 247.899 563.032 247.482  c
563.032 247.170 562.964 246.868 562.829 246.576  c
562.724 246.357 562.610 246.191 562.485 246.076  c
562.318 245.920 562.089 245.779 561.797 245.654  c
561.506 245.529 561.209 245.467 560.907 245.467  c
560.719 245.467 l
560.719 245.279 l
561.021 245.248 561.329 245.139 561.641 244.951  c
561.954 244.764 562.178 244.545 562.313 244.295  c
562.459 244.035 562.532 243.748 562.532 243.436  c
562.532 243.040 562.407 242.717 562.157 242.467  c
561.907 242.217 561.594 242.092 561.219 242.092  c
560.605 242.092 560.094 242.415 559.688 243.061  c
559.500 242.967 l
h
565.329 245.482 m
565.329 244.576 565.464 243.795 565.735 243.139  c
566.006 242.482 566.370 241.993 566.829 241.670  c
567.183 241.420 567.547 241.295 567.922 241.295  c
568.526 241.295 569.073 241.607 569.563 242.232  c
570.167 242.993 570.469 244.035 570.469 245.357  c
570.469 246.274 570.334 247.055 570.063 247.701  c
569.803 248.347 569.464 248.816 569.047 249.107  c
568.641 249.399 568.245 249.545 567.860 249.545  c
567.099 249.545 566.469 249.097 565.969 248.201  c
565.542 247.451 565.329 246.545 565.329 245.482  c
h
566.469 245.623 m
566.469 246.717 566.605 247.607 566.875 248.295  c
567.105 248.878 567.438 249.170 567.875 249.170  c
568.084 249.170 568.303 249.076 568.532 248.889  c
568.761 248.701 568.933 248.383 569.047 247.936  c
569.224 247.269 569.313 246.321 569.313 245.092  c
569.313 244.186 569.219 243.430 569.032 242.826  c
568.896 242.378 568.714 242.061 568.485 241.873  c
568.329 241.748 568.136 241.686 567.907 241.686  c
567.646 241.686 567.412 241.805 567.204 242.045  c
566.922 242.368 566.730 242.878 566.625 243.576  c
566.521 244.264 566.469 244.946 566.469 245.623  c
h
581.250 241.279 m
581.469 243.779 l
581.250 243.779 l
581.053 243.154 580.787 242.686 580.454 242.373  c
579.985 241.915 579.375 241.686 578.625 241.686  c
577.615 241.686 576.849 242.087 576.329 242.889  c
575.881 243.566 575.657 244.368 575.657 245.295  c
575.657 246.055 575.803 246.748 576.094 247.373  c
576.396 247.998 576.782 248.456 577.250 248.748  c
577.730 249.040 578.219 249.186 578.719 249.186  c
579.011 249.186 579.292 249.149 579.563 249.076  c
579.834 249.003 580.099 248.894 580.360 248.748  c
580.360 246.451 l
580.360 246.055 580.329 245.795 580.266 245.670  c
580.204 245.545 580.110 245.451 579.985 245.389  c
579.860 245.326 579.636 245.295 579.313 245.295  c
579.313 245.061 l
582.391 245.061 l
582.391 245.295 l
582.235 245.295 l
581.933 245.295 581.724 245.394 581.610 245.592  c
581.537 245.738 581.500 246.024 581.500 246.451  c
581.500 248.889 l
581.053 249.128 580.610 249.305 580.172 249.420  c
579.735 249.535 579.245 249.592 578.704 249.592  c
577.172 249.592 576.006 249.097 575.204 248.107  c
574.610 247.368 574.313 246.519 574.313 245.561  c
574.313 244.852 574.480 244.180 574.813 243.545  c
575.219 242.785 575.766 242.196 576.454 241.779  c
577.037 241.446 577.724 241.279 578.516 241.279  c
578.808 241.279 579.068 241.305 579.297 241.357  c
579.537 241.399 579.875 241.498 580.313 241.654  c
580.532 241.738 580.678 241.779 580.750 241.779  c
580.823 241.779 580.886 241.748 580.938 241.686  c
580.990 241.613 581.026 241.477 581.047 241.279  c
581.250 241.279 l
h
593.791 241.451 m
593.791 241.670 l
593.583 241.670 593.411 241.712 593.276 241.795  c
593.151 241.868 593.031 242.003 592.916 242.201  c
592.844 242.337 592.719 242.665 592.541 243.186  c
590.338 249.592 l
590.104 249.592 l
588.291 244.498 l
586.495 249.592 l
586.276 249.592 l
583.916 242.982 l
583.739 242.493 583.630 242.201 583.588 242.107  c
583.505 241.962 583.396 241.852 583.260 241.779  c
583.125 241.706 582.942 241.670 582.713 241.670  c
582.713 241.451 l
585.651 241.451 l
585.651 241.670 l
585.510 241.670 l
585.312 241.670 585.156 241.717 585.041 241.811  c
584.937 241.904 584.885 242.019 584.885 242.154  c
584.885 242.290 584.969 242.602 585.135 243.092  c
586.698 247.561 l
588.026 243.764 l
587.791 243.092 l
587.604 242.561 l
587.521 242.373 587.427 242.201 587.323 242.045  c
587.271 241.972 587.208 241.910 587.135 241.857  c
587.041 241.795 586.942 241.748 586.838 241.717  c
586.765 241.686 586.651 241.670 586.495 241.670  c
586.495 241.451 l
589.588 241.451 l
589.588 241.670 l
589.370 241.670 l
589.151 241.670 588.989 241.717 588.885 241.811  c
588.791 241.904 588.745 242.035 588.745 242.201  c
588.745 242.399 588.833 242.743 589.010 243.232  c
590.526 247.561 l
592.041 243.186 l
592.208 242.696 592.291 242.357 592.291 242.170  c
592.291 242.087 592.260 242.008 592.198 241.936  c
592.146 241.852 592.078 241.795 591.995 241.764  c
591.849 241.701 591.656 241.670 591.416 241.670  c
591.416 241.451 l
593.791 241.451 l
h
595.836 241.076 m
595.836 244.998 l
596.274 244.519 596.618 244.212 596.868 244.076  c
597.118 243.941 597.373 243.873 597.633 243.873  c
597.935 243.873 598.196 243.962 598.414 244.139  c
598.633 244.305 598.795 244.566 598.899 244.920  c
598.972 245.170 599.008 245.628 599.008 246.295  c
599.008 248.186 l
599.008 248.529 599.034 248.764 599.086 248.889  c
599.128 248.982 599.196 249.055 599.289 249.107  c
599.383 249.160 599.555 249.186 599.805 249.186  c
599.805 249.404 l
597.164 249.404 l
597.164 249.186 l
597.289 249.186 l
597.539 249.186 597.711 249.149 597.805 249.076  c
597.909 249.003 597.982 248.894 598.024 248.748  c
598.034 248.686 598.039 248.498 598.039 248.186  c
598.039 246.295 l
598.039 245.712 598.008 245.326 597.946 245.139  c
597.883 244.951 597.784 244.816 597.649 244.732  c
597.524 244.639 597.368 244.592 597.180 244.592  c
596.982 244.592 596.779 244.644 596.571 244.748  c
596.373 244.842 596.128 245.045 595.836 245.357  c
595.836 248.186 l
595.836 248.561 595.857 248.795 595.899 248.889  c
595.941 248.972 596.013 249.045 596.118 249.107  c
596.232 249.160 596.425 249.186 596.696 249.186  c
596.696 249.404 l
594.039 249.404 l
594.039 249.186 l
594.279 249.186 594.467 249.149 594.602 249.076  c
594.685 249.045 594.748 248.977 594.789 248.873  c
594.842 248.758 594.868 248.529 594.868 248.186  c
594.868 243.326 l
594.868 242.722 594.852 242.352 594.821 242.217  c
594.789 242.071 594.743 241.972 594.680 241.920  c
594.618 241.868 594.539 241.842 594.446 241.842  c
594.362 241.842 594.227 241.873 594.039 241.936  c
593.961 241.732 l
595.571 241.076 l
595.836 241.076 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
