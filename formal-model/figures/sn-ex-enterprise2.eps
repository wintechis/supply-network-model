%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 187 62
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Dienstag, 26. November 2024 um 15:31:13 Mitteleuropäische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
187 62 setpagesize
0 0 0 0 setmargins
0 0 setorigin
187 62 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 187 62 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
468.000 214.000 m
655.000 214.000 l
655.000 276.000 l
468.000 276.000 l
468.000 214.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
f
0 J
1.45000 M
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
S
2 J
10.0000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
f
0 J
1.45000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
618.987 228.033 m
619.539 228.158 619.951 228.346 620.221 228.596  c
620.596 228.960 620.784 229.403 620.784 229.924  c
620.784 230.320 620.659 230.700 620.409 231.064  c
620.159 231.418 619.815 231.679 619.378 231.846  c
618.951 232.012 618.289 232.096 617.393 232.096  c
613.643 232.096 l
613.643 231.877 l
613.940 231.877 l
614.274 231.877 614.513 231.773 614.659 231.564  c
614.742 231.429 614.784 231.137 614.784 230.689  c
614.784 225.549 l
614.784 225.059 614.727 224.752 614.612 224.627  c
614.466 224.450 614.242 224.361 613.940 224.361  c
613.643 224.361 l
613.643 224.142 l
617.081 224.142 l
617.716 224.142 618.227 224.189 618.612 224.283  c
619.195 224.429 619.643 224.684 619.956 225.049  c
620.268 225.403 620.425 225.809 620.425 226.267  c
620.425 226.663 620.300 227.023 620.050 227.346  c
619.810 227.658 619.456 227.887 618.987 228.033  c
h
615.909 227.721 m
616.055 227.752 616.221 227.773 616.409 227.783  c
616.596 227.793 616.800 227.799 617.018 227.799  c
617.591 227.799 618.018 227.741 618.300 227.627  c
618.591 227.502 618.810 227.314 618.956 227.064  c
619.112 226.804 619.190 226.523 619.190 226.221  c
619.190 225.762 619.003 225.372 618.628 225.049  c
618.253 224.715 617.701 224.549 616.971 224.549  c
616.576 224.549 616.221 224.590 615.909 224.674  c
615.909 227.721 l
h
615.909 231.517 m
616.367 231.622 616.815 231.674 617.253 231.674  c
617.961 231.674 618.498 231.517 618.862 231.205  c
619.237 230.882 619.425 230.486 619.425 230.017  c
619.425 229.715 619.341 229.424 619.175 229.142  c
619.008 228.851 618.732 228.622 618.346 228.455  c
617.971 228.288 617.508 228.205 616.956 228.205  c
616.706 228.205 616.492 228.210 616.315 228.221  c
616.149 228.231 616.013 228.247 615.909 228.267  c
615.909 231.517 l
h
626.350 232.096 m
623.288 225.408 l
623.288 230.721 l
623.288 231.210 623.340 231.512 623.444 231.627  c
623.590 231.793 623.819 231.877 624.132 231.877  c
624.413 231.877 l
624.413 232.096 l
621.647 232.096 l
621.647 231.877 l
621.929 231.877 l
622.262 231.877 622.501 231.778 622.647 231.580  c
622.731 231.455 622.772 231.168 622.772 230.721  c
622.772 225.533 l
622.772 225.179 622.731 224.924 622.647 224.767  c
622.595 224.653 622.496 224.559 622.350 224.486  c
622.205 224.403 621.970 224.361 621.647 224.361  c
621.647 224.142 l
623.897 224.142 l
626.772 230.361 l
629.616 224.142 l
631.866 224.142 l
631.866 224.361 l
631.585 224.361 l
631.251 224.361 631.012 224.465 630.866 224.674  c
630.783 224.799 630.741 225.085 630.741 225.533  c
630.741 230.721 l
630.741 231.210 630.793 231.512 630.897 231.627  c
631.043 231.793 631.272 231.877 631.585 231.877  c
631.866 231.877 l
631.866 232.096 l
628.491 232.096 l
628.491 231.877 l
628.772 231.877 l
629.106 231.877 629.345 231.778 629.491 231.580  c
629.574 231.455 629.616 231.168 629.616 230.721  c
629.616 225.408 l
626.554 232.096 l
626.350 232.096 l
h
643.348 224.142 m
643.348 224.361 l
643.140 224.361 642.968 224.403 642.833 224.486  c
642.708 224.559 642.588 224.695 642.473 224.892  c
642.401 225.028 642.276 225.356 642.098 225.877  c
639.895 232.283 l
639.661 232.283 l
637.848 227.189 l
636.052 232.283 l
635.833 232.283 l
633.473 225.674 l
633.296 225.184 633.187 224.892 633.145 224.799  c
633.062 224.653 632.953 224.543 632.817 224.471  c
632.682 224.398 632.499 224.361 632.270 224.361  c
632.270 224.142 l
635.208 224.142 l
635.208 224.361 l
635.067 224.361 l
634.869 224.361 634.713 224.408 634.598 224.502  c
634.494 224.596 634.442 224.710 634.442 224.846  c
634.442 224.981 634.526 225.293 634.692 225.783  c
636.255 230.252 l
637.583 226.455 l
637.348 225.783 l
637.161 225.252 l
637.078 225.064 636.984 224.892 636.880 224.736  c
636.828 224.663 636.765 224.601 636.692 224.549  c
636.598 224.486 636.499 224.439 636.395 224.408  c
636.322 224.377 636.208 224.361 636.052 224.361  c
636.052 224.142 l
639.145 224.142 l
639.145 224.361 l
638.927 224.361 l
638.708 224.361 638.546 224.408 638.442 224.502  c
638.348 224.596 638.302 224.726 638.302 224.892  c
638.302 225.090 638.390 225.434 638.567 225.924  c
640.083 230.252 l
641.598 225.877 l
641.765 225.387 641.848 225.049 641.848 224.861  c
641.848 224.778 641.817 224.700 641.755 224.627  c
641.703 224.543 641.635 224.486 641.552 224.455  c
641.406 224.392 641.213 224.361 640.973 224.361  c
640.973 224.142 l
643.348 224.142 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
484.547 228.033 m
485.099 228.158 485.510 228.346 485.781 228.596  c
486.156 228.960 486.344 229.403 486.344 229.924  c
486.344 230.320 486.219 230.700 485.969 231.064  c
485.719 231.418 485.375 231.679 484.938 231.846  c
484.510 232.012 483.849 232.096 482.953 232.096  c
479.203 232.096 l
479.203 231.877 l
479.500 231.877 l
479.833 231.877 480.073 231.773 480.219 231.564  c
480.302 231.429 480.344 231.137 480.344 230.689  c
480.344 225.549 l
480.344 225.059 480.286 224.752 480.172 224.627  c
480.026 224.450 479.802 224.361 479.500 224.361  c
479.203 224.361 l
479.203 224.142 l
482.641 224.142 l
483.276 224.142 483.786 224.189 484.172 224.283  c
484.755 224.429 485.203 224.684 485.516 225.049  c
485.828 225.403 485.984 225.809 485.984 226.267  c
485.984 226.663 485.859 227.023 485.609 227.346  c
485.370 227.658 485.016 227.887 484.547 228.033  c
h
481.469 227.721 m
481.615 227.752 481.781 227.773 481.969 227.783  c
482.156 227.793 482.359 227.799 482.578 227.799  c
483.151 227.799 483.578 227.741 483.859 227.627  c
484.151 227.502 484.370 227.314 484.516 227.064  c
484.672 226.804 484.750 226.523 484.750 226.221  c
484.750 225.762 484.562 225.372 484.188 225.049  c
483.812 224.715 483.260 224.549 482.531 224.549  c
482.135 224.549 481.781 224.590 481.469 224.674  c
481.469 227.721 l
h
481.469 231.517 m
481.927 231.622 482.375 231.674 482.812 231.674  c
483.521 231.674 484.057 231.517 484.422 231.205  c
484.797 230.882 484.984 230.486 484.984 230.017  c
484.984 229.715 484.901 229.424 484.734 229.142  c
484.568 228.851 484.292 228.622 483.906 228.455  c
483.531 228.288 483.068 228.205 482.516 228.205  c
482.266 228.205 482.052 228.210 481.875 228.221  c
481.708 228.231 481.573 228.247 481.469 228.267  c
481.469 231.517 l
h
492.723 224.142 m
495.488 224.142 l
495.488 224.361 l
495.348 224.361 l
495.243 224.361 495.092 224.408 494.895 224.502  c
494.697 224.596 494.520 224.726 494.363 224.892  c
494.207 225.059 494.009 225.330 493.770 225.705  c
491.863 228.721 l
491.863 230.721 l
491.863 231.210 491.915 231.512 492.020 231.627  c
492.165 231.793 492.400 231.877 492.723 231.877  c
492.988 231.877 l
492.988 232.096 l
489.613 232.096 l
489.613 231.877 l
489.895 231.877 l
490.228 231.877 490.462 231.778 490.598 231.580  c
490.691 231.455 490.738 231.168 490.738 230.721  c
490.738 228.830 l
488.551 225.502 l
488.290 225.116 488.113 224.877 488.020 224.783  c
487.936 224.679 487.749 224.559 487.457 224.424  c
487.374 224.382 487.259 224.361 487.113 224.361  c
487.113 224.142 l
490.520 224.142 l
490.520 224.361 l
490.332 224.361 l
490.155 224.361 489.988 224.408 489.832 224.502  c
489.676 224.585 489.598 224.710 489.598 224.877  c
489.598 225.023 489.717 225.278 489.957 225.642  c
491.613 228.205 l
493.176 225.752 l
493.405 225.387 493.520 225.116 493.520 224.939  c
493.520 224.825 493.493 224.726 493.441 224.642  c
493.389 224.559 493.306 224.491 493.191 224.439  c
493.087 224.387 492.931 224.361 492.723 224.361  c
492.723 224.142 l
h
495.873 232.096 m
495.873 231.877 l
496.170 231.877 l
496.514 231.877 496.753 231.767 496.889 231.549  c
496.972 231.424 497.014 231.137 497.014 230.689  c
497.014 225.549 l
497.014 225.059 496.962 224.752 496.857 224.627  c
496.701 224.450 496.472 224.361 496.170 224.361  c
495.873 224.361 l
495.873 224.142 l
499.107 224.142 l
500.295 224.142 501.196 224.278 501.811 224.549  c
502.436 224.820 502.936 225.273 503.311 225.908  c
503.686 226.533 503.873 227.257 503.873 228.080  c
503.873 229.184 503.540 230.106 502.873 230.846  c
502.123 231.679 500.972 232.096 499.420 232.096  c
495.873 232.096 l
h
498.139 231.517 m
498.639 231.632 499.055 231.689 499.389 231.689  c
500.295 231.689 501.045 231.372 501.639 230.736  c
502.243 230.090 502.545 229.226 502.545 228.142  c
502.545 227.038 502.243 226.174 501.639 225.549  c
501.045 224.913 500.279 224.596 499.342 224.596  c
498.988 224.596 498.587 224.653 498.139 224.767  c
498.139 231.517 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 256.000 m
611.440 256.000 l
S
newpath
619.440 256.000 m
607.440 251.000 l
610.440 256.000 l
607.440 261.000 l
h
f
newpath
531.385 247.873 m
530.838 249.404 l
526.151 249.404 l
526.151 249.186 l
527.526 247.925 528.495 246.899 529.057 246.107  c
529.620 245.305 529.901 244.576 529.901 243.920  c
529.901 243.420 529.745 243.008 529.432 242.686  c
529.130 242.352 528.760 242.186 528.323 242.186  c
527.937 242.186 527.588 242.300 527.276 242.529  c
526.963 242.758 526.734 243.097 526.588 243.545  c
526.370 243.545 l
526.474 242.816 526.724 242.258 527.120 241.873  c
527.526 241.488 528.031 241.295 528.635 241.295  c
529.281 241.295 529.817 241.503 530.245 241.920  c
530.682 242.326 530.901 242.811 530.901 243.373  c
530.901 243.779 530.807 244.186 530.620 244.592  c
530.328 245.217 529.859 245.883 529.213 246.592  c
528.245 247.654 527.635 248.295 527.385 248.514  c
529.463 248.514 l
529.890 248.514 530.187 248.498 530.354 248.467  c
530.521 248.436 530.672 248.373 530.807 248.279  c
530.953 248.186 531.073 248.050 531.166 247.873  c
531.385 247.873 l
h
532.323 245.482 m
532.323 244.576 532.458 243.795 532.729 243.139  c
533.000 242.482 533.364 241.993 533.823 241.670  c
534.177 241.420 534.541 241.295 534.916 241.295  c
535.521 241.295 536.067 241.607 536.557 242.232  c
537.161 242.993 537.463 244.035 537.463 245.357  c
537.463 246.274 537.328 247.055 537.057 247.701  c
536.797 248.347 536.458 248.816 536.041 249.107  c
535.635 249.399 535.239 249.545 534.854 249.545  c
534.094 249.545 533.463 249.097 532.963 248.201  c
532.536 247.451 532.323 246.545 532.323 245.482  c
h
533.463 245.623 m
533.463 246.717 533.599 247.607 533.870 248.295  c
534.099 248.878 534.432 249.170 534.870 249.170  c
535.078 249.170 535.297 249.076 535.526 248.889  c
535.755 248.701 535.927 248.383 536.041 247.936  c
536.219 247.269 536.307 246.321 536.307 245.092  c
536.307 244.186 536.213 243.430 536.026 242.826  c
535.890 242.378 535.708 242.061 535.479 241.873  c
535.323 241.748 535.130 241.686 534.901 241.686  c
534.640 241.686 534.406 241.805 534.198 242.045  c
533.916 242.368 533.724 242.878 533.620 243.576  c
533.515 244.264 533.463 244.946 533.463 245.623  c
h
543.385 247.873 m
542.838 249.404 l
538.151 249.404 l
538.151 249.186 l
539.526 247.925 540.495 246.899 541.057 246.107  c
541.620 245.305 541.901 244.576 541.901 243.920  c
541.901 243.420 541.745 243.008 541.432 242.686  c
541.130 242.352 540.760 242.186 540.323 242.186  c
539.937 242.186 539.588 242.300 539.276 242.529  c
538.963 242.758 538.734 243.097 538.588 243.545  c
538.370 243.545 l
538.474 242.816 538.724 242.258 539.120 241.873  c
539.526 241.488 540.031 241.295 540.635 241.295  c
541.281 241.295 541.817 241.503 542.245 241.920  c
542.682 242.326 542.901 242.811 542.901 243.373  c
542.901 243.779 542.807 244.186 542.620 244.592  c
542.328 245.217 541.859 245.883 541.213 246.592  c
540.245 247.654 539.635 248.295 539.385 248.514  c
541.463 248.514 l
541.890 248.514 542.187 248.498 542.354 248.467  c
542.521 248.436 542.672 248.373 542.807 248.279  c
542.953 248.186 543.073 248.050 543.166 247.873  c
543.385 247.873 l
h
544.495 242.967 m
544.724 242.436 545.010 242.024 545.354 241.732  c
545.698 241.441 546.130 241.295 546.651 241.295  c
547.286 241.295 547.771 241.503 548.104 241.920  c
548.364 242.222 548.495 242.550 548.495 242.904  c
548.495 243.488 548.130 244.087 547.401 244.701  c
547.890 244.889 548.260 245.160 548.510 245.514  c
548.760 245.868 548.885 246.290 548.885 246.779  c
548.885 247.467 548.666 248.061 548.229 248.561  c
547.666 249.217 546.844 249.545 545.760 249.545  c
545.219 249.545 544.849 249.477 544.651 249.342  c
544.463 249.206 544.370 249.066 544.370 248.920  c
544.370 248.805 544.416 248.706 544.510 248.623  c
544.604 248.529 544.713 248.482 544.838 248.482  c
544.942 248.482 545.041 248.498 545.135 248.529  c
545.208 248.550 545.359 248.623 545.588 248.748  c
545.828 248.873 545.989 248.946 546.073 248.967  c
546.219 249.008 546.375 249.029 546.541 249.029  c
546.937 249.029 547.281 248.878 547.573 248.576  c
547.875 248.264 548.026 247.899 548.026 247.482  c
548.026 247.170 547.958 246.868 547.823 246.576  c
547.719 246.357 547.604 246.191 547.479 246.076  c
547.312 245.920 547.083 245.779 546.791 245.654  c
546.500 245.529 546.203 245.467 545.901 245.467  c
545.713 245.467 l
545.713 245.279 l
546.015 245.248 546.323 245.139 546.635 244.951  c
546.948 244.764 547.172 244.545 547.307 244.295  c
547.453 244.035 547.526 243.748 547.526 243.436  c
547.526 243.040 547.401 242.717 547.151 242.467  c
546.901 242.217 546.588 242.092 546.213 242.092  c
545.599 242.092 545.088 242.415 544.682 243.061  c
544.495 242.967 l
h
555.166 249.498 m
555.573 250.186 556.005 250.691 556.463 251.014  c
556.922 251.337 557.448 251.519 558.041 251.561  c
558.041 251.748 l
557.500 251.738 556.922 251.633 556.307 251.436  c
555.703 251.238 555.125 250.962 554.573 250.607  c
554.021 250.264 553.547 249.894 553.151 249.498  c
552.588 249.269 552.140 249.024 551.807 248.764  c
551.338 248.389 550.969 247.925 550.698 247.373  c
550.437 246.821 550.307 246.170 550.307 245.420  c
550.307 244.232 550.692 243.248 551.463 242.467  c
552.234 241.675 553.166 241.279 554.260 241.279  c
555.302 241.279 556.198 241.675 556.948 242.467  c
557.708 243.248 558.088 244.238 558.088 245.436  c
558.088 246.404 557.817 247.258 557.276 247.998  c
556.745 248.727 556.041 249.227 555.166 249.498  c
h
554.182 241.732 m
553.474 241.732 552.901 241.982 552.463 242.482  c
551.922 243.128 551.651 244.107 551.651 245.420  c
551.651 246.701 551.927 247.691 552.479 248.389  c
552.906 248.920 553.474 249.186 554.182 249.186  c
554.922 249.186 555.515 248.920 555.963 248.389  c
556.495 247.753 556.760 246.816 556.760 245.576  c
556.760 244.628 556.614 243.831 556.323 243.186  c
556.094 242.686 555.797 242.321 555.432 242.092  c
555.067 241.852 554.651 241.732 554.182 241.732  c
h
564.129 246.467 m
564.129 247.311 l
563.067 247.311 l
563.067 249.404 l
562.098 249.404 l
562.098 247.311 l
558.739 247.311 l
558.739 246.561 l
562.426 241.295 l
563.067 241.295 l
563.067 246.467 l
564.129 246.467 l
h
562.098 246.467 m
562.098 242.529 l
559.317 246.467 l
562.098 246.467 l
h
566.239 243.873 m
566.426 243.873 566.582 243.936 566.707 244.061  c
566.832 244.186 566.895 244.342 566.895 244.529  c
566.895 244.706 566.832 244.857 566.707 244.982  c
566.582 245.107 566.426 245.170 566.239 245.170  c
566.062 245.170 565.911 245.107 565.786 244.982  c
565.661 244.857 565.598 244.706 565.598 244.529  c
565.598 244.342 565.661 244.186 565.786 244.061  c
565.911 243.936 566.062 243.873 566.239 243.873  c
h
566.239 248.264 m
566.416 248.264 566.567 248.331 566.692 248.467  c
566.827 248.592 566.895 248.743 566.895 248.920  c
566.895 249.097 566.827 249.253 566.692 249.389  c
566.567 249.514 566.416 249.576 566.239 249.576  c
566.051 249.576 565.895 249.514 565.770 249.389  c
565.645 249.253 565.582 249.097 565.582 248.920  c
565.582 248.743 565.645 248.592 565.770 248.467  c
565.895 248.331 566.051 248.264 566.239 248.264  c
h
573.182 245.404 m
572.557 244.883 572.151 244.467 571.963 244.154  c
571.786 243.842 571.698 243.519 571.698 243.186  c
571.698 242.675 571.896 242.232 572.291 241.857  c
572.698 241.482 573.229 241.295 573.885 241.295  c
574.531 241.295 575.047 241.472 575.432 241.826  c
575.828 242.170 576.026 242.561 576.026 242.998  c
576.026 243.300 575.916 243.607 575.698 243.920  c
575.489 244.222 575.052 244.581 574.385 244.998  c
575.073 245.529 575.526 245.951 575.745 246.264  c
576.047 246.660 576.198 247.076 576.198 247.514  c
576.198 248.076 575.984 248.555 575.557 248.951  c
575.130 249.347 574.573 249.545 573.885 249.545  c
573.125 249.545 572.536 249.311 572.120 248.842  c
571.786 248.456 571.620 248.040 571.620 247.592  c
571.620 247.238 571.734 246.889 571.963 246.545  c
572.203 246.201 572.609 245.821 573.182 245.404  c
h
574.104 244.779 m
574.573 244.352 574.870 244.019 574.995 243.779  c
575.120 243.529 575.182 243.253 575.182 242.951  c
575.182 242.535 575.067 242.212 574.838 241.982  c
574.609 241.753 574.297 241.639 573.901 241.639  c
573.505 241.639 573.182 241.753 572.932 241.982  c
572.682 242.212 572.557 242.482 572.557 242.795  c
572.557 242.993 572.604 243.196 572.698 243.404  c
572.802 243.602 572.953 243.795 573.151 243.982  c
574.104 244.779 l
h
573.463 245.623 m
573.140 245.894 572.901 246.191 572.745 246.514  c
572.588 246.837 572.510 247.186 572.510 247.561  c
572.510 248.071 572.646 248.477 572.916 248.779  c
573.198 249.081 573.552 249.232 573.979 249.232  c
574.396 249.232 574.729 249.113 574.979 248.873  c
575.239 248.633 575.370 248.342 575.370 247.998  c
575.370 247.717 575.297 247.467 575.151 247.248  c
574.870 246.831 574.307 246.290 573.463 245.623  c
h
581.791 249.404 m
578.729 242.717 l
578.729 248.029 l
578.729 248.519 578.781 248.821 578.885 248.936  c
579.031 249.102 579.260 249.186 579.573 249.186  c
579.854 249.186 l
579.854 249.404 l
577.088 249.404 l
577.088 249.186 l
577.370 249.186 l
577.703 249.186 577.942 249.087 578.088 248.889  c
578.172 248.764 578.213 248.477 578.213 248.029  c
578.213 242.842 l
578.213 242.488 578.172 242.232 578.088 242.076  c
578.036 241.962 577.937 241.868 577.791 241.795  c
577.646 241.712 577.411 241.670 577.088 241.670  c
577.088 241.451 l
579.338 241.451 l
582.213 247.670 l
585.057 241.451 l
587.307 241.451 l
587.307 241.670 l
587.026 241.670 l
586.692 241.670 586.453 241.774 586.307 241.982  c
586.224 242.107 586.182 242.394 586.182 242.842  c
586.182 248.029 l
586.182 248.519 586.234 248.821 586.338 248.936  c
586.484 249.102 586.713 249.186 587.026 249.186  c
587.307 249.186 l
587.307 249.404 l
583.932 249.404 l
583.932 249.186 l
584.213 249.186 l
584.547 249.186 584.786 249.087 584.932 248.889  c
585.015 248.764 585.057 248.477 585.057 248.029  c
585.057 242.717 l
581.995 249.404 l
581.791 249.404 l
h
595.524 245.092 m
592.149 245.092 l
592.138 245.248 592.133 245.410 592.133 245.576  c
595.368 245.576 l
595.243 246.029 l
592.149 246.029 l
592.180 246.852 592.347 247.540 592.649 248.092  c
592.993 248.727 593.461 249.045 594.055 249.045  c
594.576 249.045 595.013 248.915 595.368 248.654  c
595.576 248.488 595.842 248.180 596.164 247.732  c
596.352 247.857 l
596.008 248.389 595.701 248.764 595.430 248.982  c
594.982 249.357 594.446 249.545 593.821 249.545  c
592.914 249.545 592.217 249.170 591.727 248.420  c
591.321 247.816 591.081 247.019 591.008 246.029  c
590.414 246.029 l
590.555 245.576 l
590.993 245.576 l
590.993 245.482 l
590.993 245.357 590.998 245.227 591.008 245.092  c
590.414 245.092 l
590.555 244.623 l
591.055 244.623 l
591.180 243.696 591.493 242.936 591.993 242.342  c
592.566 241.644 593.300 241.295 594.196 241.295  c
594.862 241.295 595.529 241.467 596.196 241.811  c
596.196 243.561 l
595.961 243.561 l
595.857 242.311 595.269 241.686 594.196 241.686  c
593.581 241.686 593.097 242.008 592.743 242.654  c
592.461 243.165 592.279 243.821 592.196 244.623  c
595.649 244.623 l
595.524 245.092 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
