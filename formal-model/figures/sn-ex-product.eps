%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 206 62
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Montag, 25. November 2024 um 14:46:43 Mitteleuropäische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
206 62 setpagesize
0 0 0 0 setmargins
0 0 setorigin
206 62 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
206.000 0.00000 l
206.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
206.000 0.00000 l
206.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 206 62 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -449.000 -214.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
449.000 214.000 m
655.000 214.000 l
655.000 276.000 l
449.000 276.000 l
449.000 214.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -449.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -449.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -449.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
f
0 J
1.45000 M
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
461.892 228.342 m
462.444 228.467 462.855 228.654 463.126 228.904  c
463.501 229.269 463.688 229.712 463.688 230.232  c
463.688 230.628 463.563 231.008 463.313 231.373  c
463.063 231.727 462.720 231.988 462.282 232.154  c
461.855 232.321 461.194 232.404 460.298 232.404  c
456.548 232.404 l
456.548 232.186 l
456.845 232.186 l
457.178 232.186 457.418 232.081 457.563 231.873  c
457.647 231.738 457.688 231.446 457.688 230.998  c
457.688 225.857 l
457.688 225.368 457.631 225.061 457.517 224.936  c
457.371 224.758 457.147 224.670 456.845 224.670  c
456.548 224.670 l
456.548 224.451 l
459.985 224.451 l
460.621 224.451 461.131 224.498 461.517 224.592  c
462.100 224.738 462.548 224.993 462.860 225.357  c
463.173 225.712 463.329 226.118 463.329 226.576  c
463.329 226.972 463.204 227.331 462.954 227.654  c
462.715 227.967 462.360 228.196 461.892 228.342  c
h
458.813 228.029 m
458.959 228.061 459.126 228.081 459.313 228.092  c
459.501 228.102 459.704 228.107 459.923 228.107  c
460.496 228.107 460.923 228.050 461.204 227.936  c
461.496 227.811 461.715 227.623 461.860 227.373  c
462.017 227.113 462.095 226.831 462.095 226.529  c
462.095 226.071 461.907 225.680 461.532 225.357  c
461.157 225.024 460.605 224.857 459.876 224.857  c
459.480 224.857 459.126 224.899 458.813 224.982  c
458.813 228.029 l
h
458.813 231.826 m
459.272 231.930 459.720 231.982 460.157 231.982  c
460.866 231.982 461.402 231.826 461.767 231.514  c
462.142 231.191 462.329 230.795 462.329 230.326  c
462.329 230.024 462.246 229.732 462.079 229.451  c
461.912 229.160 461.636 228.930 461.251 228.764  c
460.876 228.597 460.412 228.514 459.860 228.514  c
459.610 228.514 459.397 228.519 459.220 228.529  c
459.053 228.540 458.918 228.555 458.813 228.576  c
458.813 231.826 l
h
466.567 224.076 m
466.567 231.186 l
466.567 231.529 466.593 231.758 466.646 231.873  c
466.698 231.977 466.771 232.055 466.864 232.107  c
466.968 232.160 467.161 232.186 467.442 232.186  c
467.442 232.404 l
464.802 232.404 l
464.802 232.186 l
465.052 232.186 465.218 232.165 465.302 232.123  c
465.396 232.071 465.468 231.988 465.521 231.873  c
465.573 231.748 465.599 231.519 465.599 231.186  c
465.599 226.311 l
465.599 225.706 465.583 225.337 465.552 225.201  c
465.531 225.066 465.489 224.972 465.427 224.920  c
465.364 224.868 465.286 224.842 465.192 224.842  c
465.088 224.842 464.958 224.873 464.802 224.936  c
464.708 224.732 l
466.302 224.076 l
466.567 224.076 l
h
471.104 231.623 m
470.552 232.050 470.203 232.300 470.058 232.373  c
469.849 232.467 469.625 232.514 469.386 232.514  c
469.021 232.514 468.714 232.389 468.464 232.139  c
468.224 231.878 468.104 231.545 468.104 231.139  c
468.104 230.868 468.167 230.639 468.292 230.451  c
468.448 230.191 468.724 229.946 469.120 229.717  c
469.516 229.477 470.177 229.186 471.104 228.842  c
471.104 228.639 l
471.104 228.097 471.016 227.727 470.839 227.529  c
470.672 227.331 470.427 227.232 470.104 227.232  c
469.854 227.232 469.657 227.300 469.511 227.436  c
469.365 227.571 469.292 227.722 469.292 227.889  c
469.308 228.232 l
469.308 228.410 469.261 228.550 469.167 228.654  c
469.073 228.748 468.953 228.795 468.808 228.795  c
468.662 228.795 468.542 228.743 468.448 228.639  c
468.365 228.535 468.323 228.399 468.323 228.232  c
468.323 227.889 468.495 227.576 468.839 227.295  c
469.183 227.014 469.662 226.873 470.276 226.873  c
470.756 226.873 471.146 226.956 471.448 227.123  c
471.677 227.238 471.849 227.425 471.964 227.686  c
472.037 227.852 472.073 228.196 472.073 228.717  c
472.073 230.545 l
472.073 231.055 472.078 231.368 472.089 231.482  c
472.110 231.597 472.141 231.675 472.183 231.717  c
472.235 231.748 472.292 231.764 472.354 231.764  c
472.417 231.764 472.469 231.753 472.511 231.732  c
472.594 231.680 472.750 231.535 472.979 231.295  c
472.979 231.623 l
472.542 232.217 472.125 232.514 471.729 232.514  c
471.542 232.514 471.391 232.446 471.276 232.311  c
471.162 232.175 471.104 231.946 471.104 231.623  c
h
471.104 231.248 m
471.104 229.201 l
470.511 229.441 470.131 229.607 469.964 229.701  c
469.651 229.878 469.427 230.061 469.292 230.248  c
469.157 230.436 469.089 230.639 469.089 230.857  c
469.089 231.139 469.172 231.373 469.339 231.561  c
469.516 231.748 469.714 231.842 469.933 231.842  c
470.224 231.842 470.615 231.644 471.104 231.248  c
h
477.181 231.795 m
476.920 232.076 476.665 232.279 476.415 232.404  c
476.165 232.519 475.894 232.576 475.603 232.576  c
475.019 232.576 474.509 232.331 474.071 231.842  c
473.634 231.342 473.415 230.706 473.415 229.936  c
473.415 229.175 473.655 228.477 474.134 227.842  c
474.623 227.196 475.248 226.873 476.009 226.873  c
476.478 226.873 476.868 227.024 477.181 227.326  c
477.181 226.326 l
477.181 225.722 477.165 225.352 477.134 225.217  c
477.103 225.071 477.056 224.972 476.993 224.920  c
476.931 224.868 476.853 224.842 476.759 224.842  c
476.655 224.842 476.519 224.873 476.353 224.936  c
476.274 224.732 l
477.884 224.076 l
478.149 224.076 l
478.149 230.279 l
478.149 230.904 478.160 231.290 478.181 231.436  c
478.212 231.571 478.259 231.665 478.321 231.717  c
478.394 231.769 478.472 231.795 478.556 231.795  c
478.660 231.795 478.800 231.764 478.978 231.701  c
479.040 231.904 l
477.446 232.576 l
477.181 232.576 l
477.181 231.795 l
h
477.181 231.389 m
477.181 228.623 l
477.149 228.363 477.076 228.123 476.962 227.904  c
476.847 227.686 476.691 227.519 476.493 227.404  c
476.306 227.290 476.118 227.232 475.931 227.232  c
475.587 227.232 475.280 227.389 475.009 227.701  c
474.655 228.107 474.478 228.701 474.478 229.482  c
474.478 230.274 474.649 230.878 474.993 231.295  c
475.337 231.712 475.722 231.920 476.149 231.920  c
476.504 231.920 476.847 231.743 477.181 231.389  c
h
480.290 229.061 m
480.280 229.852 480.472 230.477 480.868 230.936  c
481.254 231.383 481.712 231.607 482.243 231.607  c
482.597 231.607 482.905 231.514 483.165 231.326  c
483.425 231.128 483.644 230.795 483.821 230.326  c
483.993 230.451 l
483.910 230.982 483.670 231.472 483.274 231.920  c
482.889 232.357 482.399 232.576 481.806 232.576  c
481.160 232.576 480.608 232.326 480.149 231.826  c
479.691 231.316 479.462 230.639 479.462 229.795  c
479.462 228.878 479.696 228.165 480.165 227.654  c
480.634 227.133 481.222 226.873 481.931 226.873  c
482.535 226.873 483.030 227.071 483.415 227.467  c
483.800 227.863 483.993 228.394 483.993 229.061  c
480.290 229.061 l
h
480.290 228.717 m
482.774 228.717 l
482.754 228.373 482.712 228.133 482.649 227.998  c
482.556 227.779 482.410 227.607 482.212 227.482  c
482.014 227.357 481.811 227.295 481.603 227.295  c
481.280 227.295 480.988 227.420 480.728 227.670  c
480.478 227.920 480.332 228.269 480.290 228.717  c
h
489.882 228.342 m
490.434 228.467 490.845 228.654 491.116 228.904  c
491.491 229.269 491.679 229.712 491.679 230.232  c
491.679 230.628 491.554 231.008 491.304 231.373  c
491.054 231.727 490.710 231.988 490.272 232.154  c
489.845 232.321 489.184 232.404 488.288 232.404  c
484.538 232.404 l
484.538 232.186 l
484.835 232.186 l
485.168 232.186 485.408 232.081 485.554 231.873  c
485.637 231.738 485.679 231.446 485.679 230.998  c
485.679 225.857 l
485.679 225.368 485.621 225.061 485.507 224.936  c
485.361 224.758 485.137 224.670 484.835 224.670  c
484.538 224.670 l
484.538 224.451 l
487.976 224.451 l
488.611 224.451 489.121 224.498 489.507 224.592  c
490.090 224.738 490.538 224.993 490.851 225.357  c
491.163 225.712 491.319 226.118 491.319 226.576  c
491.319 226.972 491.194 227.331 490.944 227.654  c
490.705 227.967 490.351 228.196 489.882 228.342  c
h
486.804 228.029 m
486.950 228.061 487.116 228.081 487.304 228.092  c
487.491 228.102 487.694 228.107 487.913 228.107  c
488.486 228.107 488.913 228.050 489.194 227.936  c
489.486 227.811 489.705 227.623 489.851 227.373  c
490.007 227.113 490.085 226.831 490.085 226.529  c
490.085 226.071 489.897 225.680 489.522 225.357  c
489.147 225.024 488.595 224.857 487.866 224.857  c
487.470 224.857 487.116 224.899 486.804 224.982  c
486.804 228.029 l
h
486.804 231.826 m
487.262 231.930 487.710 231.982 488.147 231.982  c
488.856 231.982 489.392 231.826 489.757 231.514  c
490.132 231.191 490.319 230.795 490.319 230.326  c
490.319 230.024 490.236 229.732 490.069 229.451  c
489.903 229.160 489.627 228.930 489.241 228.764  c
488.866 228.597 488.403 228.514 487.851 228.514  c
487.601 228.514 487.387 228.519 487.210 228.529  c
487.043 228.540 486.908 228.555 486.804 228.576  c
486.804 231.826 l
h
495.761 231.623 m
495.209 232.050 494.860 232.300 494.714 232.373  c
494.506 232.467 494.282 232.514 494.042 232.514  c
493.677 232.514 493.370 232.389 493.120 232.139  c
492.881 231.878 492.761 231.545 492.761 231.139  c
492.761 230.868 492.823 230.639 492.948 230.451  c
493.104 230.191 493.381 229.946 493.776 229.717  c
494.172 229.477 494.834 229.186 495.761 228.842  c
495.761 228.639 l
495.761 228.097 495.672 227.727 495.495 227.529  c
495.328 227.331 495.084 227.232 494.761 227.232  c
494.511 227.232 494.313 227.300 494.167 227.436  c
494.021 227.571 493.948 227.722 493.948 227.889  c
493.964 228.232 l
493.964 228.410 493.917 228.550 493.823 228.654  c
493.729 228.748 493.610 228.795 493.464 228.795  c
493.318 228.795 493.198 228.743 493.104 228.639  c
493.021 228.535 492.979 228.399 492.979 228.232  c
492.979 227.889 493.151 227.576 493.495 227.295  c
493.839 227.014 494.318 226.873 494.933 226.873  c
495.412 226.873 495.802 226.956 496.104 227.123  c
496.334 227.238 496.506 227.425 496.620 227.686  c
496.693 227.852 496.729 228.196 496.729 228.717  c
496.729 230.545 l
496.729 231.055 496.735 231.368 496.745 231.482  c
496.766 231.597 496.797 231.675 496.839 231.717  c
496.891 231.748 496.948 231.764 497.011 231.764  c
497.073 231.764 497.125 231.753 497.167 231.732  c
497.250 231.680 497.407 231.535 497.636 231.295  c
497.636 231.623 l
497.198 232.217 496.782 232.514 496.386 232.514  c
496.198 232.514 496.047 232.446 495.933 232.311  c
495.818 232.175 495.761 231.946 495.761 231.623  c
h
495.761 231.248 m
495.761 229.201 l
495.167 229.441 494.787 229.607 494.620 229.701  c
494.308 229.878 494.084 230.061 493.948 230.248  c
493.813 230.436 493.745 230.639 493.745 230.857  c
493.745 231.139 493.828 231.373 493.995 231.561  c
494.172 231.748 494.370 231.842 494.589 231.842  c
494.881 231.842 495.271 231.644 495.761 231.248  c
h
499.603 225.279 m
499.603 227.029 l
500.853 227.029 l
500.853 227.451 l
499.603 227.451 l
499.603 230.920 l
499.603 231.274 499.649 231.514 499.743 231.639  c
499.847 231.753 499.978 231.811 500.134 231.811  c
500.259 231.811 500.384 231.774 500.509 231.701  c
500.634 231.618 500.728 231.498 500.790 231.342  c
501.024 231.342 l
500.879 231.717 500.681 232.003 500.431 232.201  c
500.181 232.399 499.925 232.498 499.665 232.498  c
499.488 232.498 499.311 232.446 499.134 232.342  c
498.967 232.238 498.842 232.097 498.759 231.920  c
498.675 231.732 498.634 231.446 498.634 231.061  c
498.634 227.451 l
497.790 227.451 l
497.790 227.248 l
497.998 227.165 498.212 227.024 498.431 226.826  c
498.660 226.618 498.863 226.373 499.040 226.092  c
499.134 225.936 499.259 225.665 499.415 225.279  c
499.603 225.279 l
h
502.937 225.279 m
502.937 227.029 l
504.187 227.029 l
504.187 227.451 l
502.937 227.451 l
502.937 230.920 l
502.937 231.274 502.983 231.514 503.077 231.639  c
503.181 231.753 503.312 231.811 503.468 231.811  c
503.593 231.811 503.718 231.774 503.843 231.701  c
503.968 231.618 504.062 231.498 504.124 231.342  c
504.358 231.342 l
504.213 231.717 504.015 232.003 503.765 232.201  c
503.515 232.399 503.259 232.498 502.999 232.498  c
502.822 232.498 502.645 232.446 502.468 232.342  c
502.301 232.238 502.176 232.097 502.093 231.920  c
502.009 231.732 501.968 231.446 501.968 231.061  c
501.968 227.451 l
501.124 227.451 l
501.124 227.248 l
501.332 227.165 501.546 227.024 501.765 226.826  c
501.994 226.618 502.197 226.373 502.374 226.092  c
502.468 225.936 502.593 225.665 502.749 225.279  c
502.937 225.279 l
h
505.614 229.061 m
505.604 229.852 505.797 230.477 506.192 230.936  c
506.578 231.383 507.036 231.607 507.567 231.607  c
507.922 231.607 508.229 231.514 508.489 231.326  c
508.750 231.128 508.968 230.795 509.146 230.326  c
509.317 230.451 l
509.234 230.982 508.994 231.472 508.599 231.920  c
508.213 232.357 507.724 232.576 507.130 232.576  c
506.484 232.576 505.932 232.326 505.474 231.826  c
505.015 231.316 504.786 230.639 504.786 229.795  c
504.786 228.878 505.021 228.165 505.489 227.654  c
505.958 227.133 506.547 226.873 507.255 226.873  c
507.859 226.873 508.354 227.071 508.739 227.467  c
509.125 227.863 509.317 228.394 509.317 229.061  c
505.614 229.061 l
h
505.614 228.717 m
508.099 228.717 l
508.078 228.373 508.036 228.133 507.974 227.998  c
507.880 227.779 507.734 227.607 507.536 227.482  c
507.338 227.357 507.135 227.295 506.927 227.295  c
506.604 227.295 506.312 227.420 506.052 227.670  c
505.802 227.920 505.656 228.269 505.614 228.717  c
h
511.612 226.873 m
511.612 228.092 l
512.060 227.279 512.519 226.873 512.987 226.873  c
513.206 226.873 513.383 226.941 513.519 227.076  c
513.664 227.201 513.737 227.352 513.737 227.529  c
513.737 227.686 513.685 227.816 513.581 227.920  c
513.477 228.024 513.357 228.076 513.222 228.076  c
513.086 228.076 512.930 228.008 512.753 227.873  c
512.586 227.738 512.461 227.670 512.378 227.670  c
512.305 227.670 512.227 227.706 512.144 227.779  c
511.977 227.946 511.800 228.212 511.612 228.576  c
511.612 231.154 l
511.612 231.446 511.649 231.670 511.722 231.826  c
511.774 231.930 511.862 232.019 511.987 232.092  c
512.112 232.154 512.300 232.186 512.550 232.186  c
512.550 232.404 l
509.800 232.404 l
509.800 232.186 l
510.071 232.186 510.274 232.144 510.409 232.061  c
510.503 231.998 510.571 231.899 510.612 231.764  c
510.633 231.701 510.644 231.514 510.644 231.201  c
510.644 229.123 l
510.644 228.498 510.628 228.128 510.597 228.014  c
510.576 227.889 510.529 227.800 510.456 227.748  c
510.394 227.686 510.310 227.654 510.206 227.654  c
510.081 227.654 509.946 227.686 509.800 227.748  c
509.737 227.529 l
511.362 226.873 l
511.612 226.873 l
h
513.733 227.029 m
516.233 227.029 l
516.233 227.248 l
516.108 227.248 l
515.931 227.248 515.796 227.290 515.702 227.373  c
515.619 227.446 515.577 227.540 515.577 227.654  c
515.577 227.800 515.640 228.008 515.765 228.279  c
517.077 230.998 l
518.280 228.029 l
518.343 227.863 518.374 227.701 518.374 227.545  c
518.374 227.482 518.364 227.430 518.343 227.389  c
518.312 227.347 518.259 227.316 518.187 227.295  c
518.124 227.264 518.009 227.248 517.843 227.248  c
517.843 227.029 l
519.593 227.029 l
519.593 227.248 l
519.447 227.269 519.332 227.305 519.249 227.357  c
519.176 227.399 519.093 227.482 518.999 227.607  c
518.957 227.660 518.890 227.811 518.796 228.061  c
516.608 233.420 l
516.400 233.941 516.124 234.331 515.780 234.592  c
515.437 234.863 515.108 234.998 514.796 234.998  c
514.567 234.998 514.374 234.930 514.218 234.795  c
514.072 234.660 513.999 234.508 513.999 234.342  c
513.999 234.175 514.051 234.040 514.155 233.936  c
514.270 233.842 514.421 233.795 514.608 233.795  c
514.733 233.795 514.910 233.837 515.140 233.920  c
515.296 233.982 515.390 234.014 515.421 234.014  c
515.546 234.014 515.676 233.951 515.812 233.826  c
515.947 233.712 516.088 233.477 516.233 233.123  c
516.608 232.186 l
514.687 228.139 l
514.624 228.024 514.530 227.873 514.405 227.686  c
514.301 227.550 514.218 227.462 514.155 227.420  c
514.072 227.357 513.931 227.300 513.733 227.248  c
513.733 227.029 l
h
f
2 J
10.0000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
f
0 J
1.45000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
630.175 224.076 m
630.341 224.076 630.482 224.133 630.596 224.248  c
630.711 224.363 630.768 224.503 630.768 224.670  c
630.768 224.826 630.711 224.967 630.596 225.092  c
630.482 225.206 630.341 225.264 630.175 225.264  c
630.018 225.264 629.878 225.206 629.753 225.092  c
629.638 224.967 629.581 224.826 629.581 224.670  c
629.581 224.503 629.638 224.363 629.753 224.248  c
629.867 224.133 630.008 224.076 630.175 224.076  c
h
630.675 226.873 m
630.675 231.186 l
630.675 231.529 630.695 231.758 630.737 231.873  c
630.789 231.977 630.862 232.055 630.956 232.107  c
631.050 232.160 631.227 232.186 631.487 232.186  c
631.487 232.404 l
628.878 232.404 l
628.878 232.186 l
629.138 232.186 629.310 232.165 629.393 232.123  c
629.487 232.071 629.560 231.988 629.612 231.873  c
629.664 231.748 629.690 231.519 629.690 231.186  c
629.690 229.123 l
629.690 228.540 629.675 228.165 629.643 227.998  c
629.612 227.873 629.565 227.785 629.503 227.732  c
629.451 227.680 629.373 227.654 629.268 227.654  c
629.164 227.654 629.034 227.686 628.878 227.748  c
628.800 227.529 l
630.409 226.873 l
630.675 226.873 l
h
636.680 227.998 m
638.384 230.545 l
638.852 231.253 639.201 231.701 639.430 231.889  c
639.660 232.066 639.951 232.165 640.305 232.186  c
640.305 232.404 l
636.884 232.404 l
636.884 232.186 l
637.113 232.186 637.285 232.165 637.399 232.123  c
637.483 232.081 637.550 232.024 637.602 231.951  c
637.654 231.878 637.680 231.805 637.680 231.732  c
637.680 231.649 637.660 231.561 637.618 231.467  c
637.597 231.404 637.493 231.232 637.305 230.951  c
635.946 228.904 l
634.290 231.045 l
634.113 231.274 634.003 231.425 633.962 231.498  c
633.930 231.571 633.915 231.649 633.915 231.732  c
633.915 231.857 633.967 231.962 634.071 232.045  c
634.186 232.128 634.389 232.175 634.680 232.186  c
634.680 232.404 l
631.868 232.404 l
631.868 232.186 l
632.066 232.165 632.238 232.123 632.384 232.061  c
632.623 231.956 632.852 231.821 633.071 231.654  c
633.290 231.477 633.540 231.212 633.821 230.857  c
635.696 228.498 l
634.134 226.201 l
633.707 225.587 633.342 225.180 633.040 224.982  c
632.748 224.785 632.410 224.680 632.024 224.670  c
632.024 224.451 l
635.696 224.451 l
635.696 224.670 l
635.384 224.680 635.170 224.732 635.055 224.826  c
634.941 224.920 634.884 225.019 634.884 225.123  c
634.884 225.269 634.977 225.482 635.165 225.764  c
636.384 227.576 l
637.790 225.795 l
637.957 225.587 638.055 225.446 638.087 225.373  c
638.128 225.290 638.149 225.206 638.149 225.123  c
638.149 225.040 638.128 224.967 638.087 224.904  c
638.024 224.821 637.946 224.764 637.852 224.732  c
637.769 224.701 637.587 224.680 637.305 224.670  c
637.305 224.451 l
640.118 224.451 l
640.118 224.670 l
639.899 224.680 639.717 224.717 639.571 224.779  c
639.363 224.873 639.170 224.998 638.993 225.154  c
638.816 225.300 638.566 225.576 638.243 225.982  c
636.680 227.998 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 256.000 m
611.440 256.000 l
S
newpath
619.440 256.000 m
607.440 251.000 l
610.440 256.000 l
607.440 261.000 l
h
f
newpath
522.129 242.232 m
524.067 241.295 l
524.254 241.295 l
524.254 247.998 l
524.254 248.446 524.270 248.727 524.301 248.842  c
524.343 248.946 524.421 249.029 524.536 249.092  c
524.661 249.144 524.900 249.175 525.254 249.186  c
525.254 249.404 l
522.270 249.404 l
522.270 249.186 l
522.645 249.175 522.885 249.144 522.989 249.092  c
523.103 249.029 523.181 248.951 523.223 248.857  c
523.265 248.764 523.286 248.477 523.286 247.998  c
523.286 243.717 l
523.286 243.133 523.270 242.764 523.239 242.607  c
523.207 242.482 523.155 242.389 523.082 242.326  c
523.010 242.264 522.921 242.232 522.817 242.232  c
522.671 242.232 522.473 242.295 522.223 242.420  c
522.129 242.232 l
h
532.223 247.873 m
531.676 249.404 l
526.989 249.404 l
526.989 249.186 l
528.364 247.925 529.332 246.899 529.895 246.107  c
530.457 245.305 530.739 244.576 530.739 243.920  c
530.739 243.420 530.582 243.008 530.270 242.686  c
529.968 242.352 529.598 242.186 529.161 242.186  c
528.775 242.186 528.426 242.300 528.114 242.529  c
527.801 242.758 527.572 243.097 527.426 243.545  c
527.207 243.545 l
527.312 242.816 527.562 242.258 527.957 241.873  c
528.364 241.488 528.869 241.295 529.473 241.295  c
530.119 241.295 530.655 241.503 531.082 241.920  c
531.520 242.326 531.739 242.811 531.739 243.373  c
531.739 243.779 531.645 244.186 531.457 244.592  c
531.166 245.217 530.697 245.883 530.051 246.592  c
529.082 247.654 528.473 248.295 528.223 248.514  c
530.301 248.514 l
530.728 248.514 531.025 248.498 531.192 248.467  c
531.359 248.436 531.510 248.373 531.645 248.279  c
531.791 248.186 531.911 248.050 532.004 247.873  c
532.223 247.873 l
h
536.082 241.076 m
533.207 249.576 l
532.739 249.576 l
535.614 241.076 l
536.082 241.076 l
h
541.557 247.873 m
541.010 249.404 l
536.323 249.404 l
536.323 249.186 l
537.698 247.925 538.666 246.899 539.229 246.107  c
539.791 245.305 540.073 244.576 540.073 243.920  c
540.073 243.420 539.916 243.008 539.604 242.686  c
539.302 242.352 538.932 242.186 538.495 242.186  c
538.109 242.186 537.760 242.300 537.448 242.529  c
537.135 242.758 536.906 243.097 536.760 243.545  c
536.541 243.545 l
536.646 242.816 536.896 242.258 537.291 241.873  c
537.698 241.488 538.203 241.295 538.807 241.295  c
539.453 241.295 539.989 241.503 540.416 241.920  c
540.854 242.326 541.073 242.811 541.073 243.373  c
541.073 243.779 540.979 244.186 540.791 244.592  c
540.500 245.217 540.031 245.883 539.385 246.592  c
538.416 247.654 537.807 248.295 537.557 248.514  c
539.635 248.514 l
540.062 248.514 540.359 248.498 540.526 248.467  c
540.692 248.436 540.844 248.373 540.979 248.279  c
541.125 248.186 541.245 248.050 541.338 247.873  c
541.557 247.873 l
h
542.495 245.482 m
542.495 244.576 542.630 243.795 542.901 243.139  c
543.172 242.482 543.536 241.993 543.995 241.670  c
544.349 241.420 544.713 241.295 545.088 241.295  c
545.692 241.295 546.239 241.607 546.729 242.232  c
547.333 242.993 547.635 244.035 547.635 245.357  c
547.635 246.274 547.500 247.055 547.229 247.701  c
546.969 248.347 546.630 248.816 546.213 249.107  c
545.807 249.399 545.411 249.545 545.026 249.545  c
544.265 249.545 543.635 249.097 543.135 248.201  c
542.708 247.451 542.495 246.545 542.495 245.482  c
h
543.635 245.623 m
543.635 246.717 543.771 247.607 544.041 248.295  c
544.271 248.878 544.604 249.170 545.041 249.170  c
545.250 249.170 545.469 249.076 545.698 248.889  c
545.927 248.701 546.099 248.383 546.213 247.936  c
546.390 247.269 546.479 246.321 546.479 245.092  c
546.479 244.186 546.385 243.430 546.198 242.826  c
546.062 242.378 545.880 242.061 545.651 241.873  c
545.495 241.748 545.302 241.686 545.073 241.686  c
544.812 241.686 544.578 241.805 544.370 242.045  c
544.088 242.368 543.896 242.878 543.791 243.576  c
543.687 244.264 543.635 244.946 543.635 245.623  c
h
553.557 247.873 m
553.010 249.404 l
548.323 249.404 l
548.323 249.186 l
549.698 247.925 550.666 246.899 551.229 246.107  c
551.791 245.305 552.073 244.576 552.073 243.920  c
552.073 243.420 551.916 243.008 551.604 242.686  c
551.302 242.352 550.932 242.186 550.495 242.186  c
550.109 242.186 549.760 242.300 549.448 242.529  c
549.135 242.758 548.906 243.097 548.760 243.545  c
548.541 243.545 l
548.646 242.816 548.896 242.258 549.291 241.873  c
549.698 241.488 550.203 241.295 550.807 241.295  c
551.453 241.295 551.989 241.503 552.416 241.920  c
552.854 242.326 553.073 242.811 553.073 243.373  c
553.073 243.779 552.979 244.186 552.791 244.592  c
552.500 245.217 552.031 245.883 551.385 246.592  c
550.416 247.654 549.807 248.295 549.557 248.514  c
551.635 248.514 l
552.062 248.514 552.359 248.498 552.526 248.467  c
552.692 248.436 552.844 248.373 552.979 248.279  c
553.125 248.186 553.245 248.050 553.338 247.873  c
553.557 247.873 l
h
554.666 242.967 m
554.896 242.436 555.182 242.024 555.526 241.732  c
555.870 241.441 556.302 241.295 556.823 241.295  c
557.458 241.295 557.942 241.503 558.276 241.920  c
558.536 242.222 558.666 242.550 558.666 242.904  c
558.666 243.488 558.302 244.087 557.573 244.701  c
558.062 244.889 558.432 245.160 558.682 245.514  c
558.932 245.868 559.057 246.290 559.057 246.779  c
559.057 247.467 558.838 248.061 558.401 248.561  c
557.838 249.217 557.015 249.545 555.932 249.545  c
555.390 249.545 555.021 249.477 554.823 249.342  c
554.635 249.206 554.541 249.066 554.541 248.920  c
554.541 248.805 554.588 248.706 554.682 248.623  c
554.776 248.529 554.885 248.482 555.010 248.482  c
555.114 248.482 555.213 248.498 555.307 248.529  c
555.380 248.550 555.531 248.623 555.760 248.748  c
556.000 248.873 556.161 248.946 556.245 248.967  c
556.390 249.008 556.547 249.029 556.713 249.029  c
557.109 249.029 557.453 248.878 557.745 248.576  c
558.047 248.264 558.198 247.899 558.198 247.482  c
558.198 247.170 558.130 246.868 557.995 246.576  c
557.890 246.357 557.776 246.191 557.651 246.076  c
557.484 245.920 557.255 245.779 556.963 245.654  c
556.672 245.529 556.375 245.467 556.073 245.467  c
555.885 245.467 l
555.885 245.279 l
556.187 245.248 556.495 245.139 556.807 244.951  c
557.120 244.764 557.344 244.545 557.479 244.295  c
557.625 244.035 557.698 243.748 557.698 243.436  c
557.698 243.040 557.573 242.717 557.323 242.467  c
557.073 242.217 556.760 242.092 556.385 242.092  c
555.771 242.092 555.260 242.415 554.854 243.061  c
554.666 242.967 l
h
561.745 243.873 m
561.932 243.873 562.088 243.936 562.213 244.061  c
562.338 244.186 562.401 244.342 562.401 244.529  c
562.401 244.706 562.338 244.857 562.213 244.982  c
562.088 245.107 561.932 245.170 561.745 245.170  c
561.567 245.170 561.416 245.107 561.291 244.982  c
561.166 244.857 561.104 244.706 561.104 244.529  c
561.104 244.342 561.166 244.186 561.291 244.061  c
561.416 243.936 561.567 243.873 561.745 243.873  c
h
561.745 248.264 m
561.922 248.264 562.073 248.331 562.198 248.467  c
562.333 248.592 562.401 248.743 562.401 248.920  c
562.401 249.097 562.333 249.253 562.198 249.389  c
562.073 249.514 561.922 249.576 561.745 249.576  c
561.557 249.576 561.401 249.514 561.276 249.389  c
561.151 249.253 561.088 249.097 561.088 248.920  c
561.088 248.743 561.151 248.592 561.276 248.467  c
561.401 248.331 561.557 248.264 561.745 248.264  c
h
571.766 241.295 m
571.766 241.514 l
571.256 241.566 570.834 241.670 570.500 241.826  c
570.178 241.972 569.855 242.206 569.532 242.529  c
569.219 242.842 568.959 243.196 568.750 243.592  c
568.542 243.977 568.365 244.436 568.219 244.967  c
568.782 244.581 569.349 244.389 569.922 244.389  c
570.464 244.389 570.933 244.607 571.329 245.045  c
571.724 245.482 571.922 246.045 571.922 246.732  c
571.922 247.399 571.724 248.003 571.329 248.545  c
570.839 249.212 570.198 249.545 569.407 249.545  c
568.865 249.545 568.401 249.363 568.016 248.998  c
567.276 248.300 566.907 247.394 566.907 246.279  c
566.907 245.571 567.047 244.899 567.329 244.264  c
567.620 243.618 568.026 243.050 568.547 242.561  c
569.079 242.061 569.584 241.727 570.063 241.561  c
570.553 241.383 571.011 241.295 571.438 241.295  c
571.766 241.295 l
h
568.125 245.389 m
568.053 245.920 568.016 246.347 568.016 246.670  c
568.016 247.045 568.084 247.456 568.219 247.904  c
568.365 248.342 568.573 248.686 568.844 248.936  c
569.042 249.123 569.287 249.217 569.579 249.217  c
569.912 249.217 570.214 249.055 570.485 248.732  c
570.756 248.410 570.891 247.951 570.891 247.357  c
570.891 246.691 570.756 246.118 570.485 245.639  c
570.224 245.149 569.849 244.904 569.360 244.904  c
569.214 244.904 569.053 244.936 568.875 244.998  c
568.709 245.061 568.459 245.191 568.125 245.389  c
h
572.829 245.482 m
572.829 244.576 572.964 243.795 573.235 243.139  c
573.506 242.482 573.870 241.993 574.329 241.670  c
574.683 241.420 575.047 241.295 575.422 241.295  c
576.026 241.295 576.573 241.607 577.063 242.232  c
577.667 242.993 577.969 244.035 577.969 245.357  c
577.969 246.274 577.834 247.055 577.563 247.701  c
577.303 248.347 576.964 248.816 576.547 249.107  c
576.141 249.399 575.745 249.545 575.360 249.545  c
574.599 249.545 573.969 249.097 573.469 248.201  c
573.042 247.451 572.829 246.545 572.829 245.482  c
h
573.969 245.623 m
573.969 246.717 574.105 247.607 574.375 248.295  c
574.605 248.878 574.938 249.170 575.375 249.170  c
575.584 249.170 575.803 249.076 576.032 248.889  c
576.261 248.701 576.433 248.383 576.547 247.936  c
576.724 247.269 576.813 246.321 576.813 245.092  c
576.813 244.186 576.719 243.430 576.532 242.826  c
576.396 242.378 576.214 242.061 575.985 241.873  c
575.829 241.748 575.636 241.686 575.407 241.686  c
575.146 241.686 574.912 241.805 574.704 242.045  c
574.422 242.368 574.230 242.878 574.125 243.576  c
574.021 244.264 573.969 244.946 573.969 245.623  c
h
578.829 245.482 m
578.829 244.576 578.964 243.795 579.235 243.139  c
579.506 242.482 579.870 241.993 580.329 241.670  c
580.683 241.420 581.047 241.295 581.422 241.295  c
582.026 241.295 582.573 241.607 583.063 242.232  c
583.667 242.993 583.969 244.035 583.969 245.357  c
583.969 246.274 583.834 247.055 583.563 247.701  c
583.303 248.347 582.964 248.816 582.547 249.107  c
582.141 249.399 581.745 249.545 581.360 249.545  c
580.599 249.545 579.969 249.097 579.469 248.201  c
579.042 247.451 578.829 246.545 578.829 245.482  c
h
579.969 245.623 m
579.969 246.717 580.105 247.607 580.375 248.295  c
580.605 248.878 580.938 249.170 581.375 249.170  c
581.584 249.170 581.803 249.076 582.032 248.889  c
582.261 248.701 582.433 248.383 582.547 247.936  c
582.724 247.269 582.813 246.321 582.813 245.092  c
582.813 244.186 582.719 243.430 582.532 242.826  c
582.396 242.378 582.214 242.061 581.985 241.873  c
581.829 241.748 581.636 241.686 581.407 241.686  c
581.146 241.686 580.912 241.805 580.704 242.045  c
580.422 242.368 580.230 242.878 580.125 243.576  c
580.021 244.264 579.969 244.946 579.969 245.623  c
h
587.375 244.576 m
589.032 243.904 l
589.250 243.904 l
589.250 245.154 l
589.532 244.686 589.813 244.357 590.094 244.170  c
590.375 243.972 590.667 243.873 590.969 243.873  c
591.511 243.873 591.959 244.087 592.313 244.514  c
592.761 245.024 592.985 245.696 592.985 246.529  c
592.985 247.456 592.719 248.222 592.188 248.826  c
591.750 249.326 591.198 249.576 590.532 249.576  c
590.240 249.576 589.990 249.535 589.782 249.451  c
589.625 249.389 589.448 249.269 589.250 249.092  c
589.250 250.732 l
589.250 251.097 589.271 251.326 589.313 251.420  c
589.365 251.524 589.443 251.602 589.547 251.654  c
589.662 251.717 589.865 251.748 590.157 251.748  c
590.157 251.967 l
587.344 251.967 l
587.344 251.748 l
587.500 251.748 l
587.709 251.758 587.891 251.722 588.047 251.639  c
588.120 251.587 588.178 251.514 588.219 251.420  c
588.261 251.326 588.282 251.087 588.282 250.701  c
588.282 245.623 l
588.282 245.269 588.266 245.045 588.235 244.951  c
588.204 244.857 588.151 244.790 588.079 244.748  c
588.016 244.696 587.928 244.670 587.813 244.670  c
587.719 244.670 587.599 244.701 587.454 244.764  c
587.375 244.576 l
h
589.250 245.498 m
589.250 247.498 l
589.250 247.936 589.271 248.222 589.313 248.357  c
589.365 248.587 589.495 248.790 589.704 248.967  c
589.922 249.133 590.193 249.217 590.516 249.217  c
590.901 249.217 591.219 249.066 591.469 248.764  c
591.782 248.357 591.938 247.795 591.938 247.076  c
591.938 246.253 591.761 245.623 591.407 245.186  c
591.157 244.883 590.860 244.732 590.516 244.732  c
590.329 244.732 590.141 244.779 589.954 244.873  c
589.808 244.936 589.573 245.144 589.250 245.498  c
h
598.329 247.357 m
598.183 248.066 597.896 248.613 597.469 248.998  c
597.053 249.383 596.589 249.576 596.079 249.576  c
595.464 249.576 594.928 249.321 594.469 248.811  c
594.021 248.290 593.797 247.597 593.797 246.732  c
593.797 245.889 594.047 245.201 594.547 244.670  c
595.058 244.139 595.662 243.873 596.360 243.873  c
596.891 243.873 597.323 244.014 597.657 244.295  c
598.000 244.576 598.172 244.868 598.172 245.170  c
598.172 245.316 598.125 245.436 598.032 245.529  c
597.938 245.623 597.803 245.670 597.625 245.670  c
597.396 245.670 597.224 245.592 597.110 245.436  c
597.037 245.363 596.990 245.212 596.969 244.982  c
596.948 244.743 596.870 244.566 596.735 244.451  c
596.599 244.326 596.412 244.264 596.172 244.264  c
595.776 244.264 595.459 244.410 595.219 244.701  c
594.907 245.087 594.750 245.592 594.750 246.217  c
594.750 246.863 594.907 247.430 595.219 247.920  c
595.532 248.410 595.959 248.654 596.500 248.654  c
596.886 248.654 597.230 248.524 597.532 248.264  c
597.740 248.087 597.948 247.758 598.157 247.279  c
598.329 247.357 l
h
600.217 248.264 m
600.405 248.264 600.561 248.331 600.686 248.467  c
600.811 248.592 600.873 248.743 600.873 248.920  c
600.873 249.097 600.806 249.253 600.670 249.389  c
600.545 249.514 600.394 249.576 600.217 249.576  c
600.040 249.576 599.884 249.514 599.748 249.389  c
599.623 249.253 599.561 249.097 599.561 248.920  c
599.561 248.732 599.623 248.576 599.748 248.451  c
599.884 248.326 600.040 248.264 600.217 248.264  c
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
