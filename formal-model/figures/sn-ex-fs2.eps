%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 179 54
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Montag, 3. Februar 2025 um 18:20:18 Mitteleurop√§ische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
179 54 setpagesize
0 0 0 0 setmargins
0 0 setorigin
179 54 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
179.000 0.00000 l
179.000 54.0000 l
0.00000 54.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
179.000 0.00000 l
179.000 54.0000 l
0.00000 54.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 179 54 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -472.000 -218.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
472.000 218.000 m
651.000 218.000 l
651.000 272.000 l
472.000 272.000 l
472.000 218.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -472.000 -218.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -472.000 -218.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -472.000 -218.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
f
0 J
1.45000 M
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
S
2 J
10.0000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
f
0 J
1.45000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
602.009 224.295 m
602.196 226.998 l
602.009 226.998 l
601.769 226.186 601.425 225.603 600.977 225.248  c
600.529 224.894 599.993 224.717 599.368 224.717  c
598.837 224.717 598.358 224.853 597.930 225.123  c
597.503 225.384 597.165 225.811 596.915 226.405  c
596.675 226.988 596.555 227.712 596.555 228.577  c
596.555 229.295 596.670 229.920 596.899 230.452  c
597.139 230.983 597.488 231.389 597.946 231.670  c
598.404 231.952 598.930 232.092 599.524 232.092  c
600.045 232.092 600.503 231.983 600.899 231.764  c
601.295 231.535 601.727 231.092 602.196 230.436  c
602.384 230.561 l
601.977 231.269 601.509 231.790 600.977 232.123  c
600.446 232.446 599.816 232.608 599.087 232.608  c
597.774 232.608 596.759 232.118 596.040 231.139  c
595.498 230.410 595.227 229.556 595.227 228.577  c
595.227 227.775 595.404 227.045 595.759 226.389  c
596.113 225.722 596.602 225.207 597.227 224.842  c
597.852 224.478 598.535 224.295 599.274 224.295  c
599.847 224.295 600.410 224.436 600.962 224.717  c
601.128 224.801 601.248 224.842 601.321 224.842  c
601.425 224.842 601.514 224.806 601.587 224.733  c
601.691 224.629 601.764 224.483 601.805 224.295  c
602.009 224.295 l
h
606.216 231.639 m
605.664 232.066 605.315 232.316 605.169 232.389  c
604.960 232.483 604.736 232.530 604.497 232.530  c
604.132 232.530 603.825 232.405 603.575 232.155  c
603.335 231.894 603.216 231.561 603.216 231.155  c
603.216 230.884 603.278 230.655 603.403 230.467  c
603.559 230.207 603.835 229.962 604.231 229.733  c
604.627 229.493 605.289 229.202 606.216 228.858  c
606.216 228.655 l
606.216 228.113 606.127 227.743 605.950 227.545  c
605.783 227.347 605.539 227.248 605.216 227.248  c
604.966 227.248 604.768 227.316 604.622 227.452  c
604.476 227.587 604.403 227.738 604.403 227.905  c
604.419 228.248 l
604.419 228.426 604.372 228.566 604.278 228.670  c
604.184 228.764 604.065 228.811 603.919 228.811  c
603.773 228.811 603.653 228.759 603.559 228.655  c
603.476 228.551 603.434 228.415 603.434 228.248  c
603.434 227.905 603.606 227.592 603.950 227.311  c
604.294 227.030 604.773 226.889 605.388 226.889  c
605.867 226.889 606.257 226.972 606.559 227.139  c
606.789 227.254 606.960 227.441 607.075 227.702  c
607.148 227.868 607.184 228.212 607.184 228.733  c
607.184 230.561 l
607.184 231.071 607.190 231.384 607.200 231.498  c
607.221 231.613 607.252 231.691 607.294 231.733  c
607.346 231.764 607.403 231.780 607.466 231.780  c
607.528 231.780 607.580 231.769 607.622 231.748  c
607.705 231.696 607.861 231.551 608.091 231.311  c
608.091 231.639 l
607.653 232.233 607.236 232.530 606.841 232.530  c
606.653 232.530 606.502 232.462 606.388 232.327  c
606.273 232.191 606.216 231.962 606.216 231.639  c
h
606.216 231.264 m
606.216 229.217 l
605.622 229.457 605.242 229.623 605.075 229.717  c
604.763 229.894 604.539 230.077 604.403 230.264  c
604.268 230.452 604.200 230.655 604.200 230.873  c
604.200 231.155 604.283 231.389 604.450 231.577  c
604.627 231.764 604.825 231.858 605.044 231.858  c
605.335 231.858 605.726 231.660 606.216 231.264  c
h
610.339 224.092 m
610.339 231.202 l
610.339 231.545 610.365 231.775 610.417 231.889  c
610.469 231.993 610.542 232.071 610.636 232.123  c
610.740 232.176 610.932 232.202 611.214 232.202  c
611.214 232.420 l
608.573 232.420 l
608.573 232.202 l
608.823 232.202 608.990 232.181 609.073 232.139  c
609.167 232.087 609.240 232.004 609.292 231.889  c
609.344 231.764 609.370 231.535 609.370 231.202  c
609.370 226.327 l
609.370 225.722 609.354 225.353 609.323 225.217  c
609.302 225.082 609.261 224.988 609.198 224.936  c
609.136 224.884 609.057 224.858 608.964 224.858  c
608.860 224.858 608.729 224.889 608.573 224.952  c
608.479 224.748 l
610.073 224.092 l
610.339 224.092 l
h
613.188 224.092 m
613.355 224.092 613.496 224.150 613.610 224.264  c
613.725 224.379 613.782 224.519 613.782 224.686  c
613.782 224.842 613.725 224.983 613.610 225.108  c
613.496 225.222 613.355 225.280 613.188 225.280  c
613.032 225.280 612.891 225.222 612.766 225.108  c
612.652 224.983 612.595 224.842 612.595 224.686  c
612.595 224.519 612.652 224.379 612.766 224.264  c
612.881 224.150 613.022 224.092 613.188 224.092  c
h
613.688 226.889 m
613.688 231.202 l
613.688 231.545 613.709 231.775 613.751 231.889  c
613.803 231.993 613.876 232.071 613.970 232.123  c
614.063 232.176 614.240 232.202 614.501 232.202  c
614.501 232.420 l
611.891 232.420 l
611.891 232.202 l
612.152 232.202 612.324 232.181 612.407 232.139  c
612.501 232.087 612.574 232.004 612.626 231.889  c
612.678 231.764 612.704 231.535 612.704 231.202  c
612.704 229.139 l
612.704 228.556 612.688 228.181 612.657 228.014  c
612.626 227.889 612.579 227.801 612.516 227.748  c
612.464 227.696 612.386 227.670 612.282 227.670  c
612.178 227.670 612.048 227.702 611.891 227.764  c
611.813 227.545 l
613.423 226.889 l
613.688 226.889 l
h
617.257 227.467 m
617.257 230.998 l
617.257 231.498 617.314 231.816 617.429 231.952  c
617.574 232.118 617.767 232.202 618.007 232.202  c
618.491 232.202 l
618.491 232.420 l
615.288 232.420 l
615.288 232.202 l
615.522 232.202 l
615.679 232.202 615.819 232.165 615.944 232.092  c
616.080 232.009 616.168 231.905 616.210 231.780  c
616.262 231.644 616.288 231.384 616.288 230.998  c
616.288 227.467 l
615.257 227.467 l
615.257 227.045 l
616.288 227.045 l
616.288 226.702 l
616.288 226.170 616.371 225.717 616.538 225.342  c
616.715 224.967 616.981 224.665 617.335 224.436  c
617.689 224.207 618.090 224.092 618.538 224.092  c
618.944 224.092 619.319 224.228 619.663 224.498  c
619.892 224.676 620.007 224.873 620.007 225.092  c
620.007 225.207 619.955 225.316 619.850 225.420  c
619.746 225.525 619.637 225.577 619.522 225.577  c
619.429 225.577 619.330 225.545 619.225 225.483  c
619.132 225.420 619.012 225.285 618.866 225.077  c
618.731 224.858 618.600 224.712 618.475 224.639  c
618.350 224.556 618.215 224.514 618.069 224.514  c
617.892 224.514 617.741 224.566 617.616 224.670  c
617.491 224.764 617.397 224.910 617.335 225.108  c
617.283 225.306 617.257 225.827 617.257 226.670  c
617.257 227.045 l
618.647 227.045 l
618.647 227.467 l
617.257 227.467 l
h
621.784 226.889 m
622.596 226.889 623.248 227.202 623.737 227.827  c
624.154 228.347 624.362 228.952 624.362 229.639  c
624.362 230.118 624.248 230.603 624.018 231.092  c
623.789 231.582 623.471 231.957 623.065 232.217  c
622.669 232.467 622.221 232.592 621.721 232.592  c
620.909 232.592 620.268 232.269 619.800 231.623  c
619.393 231.071 619.190 230.462 619.190 229.795  c
619.190 229.295 619.310 228.806 619.550 228.327  c
619.800 227.837 620.123 227.478 620.518 227.248  c
620.914 227.009 621.336 226.889 621.784 226.889  c
h
621.596 227.280 m
621.399 227.280 621.190 227.342 620.971 227.467  c
620.763 227.582 620.596 227.795 620.471 228.108  c
620.346 228.420 620.284 228.816 620.284 229.295  c
620.284 230.077 620.435 230.754 620.737 231.327  c
621.050 231.889 621.461 232.170 621.971 232.170  c
622.346 232.170 622.659 232.014 622.909 231.702  c
623.159 231.389 623.284 230.853 623.284 230.092  c
623.284 229.134 623.076 228.384 622.659 227.842  c
622.388 227.467 622.034 227.280 621.596 227.280  c
h
626.737 226.889 m
626.737 228.108 l
627.185 227.295 627.643 226.889 628.112 226.889  c
628.331 226.889 628.508 226.957 628.643 227.092  c
628.789 227.217 628.862 227.368 628.862 227.545  c
628.862 227.702 628.810 227.832 628.706 227.936  c
628.602 228.040 628.482 228.092 628.346 228.092  c
628.211 228.092 628.055 228.025 627.878 227.889  c
627.711 227.754 627.586 227.686 627.503 227.686  c
627.430 227.686 627.352 227.722 627.268 227.795  c
627.102 227.962 626.925 228.228 626.737 228.592  c
626.737 231.170 l
626.737 231.462 626.774 231.686 626.846 231.842  c
626.899 231.946 626.987 232.035 627.112 232.108  c
627.237 232.170 627.425 232.202 627.675 232.202  c
627.675 232.420 l
624.925 232.420 l
624.925 232.202 l
625.195 232.202 625.399 232.160 625.534 232.077  c
625.628 232.014 625.695 231.915 625.737 231.780  c
625.758 231.717 625.768 231.530 625.768 231.217  c
625.768 229.139 l
625.768 228.514 625.753 228.144 625.721 228.030  c
625.701 227.905 625.654 227.816 625.581 227.764  c
625.518 227.702 625.435 227.670 625.331 227.670  c
625.206 227.670 625.070 227.702 624.925 227.764  c
624.862 227.545 l
626.487 226.889 l
626.737 226.889 l
h
630.718 228.030 m
631.353 227.269 631.952 226.889 632.514 226.889  c
632.806 226.889 633.056 226.962 633.264 227.108  c
633.483 227.254 633.655 227.498 633.780 227.842  c
633.863 228.071 633.905 228.431 633.905 228.920  c
633.905 231.202 l
633.905 231.545 633.931 231.780 633.983 231.905  c
634.035 231.998 634.108 232.071 634.202 232.123  c
634.296 232.176 634.473 232.202 634.733 232.202  c
634.733 232.420 l
632.077 232.420 l
632.077 232.202 l
632.186 232.202 l
632.436 232.202 632.608 232.165 632.702 232.092  c
632.806 232.019 632.879 231.910 632.921 231.764  c
632.931 231.702 632.936 231.514 632.936 231.202  c
632.936 229.014 l
632.936 228.525 632.874 228.170 632.749 227.952  c
632.624 227.722 632.410 227.608 632.108 227.608  c
631.639 227.608 631.176 227.863 630.718 228.373  c
630.718 231.202 l
630.718 231.566 630.738 231.790 630.780 231.873  c
630.843 231.988 630.921 232.071 631.014 232.123  c
631.108 232.176 631.301 232.202 631.593 232.202  c
631.593 232.420 l
628.936 232.420 l
628.936 232.202 l
629.061 232.202 l
629.332 232.202 629.514 232.134 629.608 231.998  c
629.702 231.863 629.749 231.597 629.749 231.202  c
629.749 229.217 l
629.749 228.571 629.733 228.181 629.702 228.045  c
629.681 227.900 629.639 227.801 629.577 227.748  c
629.514 227.696 629.431 227.670 629.327 227.670  c
629.223 227.670 629.093 227.702 628.936 227.764  c
628.858 227.545 l
630.468 226.889 l
630.718 226.889 l
630.718 228.030 l
h
636.514 224.092 m
636.681 224.092 636.822 224.150 636.936 224.264  c
637.051 224.379 637.108 224.519 637.108 224.686  c
637.108 224.842 637.051 224.983 636.936 225.108  c
636.822 225.222 636.681 225.280 636.514 225.280  c
636.358 225.280 636.218 225.222 636.093 225.108  c
635.978 224.983 635.921 224.842 635.921 224.686  c
635.921 224.519 635.978 224.379 636.093 224.264  c
636.207 224.150 636.348 224.092 636.514 224.092  c
h
637.014 226.889 m
637.014 231.202 l
637.014 231.545 637.035 231.775 637.077 231.889  c
637.129 231.993 637.202 232.071 637.296 232.123  c
637.389 232.176 637.567 232.202 637.827 232.202  c
637.827 232.420 l
635.218 232.420 l
635.218 232.202 l
635.478 232.202 635.650 232.181 635.733 232.139  c
635.827 232.087 635.900 232.004 635.952 231.889  c
636.004 231.764 636.030 231.535 636.030 231.202  c
636.030 229.139 l
636.030 228.556 636.014 228.181 635.983 228.014  c
635.952 227.889 635.905 227.801 635.843 227.748  c
635.791 227.696 635.712 227.670 635.608 227.670  c
635.504 227.670 635.374 227.702 635.218 227.764  c
635.139 227.545 l
636.749 226.889 l
637.014 226.889 l
h
641.536 231.639 m
640.984 232.066 640.635 232.316 640.489 232.389  c
640.281 232.483 640.057 232.530 639.817 232.530  c
639.453 232.530 639.145 232.405 638.895 232.155  c
638.656 231.894 638.536 231.561 638.536 231.155  c
638.536 230.884 638.598 230.655 638.723 230.467  c
638.880 230.207 639.156 229.962 639.552 229.733  c
639.947 229.493 640.609 229.202 641.536 228.858  c
641.536 228.655 l
641.536 228.113 641.447 227.743 641.270 227.545  c
641.104 227.347 640.859 227.248 640.536 227.248  c
640.286 227.248 640.088 227.316 639.942 227.452  c
639.796 227.587 639.723 227.738 639.723 227.905  c
639.739 228.248 l
639.739 228.426 639.692 228.566 639.598 228.670  c
639.505 228.764 639.385 228.811 639.239 228.811  c
639.093 228.811 638.973 228.759 638.880 228.655  c
638.796 228.551 638.755 228.415 638.755 228.248  c
638.755 227.905 638.927 227.592 639.270 227.311  c
639.614 227.030 640.093 226.889 640.708 226.889  c
641.187 226.889 641.578 226.972 641.880 227.139  c
642.109 227.254 642.281 227.441 642.395 227.702  c
642.468 227.868 642.505 228.212 642.505 228.733  c
642.505 230.561 l
642.505 231.071 642.510 231.384 642.520 231.498  c
642.541 231.613 642.572 231.691 642.614 231.733  c
642.666 231.764 642.723 231.780 642.786 231.780  c
642.848 231.780 642.901 231.769 642.942 231.748  c
643.026 231.696 643.182 231.551 643.411 231.311  c
643.411 231.639 l
642.973 232.233 642.557 232.530 642.161 232.530  c
641.973 232.530 641.822 232.462 641.708 232.327  c
641.593 232.191 641.536 231.962 641.536 231.639  c
h
641.536 231.264 m
641.536 229.217 l
640.942 229.457 640.562 229.623 640.395 229.717  c
640.083 229.894 639.859 230.077 639.723 230.264  c
639.588 230.452 639.520 230.655 639.520 230.873  c
639.520 231.155 639.604 231.389 639.770 231.577  c
639.947 231.764 640.145 231.858 640.364 231.858  c
640.656 231.858 641.046 231.660 641.536 231.264  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
484.547 228.358 m
485.099 228.483 485.510 228.670 485.781 228.920  c
486.156 229.285 486.344 229.728 486.344 230.248  c
486.344 230.644 486.219 231.025 485.969 231.389  c
485.719 231.743 485.375 232.004 484.938 232.170  c
484.510 232.337 483.849 232.420 482.953 232.420  c
479.203 232.420 l
479.203 232.202 l
479.500 232.202 l
479.833 232.202 480.073 232.097 480.219 231.889  c
480.302 231.754 480.344 231.462 480.344 231.014  c
480.344 225.873 l
480.344 225.384 480.286 225.077 480.172 224.952  c
480.026 224.775 479.802 224.686 479.500 224.686  c
479.203 224.686 l
479.203 224.467 l
482.641 224.467 l
483.276 224.467 483.786 224.514 484.172 224.608  c
484.755 224.754 485.203 225.009 485.516 225.373  c
485.828 225.728 485.984 226.134 485.984 226.592  c
485.984 226.988 485.859 227.347 485.609 227.670  c
485.370 227.983 485.016 228.212 484.547 228.358  c
h
481.469 228.045 m
481.615 228.077 481.781 228.097 481.969 228.108  c
482.156 228.118 482.359 228.123 482.578 228.123  c
483.151 228.123 483.578 228.066 483.859 227.952  c
484.151 227.827 484.370 227.639 484.516 227.389  c
484.672 227.129 484.750 226.847 484.750 226.545  c
484.750 226.087 484.562 225.696 484.188 225.373  c
483.812 225.040 483.260 224.873 482.531 224.873  c
482.135 224.873 481.781 224.915 481.469 224.998  c
481.469 228.045 l
h
481.469 231.842 m
481.927 231.946 482.375 231.998 482.812 231.998  c
483.521 231.998 484.057 231.842 484.422 231.530  c
484.797 231.207 484.984 230.811 484.984 230.342  c
484.984 230.040 484.901 229.748 484.734 229.467  c
484.568 229.176 484.292 228.946 483.906 228.780  c
483.531 228.613 483.068 228.530 482.516 228.530  c
482.266 228.530 482.052 228.535 481.875 228.545  c
481.708 228.556 481.573 228.571 481.469 228.592  c
481.469 231.842 l
h
490.426 231.639 m
489.874 232.066 489.525 232.316 489.379 232.389  c
489.171 232.483 488.947 232.530 488.707 232.530  c
488.342 232.530 488.035 232.405 487.785 232.155  c
487.546 231.894 487.426 231.561 487.426 231.155  c
487.426 230.884 487.488 230.655 487.613 230.467  c
487.770 230.207 488.046 229.962 488.441 229.733  c
488.837 229.493 489.499 229.202 490.426 228.858  c
490.426 228.655 l
490.426 228.113 490.337 227.743 490.160 227.545  c
489.993 227.347 489.749 227.248 489.426 227.248  c
489.176 227.248 488.978 227.316 488.832 227.452  c
488.686 227.587 488.613 227.738 488.613 227.905  c
488.629 228.248 l
488.629 228.426 488.582 228.566 488.488 228.670  c
488.395 228.764 488.275 228.811 488.129 228.811  c
487.983 228.811 487.863 228.759 487.770 228.655  c
487.686 228.551 487.645 228.415 487.645 228.248  c
487.645 227.905 487.816 227.592 488.160 227.311  c
488.504 227.030 488.983 226.889 489.598 226.889  c
490.077 226.889 490.467 226.972 490.770 227.139  c
490.999 227.254 491.171 227.441 491.285 227.702  c
491.358 227.868 491.395 228.212 491.395 228.733  c
491.395 230.561 l
491.395 231.071 491.400 231.384 491.410 231.498  c
491.431 231.613 491.462 231.691 491.504 231.733  c
491.556 231.764 491.613 231.780 491.676 231.780  c
491.738 231.780 491.790 231.769 491.832 231.748  c
491.915 231.696 492.072 231.551 492.301 231.311  c
492.301 231.639 l
491.863 232.233 491.447 232.530 491.051 232.530  c
490.863 232.530 490.712 232.462 490.598 232.327  c
490.483 232.191 490.426 231.962 490.426 231.639  c
h
490.426 231.264 m
490.426 229.217 l
489.832 229.457 489.452 229.623 489.285 229.717  c
488.973 229.894 488.749 230.077 488.613 230.264  c
488.478 230.452 488.410 230.655 488.410 230.873  c
488.410 231.155 488.493 231.389 488.660 231.577  c
488.837 231.764 489.035 231.858 489.254 231.858  c
489.546 231.858 489.936 231.660 490.426 231.264  c
h
492.424 227.045 m
494.955 227.045 l
494.955 227.264 l
494.799 227.264 l
494.643 227.264 494.523 227.306 494.439 227.389  c
494.367 227.462 494.330 227.561 494.330 227.686  c
494.330 227.821 494.367 227.983 494.439 228.170  c
495.689 231.123 l
496.955 228.061 l
497.038 227.842 497.080 227.676 497.080 227.561  c
497.080 227.498 497.064 227.452 497.033 227.420  c
496.992 227.358 496.934 227.316 496.861 227.295  c
496.799 227.275 496.669 227.264 496.471 227.264  c
496.471 227.045 l
498.221 227.045 l
498.221 227.264 l
498.012 227.285 497.872 227.327 497.799 227.389  c
497.663 227.504 497.538 227.702 497.424 227.983  c
495.518 232.592 l
495.283 232.592 l
493.361 228.061 l
493.278 227.842 493.195 227.691 493.111 227.608  c
493.038 227.514 492.945 227.436 492.830 227.373  c
492.757 227.332 492.622 227.295 492.424 227.264  c
492.424 227.045 l
h
501.752 231.639 m
501.200 232.066 500.851 232.316 500.705 232.389  c
500.497 232.483 500.273 232.530 500.033 232.530  c
499.669 232.530 499.361 232.405 499.111 232.155  c
498.872 231.894 498.752 231.561 498.752 231.155  c
498.752 230.884 498.814 230.655 498.939 230.467  c
499.096 230.207 499.372 229.962 499.768 229.733  c
500.163 229.493 500.825 229.202 501.752 228.858  c
501.752 228.655 l
501.752 228.113 501.663 227.743 501.486 227.545  c
501.320 227.347 501.075 227.248 500.752 227.248  c
500.502 227.248 500.304 227.316 500.158 227.452  c
500.012 227.587 499.939 227.738 499.939 227.905  c
499.955 228.248 l
499.955 228.426 499.908 228.566 499.814 228.670  c
499.721 228.764 499.601 228.811 499.455 228.811  c
499.309 228.811 499.189 228.759 499.096 228.655  c
499.012 228.551 498.971 228.415 498.971 228.248  c
498.971 227.905 499.143 227.592 499.486 227.311  c
499.830 227.030 500.309 226.889 500.924 226.889  c
501.403 226.889 501.794 226.972 502.096 227.139  c
502.325 227.254 502.497 227.441 502.611 227.702  c
502.684 227.868 502.721 228.212 502.721 228.733  c
502.721 230.561 l
502.721 231.071 502.726 231.384 502.736 231.498  c
502.757 231.613 502.788 231.691 502.830 231.733  c
502.882 231.764 502.939 231.780 503.002 231.780  c
503.064 231.780 503.117 231.769 503.158 231.748  c
503.242 231.696 503.398 231.551 503.627 231.311  c
503.627 231.639 l
503.189 232.233 502.773 232.530 502.377 232.530  c
502.189 232.530 502.038 232.462 501.924 232.327  c
501.809 232.191 501.752 231.962 501.752 231.639  c
h
501.752 231.264 m
501.752 229.217 l
501.158 229.457 500.778 229.623 500.611 229.717  c
500.299 229.894 500.075 230.077 499.939 230.264  c
499.804 230.452 499.736 230.655 499.736 230.873  c
499.736 231.155 499.820 231.389 499.986 231.577  c
500.163 231.764 500.361 231.858 500.580 231.858  c
500.872 231.858 501.262 231.660 501.752 231.264  c
h
505.609 226.889 m
505.609 228.108 l
506.057 227.295 506.516 226.889 506.984 226.889  c
507.203 226.889 507.380 226.957 507.516 227.092  c
507.661 227.217 507.734 227.368 507.734 227.545  c
507.734 227.702 507.682 227.832 507.578 227.936  c
507.474 228.040 507.354 228.092 507.219 228.092  c
507.083 228.092 506.927 228.025 506.750 227.889  c
506.583 227.754 506.458 227.686 506.375 227.686  c
506.302 227.686 506.224 227.722 506.141 227.795  c
505.974 227.962 505.797 228.228 505.609 228.592  c
505.609 231.170 l
505.609 231.462 505.646 231.686 505.719 231.842  c
505.771 231.946 505.859 232.035 505.984 232.108  c
506.109 232.170 506.297 232.202 506.547 232.202  c
506.547 232.420 l
503.797 232.420 l
503.797 232.202 l
504.068 232.202 504.271 232.160 504.406 232.077  c
504.500 232.014 504.568 231.915 504.609 231.780  c
504.630 231.717 504.641 231.530 504.641 231.217  c
504.641 229.139 l
504.641 228.514 504.625 228.144 504.594 228.030  c
504.573 227.905 504.526 227.816 504.453 227.764  c
504.391 227.702 504.307 227.670 504.203 227.670  c
504.078 227.670 503.943 227.702 503.797 227.764  c
503.734 227.545 l
505.359 226.889 l
505.609 226.889 l
h
509.387 224.092 m
509.553 224.092 509.694 224.150 509.809 224.264  c
509.923 224.379 509.980 224.519 509.980 224.686  c
509.980 224.842 509.923 224.983 509.809 225.108  c
509.694 225.222 509.553 225.280 509.387 225.280  c
509.230 225.280 509.090 225.222 508.965 225.108  c
508.850 224.983 508.793 224.842 508.793 224.686  c
508.793 224.519 508.850 224.379 508.965 224.264  c
509.079 224.150 509.220 224.092 509.387 224.092  c
h
509.887 226.889 m
509.887 231.202 l
509.887 231.545 509.908 231.775 509.949 231.889  c
510.001 231.993 510.074 232.071 510.168 232.123  c
510.262 232.176 510.439 232.202 510.699 232.202  c
510.699 232.420 l
508.090 232.420 l
508.090 232.202 l
508.350 232.202 508.522 232.181 508.605 232.139  c
508.699 232.087 508.772 232.004 508.824 231.889  c
508.876 231.764 508.902 231.535 508.902 231.202  c
508.902 229.139 l
508.902 228.556 508.887 228.181 508.855 228.014  c
508.824 227.889 508.777 227.801 508.715 227.748  c
508.663 227.696 508.585 227.670 508.480 227.670  c
508.376 227.670 508.246 227.702 508.090 227.764  c
508.012 227.545 l
509.621 226.889 l
509.887 226.889 l
h
514.408 231.639 m
513.856 232.066 513.507 232.316 513.361 232.389  c
513.153 232.483 512.929 232.530 512.689 232.530  c
512.325 232.530 512.018 232.405 511.768 232.155  c
511.528 231.894 511.408 231.561 511.408 231.155  c
511.408 230.884 511.471 230.655 511.596 230.467  c
511.752 230.207 512.028 229.962 512.424 229.733  c
512.820 229.493 513.481 229.202 514.408 228.858  c
514.408 228.655 l
514.408 228.113 514.320 227.743 514.143 227.545  c
513.976 227.347 513.731 227.248 513.408 227.248  c
513.158 227.248 512.960 227.316 512.814 227.452  c
512.669 227.587 512.596 227.738 512.596 227.905  c
512.611 228.248 l
512.611 228.426 512.564 228.566 512.471 228.670  c
512.377 228.764 512.257 228.811 512.111 228.811  c
511.965 228.811 511.846 228.759 511.752 228.655  c
511.669 228.551 511.627 228.415 511.627 228.248  c
511.627 227.905 511.799 227.592 512.143 227.311  c
512.486 227.030 512.965 226.889 513.580 226.889  c
514.059 226.889 514.450 226.972 514.752 227.139  c
514.981 227.254 515.153 227.441 515.268 227.702  c
515.340 227.868 515.377 228.212 515.377 228.733  c
515.377 230.561 l
515.377 231.071 515.382 231.384 515.393 231.498  c
515.413 231.613 515.445 231.691 515.486 231.733  c
515.538 231.764 515.596 231.780 515.658 231.780  c
515.721 231.780 515.773 231.769 515.814 231.748  c
515.898 231.696 516.054 231.551 516.283 231.311  c
516.283 231.639 l
515.846 232.233 515.429 232.530 515.033 232.530  c
514.846 232.530 514.695 232.462 514.580 232.327  c
514.465 232.191 514.408 231.962 514.408 231.639  c
h
514.408 231.264 m
514.408 229.217 l
513.814 229.457 513.434 229.623 513.268 229.717  c
512.955 229.894 512.731 230.077 512.596 230.264  c
512.460 230.452 512.393 230.655 512.393 230.873  c
512.393 231.155 512.476 231.389 512.643 231.577  c
512.820 231.764 513.018 231.858 513.236 231.858  c
513.528 231.858 513.919 231.660 514.408 231.264  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 256.000 m
611.440 256.000 l
S
newpath
619.440 256.000 m
607.440 251.000 l
610.440 256.000 l
607.440 261.000 l
h
f
newpath
532.718 247.873 m
532.171 249.404 l
527.484 249.404 l
527.484 249.186 l
528.859 247.925 529.828 246.899 530.390 246.107  c
530.953 245.305 531.234 244.576 531.234 243.920  c
531.234 243.420 531.078 243.008 530.765 242.686  c
530.463 242.352 530.093 242.186 529.656 242.186  c
529.270 242.186 528.921 242.300 528.609 242.529  c
528.296 242.758 528.067 243.097 527.921 243.545  c
527.703 243.545 l
527.807 242.816 528.057 242.258 528.453 241.873  c
528.859 241.488 529.364 241.295 529.968 241.295  c
530.614 241.295 531.150 241.503 531.578 241.920  c
532.015 242.326 532.234 242.811 532.234 243.373  c
532.234 243.779 532.140 244.186 531.953 244.592  c
531.661 245.217 531.192 245.883 530.546 246.592  c
529.578 247.654 528.968 248.295 528.718 248.514  c
530.796 248.514 l
531.223 248.514 531.520 248.498 531.687 248.467  c
531.854 248.436 532.005 248.373 532.140 248.279  c
532.286 248.186 532.406 248.050 532.499 247.873  c
532.718 247.873 l
h
533.656 245.482 m
533.656 244.576 533.791 243.795 534.062 243.139  c
534.333 242.482 534.697 241.993 535.156 241.670  c
535.510 241.420 535.874 241.295 536.249 241.295  c
536.854 241.295 537.400 241.607 537.890 242.232  c
538.494 242.993 538.796 244.035 538.796 245.357  c
538.796 246.274 538.661 247.055 538.390 247.701  c
538.130 248.347 537.791 248.816 537.374 249.107  c
536.968 249.399 536.572 249.545 536.187 249.545  c
535.427 249.545 534.796 249.097 534.296 248.201  c
533.869 247.451 533.656 246.545 533.656 245.482  c
h
534.796 245.623 m
534.796 246.717 534.932 247.607 535.203 248.295  c
535.432 248.878 535.765 249.170 536.203 249.170  c
536.411 249.170 536.630 249.076 536.859 248.889  c
537.088 248.701 537.260 248.383 537.374 247.936  c
537.552 247.269 537.640 246.321 537.640 245.092  c
537.640 244.186 537.546 243.430 537.359 242.826  c
537.223 242.378 537.041 242.061 536.812 241.873  c
536.656 241.748 536.463 241.686 536.234 241.686  c
535.973 241.686 535.739 241.805 535.531 242.045  c
535.249 242.368 535.057 242.878 534.953 243.576  c
534.848 244.264 534.796 244.946 534.796 245.623  c
h
544.718 247.873 m
544.171 249.404 l
539.484 249.404 l
539.484 249.186 l
540.859 247.925 541.828 246.899 542.390 246.107  c
542.953 245.305 543.234 244.576 543.234 243.920  c
543.234 243.420 543.078 243.008 542.765 242.686  c
542.463 242.352 542.093 242.186 541.656 242.186  c
541.270 242.186 540.921 242.300 540.609 242.529  c
540.296 242.758 540.067 243.097 539.921 243.545  c
539.703 243.545 l
539.807 242.816 540.057 242.258 540.453 241.873  c
540.859 241.488 541.364 241.295 541.968 241.295  c
542.614 241.295 543.150 241.503 543.578 241.920  c
544.015 242.326 544.234 242.811 544.234 243.373  c
544.234 243.779 544.140 244.186 543.953 244.592  c
543.661 245.217 543.192 245.883 542.546 246.592  c
541.578 247.654 540.968 248.295 540.718 248.514  c
542.796 248.514 l
543.223 248.514 543.520 248.498 543.687 248.467  c
543.854 248.436 544.005 248.373 544.140 248.279  c
544.286 248.186 544.406 248.050 544.499 247.873  c
544.718 247.873 l
h
550.718 247.873 m
550.171 249.404 l
545.484 249.404 l
545.484 249.186 l
546.859 247.925 547.828 246.899 548.390 246.107  c
548.953 245.305 549.234 244.576 549.234 243.920  c
549.234 243.420 549.078 243.008 548.765 242.686  c
548.463 242.352 548.093 242.186 547.656 242.186  c
547.270 242.186 546.921 242.300 546.609 242.529  c
546.296 242.758 546.067 243.097 545.921 243.545  c
545.703 243.545 l
545.807 242.816 546.057 242.258 546.453 241.873  c
546.859 241.488 547.364 241.295 547.968 241.295  c
548.614 241.295 549.150 241.503 549.578 241.920  c
550.015 242.326 550.234 242.811 550.234 243.373  c
550.234 243.779 550.140 244.186 549.953 244.592  c
549.661 245.217 549.192 245.883 548.546 246.592  c
547.578 247.654 546.968 248.295 546.718 248.514  c
548.796 248.514 l
549.223 248.514 549.520 248.498 549.687 248.467  c
549.854 248.436 550.005 248.373 550.140 248.279  c
550.286 248.186 550.406 248.050 550.499 247.873  c
550.718 247.873 l
h
552.906 243.873 m
553.093 243.873 553.249 243.936 553.374 244.061  c
553.499 244.186 553.562 244.342 553.562 244.529  c
553.562 244.706 553.499 244.857 553.374 244.982  c
553.249 245.107 553.093 245.170 552.906 245.170  c
552.729 245.170 552.578 245.107 552.453 244.982  c
552.328 244.857 552.265 244.706 552.265 244.529  c
552.265 244.342 552.328 244.186 552.453 244.061  c
552.578 243.936 552.729 243.873 552.906 243.873  c
h
552.906 248.264 m
553.083 248.264 553.234 248.331 553.359 248.467  c
553.494 248.592 553.562 248.743 553.562 248.920  c
553.562 249.097 553.494 249.253 553.359 249.389  c
553.234 249.514 553.083 249.576 552.906 249.576  c
552.718 249.576 552.562 249.514 552.437 249.389  c
552.312 249.253 552.249 249.097 552.249 248.920  c
552.249 248.743 552.312 248.592 552.437 248.467  c
552.562 248.331 552.718 248.264 552.906 248.264  c
h
563.052 247.873 m
562.505 249.404 l
557.818 249.404 l
557.818 249.186 l
559.193 247.925 560.162 246.899 560.724 246.107  c
561.287 245.305 561.568 244.576 561.568 243.920  c
561.568 243.420 561.412 243.008 561.099 242.686  c
560.797 242.352 560.427 242.186 559.990 242.186  c
559.604 242.186 559.255 242.300 558.943 242.529  c
558.630 242.758 558.401 243.097 558.255 243.545  c
558.037 243.545 l
558.141 242.816 558.391 242.258 558.787 241.873  c
559.193 241.488 559.698 241.295 560.302 241.295  c
560.948 241.295 561.484 241.503 561.912 241.920  c
562.349 242.326 562.568 242.811 562.568 243.373  c
562.568 243.779 562.474 244.186 562.287 244.592  c
561.995 245.217 561.526 245.883 560.880 246.592  c
559.912 247.654 559.302 248.295 559.052 248.514  c
561.130 248.514 l
561.557 248.514 561.854 248.498 562.021 248.467  c
562.188 248.436 562.339 248.373 562.474 248.279  c
562.620 248.186 562.740 248.050 562.833 247.873  c
563.052 247.873 l
h
568.927 241.295 m
568.927 241.514 l
568.417 241.566 567.995 241.670 567.662 241.826  c
567.339 241.972 567.016 242.206 566.693 242.529  c
566.380 242.842 566.120 243.196 565.912 243.592  c
565.703 243.977 565.526 244.436 565.380 244.967  c
565.943 244.581 566.511 244.389 567.083 244.389  c
567.625 244.389 568.094 244.607 568.490 245.045  c
568.886 245.482 569.083 246.045 569.083 246.732  c
569.083 247.399 568.886 248.003 568.490 248.545  c
568.000 249.212 567.359 249.545 566.568 249.545  c
566.026 249.545 565.563 249.363 565.177 248.998  c
564.438 248.300 564.068 247.394 564.068 246.279  c
564.068 245.571 564.208 244.899 564.490 244.264  c
564.781 243.618 565.188 243.050 565.708 242.561  c
566.240 242.061 566.745 241.727 567.224 241.561  c
567.714 241.383 568.172 241.295 568.599 241.295  c
568.927 241.295 l
h
565.287 245.389 m
565.214 245.920 565.177 246.347 565.177 246.670  c
565.177 247.045 565.245 247.456 565.380 247.904  c
565.526 248.342 565.734 248.686 566.005 248.936  c
566.203 249.123 566.448 249.217 566.740 249.217  c
567.073 249.217 567.375 249.055 567.646 248.732  c
567.917 248.410 568.052 247.951 568.052 247.357  c
568.052 246.691 567.917 246.118 567.646 245.639  c
567.386 245.149 567.011 244.904 566.521 244.904  c
566.375 244.904 566.214 244.936 566.037 244.998  c
565.870 245.061 565.620 245.191 565.287 245.389  c
h
575.052 247.873 m
574.505 249.404 l
569.818 249.404 l
569.818 249.186 l
571.193 247.925 572.162 246.899 572.724 246.107  c
573.287 245.305 573.568 244.576 573.568 243.920  c
573.568 243.420 573.412 243.008 573.099 242.686  c
572.797 242.352 572.427 242.186 571.990 242.186  c
571.604 242.186 571.255 242.300 570.943 242.529  c
570.630 242.758 570.401 243.097 570.255 243.545  c
570.037 243.545 l
570.141 242.816 570.391 242.258 570.787 241.873  c
571.193 241.488 571.698 241.295 572.302 241.295  c
572.948 241.295 573.484 241.503 573.912 241.920  c
574.349 242.326 574.568 242.811 574.568 243.373  c
574.568 243.779 574.474 244.186 574.287 244.592  c
573.995 245.217 573.526 245.883 572.880 246.592  c
571.912 247.654 571.302 248.295 571.052 248.514  c
573.130 248.514 l
573.557 248.514 573.854 248.498 574.021 248.467  c
574.188 248.436 574.339 248.373 574.474 248.279  c
574.620 248.186 574.740 248.050 574.833 247.873  c
575.052 247.873 l
h
580.458 249.404 m
577.396 242.717 l
577.396 248.029 l
577.396 248.519 577.448 248.821 577.552 248.936  c
577.698 249.102 577.927 249.186 578.240 249.186  c
578.521 249.186 l
578.521 249.404 l
575.755 249.404 l
575.755 249.186 l
576.037 249.186 l
576.370 249.186 576.609 249.087 576.755 248.889  c
576.839 248.764 576.880 248.477 576.880 248.029  c
576.880 242.842 l
576.880 242.488 576.839 242.232 576.755 242.076  c
576.703 241.962 576.604 241.868 576.458 241.795  c
576.313 241.712 576.078 241.670 575.755 241.670  c
575.755 241.451 l
578.005 241.451 l
580.880 247.670 l
583.724 241.451 l
585.974 241.451 l
585.974 241.670 l
585.693 241.670 l
585.359 241.670 585.120 241.774 584.974 241.982  c
584.891 242.107 584.849 242.394 584.849 242.842  c
584.849 248.029 l
584.849 248.519 584.901 248.821 585.005 248.936  c
585.151 249.102 585.380 249.186 585.693 249.186  c
585.974 249.186 l
585.974 249.404 l
582.599 249.404 l
582.599 249.186 l
582.880 249.186 l
583.214 249.186 583.453 249.087 583.599 248.889  c
583.682 248.764 583.724 248.477 583.724 248.029  c
583.724 242.717 l
580.662 249.404 l
580.458 249.404 l
h
594.191 245.092 m
590.816 245.092 l
590.805 245.248 590.800 245.410 590.800 245.576  c
594.035 245.576 l
593.910 246.029 l
590.816 246.029 l
590.847 246.852 591.014 247.540 591.316 248.092  c
591.660 248.727 592.128 249.045 592.722 249.045  c
593.243 249.045 593.680 248.915 594.035 248.654  c
594.243 248.488 594.509 248.180 594.831 247.732  c
595.019 247.857 l
594.675 248.389 594.368 248.764 594.097 248.982  c
593.649 249.357 593.113 249.545 592.488 249.545  c
591.581 249.545 590.884 249.170 590.394 248.420  c
589.988 247.816 589.748 247.019 589.675 246.029  c
589.081 246.029 l
589.222 245.576 l
589.660 245.576 l
589.660 245.482 l
589.660 245.357 589.665 245.227 589.675 245.092  c
589.081 245.092 l
589.222 244.623 l
589.722 244.623 l
589.847 243.696 590.160 242.936 590.660 242.342  c
591.233 241.644 591.967 241.295 592.863 241.295  c
593.529 241.295 594.196 241.467 594.863 241.811  c
594.863 243.561 l
594.628 243.561 l
594.524 242.311 593.936 241.686 592.863 241.686  c
592.248 241.686 591.764 242.008 591.410 242.654  c
591.128 243.165 590.946 243.821 590.863 244.623  c
594.316 244.623 l
594.191 245.092 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
