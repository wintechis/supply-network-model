%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 194 62
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Mittwoch, 5. Februar 2025 um 18:22:20 Mitteleurop√§ische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
194 62 setpagesize
0 0 0 0 setmargins
0 0 setorigin
194 62 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
194.000 0.00000 l
194.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
194.000 0.00000 l
194.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 194 62 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -464.000 -310.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
464.000 310.000 m
658.000 310.000 l
658.000 372.000 l
464.000 372.000 l
464.000 310.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -464.000 -310.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -464.000 -310.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -464.000 -310.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 351.552 m
503.000 359.836 496.284 366.552 488.000 366.552  c
479.716 366.552 473.000 359.836 473.000 351.552  c
473.000 343.268 479.716 336.552 488.000 336.552  c
496.284 336.552 503.000 343.268 503.000 351.552  c
h
f
0 J
1.45000 M
newpath
503.000 351.552 m
503.000 359.836 496.284 366.552 488.000 366.552  c
479.716 366.552 473.000 359.836 473.000 351.552  c
473.000 343.268 479.716 336.552 488.000 336.552  c
496.284 336.552 503.000 343.268 503.000 351.552  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
478.599 320.003 m
478.692 321.878 l
478.474 321.878 l
478.432 321.545 478.375 321.310 478.302 321.175  c
478.177 320.946 478.010 320.779 477.802 320.675  c
477.604 320.560 477.343 320.503 477.021 320.503  c
475.896 320.503 l
475.896 326.581 l
475.896 327.071 475.948 327.373 476.052 327.488  c
476.208 327.654 476.437 327.738 476.739 327.738  c
477.021 327.738 l
477.021 327.956 l
473.646 327.956 l
473.646 327.738 l
473.927 327.738 l
474.260 327.738 474.500 327.639 474.646 327.441  c
474.729 327.316 474.771 327.029 474.771 326.581  c
474.771 320.503 l
473.817 320.503 l
473.442 320.503 473.177 320.534 473.021 320.597  c
472.823 320.670 472.651 320.810 472.505 321.019  c
472.359 321.227 472.276 321.514 472.255 321.878  c
472.021 321.878 l
472.114 320.003 l
478.599 320.003 l
h
484.491 319.831 m
484.491 322.581 l
484.272 322.581 l
484.210 322.050 484.085 321.628 483.897 321.316  c
483.720 321.003 483.460 320.758 483.116 320.581  c
482.783 320.394 482.439 320.300 482.085 320.300  c
481.679 320.300 481.340 320.425 481.069 320.675  c
480.809 320.915 480.679 321.196 480.679 321.519  c
480.679 321.758 480.762 321.977 480.929 322.175  c
481.168 322.467 481.741 322.857 482.647 323.347  c
483.397 323.743 483.908 324.050 484.179 324.269  c
484.450 324.477 484.658 324.727 484.804 325.019  c
484.950 325.310 485.022 325.613 485.022 325.925  c
485.022 326.529 484.788 327.050 484.319 327.488  c
483.851 327.925 483.252 328.144 482.522 328.144  c
482.293 328.144 482.075 328.123 481.866 328.081  c
481.752 328.060 481.502 327.993 481.116 327.878  c
480.731 327.753 480.491 327.691 480.397 327.691  c
480.293 327.691 480.210 327.722 480.147 327.784  c
480.095 327.837 480.059 327.956 480.038 328.144  c
479.819 328.144 l
479.819 325.409 l
480.038 325.409 l
480.142 325.982 480.278 326.409 480.444 326.691  c
480.621 326.972 480.882 327.206 481.226 327.394  c
481.580 327.581 481.970 327.675 482.397 327.675  c
482.887 327.675 483.272 327.550 483.554 327.300  c
483.835 327.040 483.976 326.732 483.976 326.378  c
483.976 326.180 483.924 325.982 483.819 325.784  c
483.715 325.587 483.549 325.404 483.319 325.238  c
483.163 325.113 482.746 324.863 482.069 324.488  c
481.392 324.102 480.908 323.800 480.616 323.581  c
480.335 323.352 480.116 323.102 479.960 322.831  c
479.814 322.550 479.741 322.248 479.741 321.925  c
479.741 321.352 479.960 320.863 480.397 320.456  c
480.835 320.040 481.392 319.831 482.069 319.831  c
482.486 319.831 482.934 319.935 483.413 320.144  c
483.632 320.238 483.783 320.284 483.866 320.284  c
483.970 320.284 484.054 320.253 484.116 320.191  c
484.189 320.128 484.241 320.008 484.272 319.831  c
484.491 319.831 l
h
490.571 327.956 m
487.509 321.269 l
487.509 326.581 l
487.509 327.071 487.561 327.373 487.665 327.488  c
487.811 327.654 488.040 327.738 488.353 327.738  c
488.634 327.738 l
488.634 327.956 l
485.868 327.956 l
485.868 327.738 l
486.149 327.738 l
486.483 327.738 486.722 327.639 486.868 327.441  c
486.951 327.316 486.993 327.029 486.993 326.581  c
486.993 321.394 l
486.993 321.040 486.951 320.784 486.868 320.628  c
486.816 320.514 486.717 320.420 486.571 320.347  c
486.425 320.264 486.191 320.222 485.868 320.222  c
485.868 320.003 l
488.118 320.003 l
490.993 326.222 l
493.837 320.003 l
496.087 320.003 l
496.087 320.222 l
495.806 320.222 l
495.472 320.222 495.233 320.326 495.087 320.534  c
495.004 320.659 494.962 320.946 494.962 321.394  c
494.962 326.581 l
494.962 327.071 495.014 327.373 495.118 327.488  c
495.264 327.654 495.493 327.738 495.806 327.738  c
496.087 327.738 l
496.087 327.956 l
492.712 327.956 l
492.712 327.738 l
492.993 327.738 l
493.326 327.738 493.566 327.639 493.712 327.441  c
493.795 327.316 493.837 327.029 493.837 326.581  c
493.837 321.269 l
490.774 327.956 l
490.571 327.956 l
h
503.554 319.831 m
503.741 322.534 l
503.554 322.534 l
503.314 321.722 502.970 321.139 502.522 320.784  c
502.075 320.430 501.538 320.253 500.913 320.253  c
500.382 320.253 499.903 320.389 499.476 320.659  c
499.049 320.920 498.710 321.347 498.460 321.941  c
498.220 322.524 498.101 323.248 498.101 324.113  c
498.101 324.831 498.215 325.456 498.444 325.988  c
498.684 326.519 499.033 326.925 499.491 327.206  c
499.950 327.488 500.476 327.628 501.069 327.628  c
501.590 327.628 502.049 327.519 502.444 327.300  c
502.840 327.071 503.272 326.628 503.741 325.972  c
503.929 326.097 l
503.522 326.805 503.054 327.326 502.522 327.659  c
501.991 327.982 501.361 328.144 500.632 328.144  c
499.319 328.144 498.304 327.654 497.585 326.675  c
497.043 325.946 496.772 325.092 496.772 324.113  c
496.772 323.310 496.950 322.581 497.304 321.925  c
497.658 321.258 498.147 320.743 498.772 320.378  c
499.397 320.014 500.080 319.831 500.819 319.831  c
501.392 319.831 501.955 319.972 502.507 320.253  c
502.674 320.337 502.793 320.378 502.866 320.378  c
502.970 320.378 503.059 320.342 503.132 320.269  c
503.236 320.165 503.309 320.019 503.351 319.831  c
503.554 319.831 l
h
f
2 J
10.0000 M
newpath
649.440 351.552 m
649.440 359.836 642.725 366.552 634.440 366.552  c
626.156 366.552 619.440 359.836 619.440 351.552  c
619.440 343.268 626.156 336.552 634.440 336.552  c
642.725 336.552 649.440 343.268 649.440 351.552  c
h
f
0 J
1.45000 M
newpath
649.440 351.552 m
649.440 359.836 642.725 366.552 634.440 366.552  c
626.156 366.552 619.440 359.836 619.440 351.552  c
619.440 343.268 626.156 336.552 634.440 336.552  c
642.725 336.552 649.440 343.268 649.440 351.552  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
617.954 320.003 m
620.110 320.003 l
624.970 325.972 l
624.970 321.394 l
624.970 320.904 624.912 320.597 624.798 320.472  c
624.652 320.305 624.423 320.222 624.110 320.222  c
623.845 320.222 l
623.845 320.003 l
626.610 320.003 l
626.610 320.222 l
626.329 320.222 l
625.996 320.222 625.756 320.326 625.610 320.534  c
625.527 320.659 625.485 320.946 625.485 321.394  c
625.485 328.081 l
625.266 328.081 l
620.032 321.691 l
620.032 326.581 l
620.032 327.071 620.084 327.373 620.188 327.488  c
620.334 327.654 620.563 327.738 620.876 327.738  c
621.157 327.738 l
621.157 327.956 l
618.391 327.956 l
618.391 327.738 l
618.673 327.738 l
619.006 327.738 619.246 327.639 619.391 327.441  c
619.475 327.316 619.516 327.029 619.516 326.581  c
619.516 321.050 l
619.287 320.779 619.110 320.602 618.985 320.519  c
618.871 320.435 618.699 320.357 618.470 320.284  c
618.355 320.243 618.183 320.222 617.954 320.222  c
617.954 320.003 l
h
626.870 322.581 m
629.401 322.581 l
629.401 322.800 l
629.245 322.800 l
629.089 322.800 628.969 322.842 628.886 322.925  c
628.813 322.998 628.776 323.097 628.776 323.222  c
628.776 323.357 628.813 323.519 628.886 323.706  c
630.136 326.659 l
631.401 323.597 l
631.485 323.378 631.526 323.212 631.526 323.097  c
631.526 323.034 631.511 322.988 631.479 322.956  c
631.438 322.894 631.380 322.852 631.307 322.831  c
631.245 322.810 631.115 322.800 630.917 322.800  c
630.917 322.581 l
632.667 322.581 l
632.667 322.800 l
632.458 322.821 632.318 322.863 632.245 322.925  c
632.110 323.040 631.985 323.238 631.870 323.519  c
629.964 328.128 l
629.729 328.128 l
627.807 323.597 l
627.724 323.378 627.641 323.227 627.557 323.144  c
627.485 323.050 627.391 322.972 627.276 322.909  c
627.203 322.868 627.068 322.831 626.870 322.800  c
626.870 322.581 l
h
634.511 319.628 m
634.677 319.628 634.818 319.685 634.932 319.800  c
635.047 319.915 635.104 320.055 635.104 320.222  c
635.104 320.378 635.047 320.519 634.932 320.644  c
634.818 320.758 634.677 320.816 634.511 320.816  c
634.354 320.816 634.214 320.758 634.089 320.644  c
633.974 320.519 633.917 320.378 633.917 320.222  c
633.917 320.055 633.974 319.915 634.089 319.800  c
634.203 319.685 634.344 319.628 634.511 319.628  c
h
635.011 322.425 m
635.011 326.738 l
635.011 327.081 635.031 327.310 635.073 327.425  c
635.125 327.529 635.198 327.607 635.292 327.659  c
635.386 327.712 635.563 327.738 635.823 327.738  c
635.823 327.956 l
633.214 327.956 l
633.214 327.738 l
633.474 327.738 633.646 327.717 633.729 327.675  c
633.823 327.623 633.896 327.540 633.948 327.425  c
634.000 327.300 634.026 327.071 634.026 326.738  c
634.026 324.675 l
634.026 324.092 634.011 323.717 633.979 323.550  c
633.948 323.425 633.901 323.337 633.839 323.284  c
633.787 323.232 633.708 323.206 633.604 323.206  c
633.500 323.206 633.370 323.238 633.214 323.300  c
633.136 323.081 l
634.745 322.425 l
635.011 322.425 l
h
640.282 327.347 m
640.022 327.628 639.766 327.831 639.516 327.956  c
639.266 328.071 638.996 328.128 638.704 328.128  c
638.121 328.128 637.610 327.883 637.173 327.394  c
636.735 326.894 636.516 326.258 636.516 325.488  c
636.516 324.727 636.756 324.029 637.235 323.394  c
637.725 322.748 638.350 322.425 639.110 322.425  c
639.579 322.425 639.970 322.576 640.282 322.878  c
640.282 321.878 l
640.282 321.274 640.266 320.904 640.235 320.769  c
640.204 320.623 640.157 320.524 640.095 320.472  c
640.032 320.420 639.954 320.394 639.860 320.394  c
639.756 320.394 639.621 320.425 639.454 320.488  c
639.376 320.284 l
640.985 319.628 l
641.251 319.628 l
641.251 325.831 l
641.251 326.456 641.261 326.842 641.282 326.988  c
641.313 327.123 641.360 327.217 641.423 327.269  c
641.496 327.321 641.574 327.347 641.657 327.347  c
641.761 327.347 641.902 327.316 642.079 327.253  c
642.141 327.456 l
640.548 328.128 l
640.282 328.128 l
640.282 327.347 l
h
640.282 326.941 m
640.282 324.175 l
640.251 323.915 640.178 323.675 640.063 323.456  c
639.949 323.238 639.792 323.071 639.595 322.956  c
639.407 322.842 639.220 322.784 639.032 322.784  c
638.688 322.784 638.381 322.941 638.110 323.253  c
637.756 323.659 637.579 324.253 637.579 325.034  c
637.579 325.826 637.751 326.430 638.095 326.847  c
638.438 327.264 638.824 327.472 639.251 327.472  c
639.605 327.472 639.949 327.295 640.282 326.941  c
h
643.845 319.628 m
644.011 319.628 644.152 319.685 644.266 319.800  c
644.381 319.915 644.438 320.055 644.438 320.222  c
644.438 320.378 644.381 320.519 644.266 320.644  c
644.152 320.758 644.011 320.816 643.845 320.816  c
643.688 320.816 643.548 320.758 643.423 320.644  c
643.308 320.519 643.251 320.378 643.251 320.222  c
643.251 320.055 643.308 319.915 643.423 319.800  c
643.537 319.685 643.678 319.628 643.845 319.628  c
h
644.345 322.425 m
644.345 326.738 l
644.345 327.081 644.365 327.310 644.407 327.425  c
644.459 327.529 644.532 327.607 644.626 327.659  c
644.720 327.712 644.897 327.738 645.157 327.738  c
645.157 327.956 l
642.548 327.956 l
642.548 327.738 l
642.808 327.738 642.980 327.717 643.063 327.675  c
643.157 327.623 643.230 327.540 643.282 327.425  c
643.334 327.300 643.360 327.071 643.360 326.738  c
643.360 324.675 l
643.360 324.092 643.345 323.717 643.313 323.550  c
643.282 323.425 643.235 323.337 643.173 323.284  c
643.121 323.232 643.042 323.206 642.938 323.206  c
642.834 323.206 642.704 323.238 642.548 323.300  c
642.470 323.081 l
644.079 322.425 l
644.345 322.425 l
h
648.866 327.175 m
648.314 327.602 647.965 327.852 647.819 327.925  c
647.611 328.019 647.387 328.066 647.147 328.066  c
646.783 328.066 646.475 327.941 646.225 327.691  c
645.986 327.430 645.866 327.097 645.866 326.691  c
645.866 326.420 645.929 326.191 646.054 326.003  c
646.210 325.743 646.486 325.498 646.882 325.269  c
647.277 325.029 647.939 324.738 648.866 324.394  c
648.866 324.191 l
648.866 323.649 648.777 323.279 648.600 323.081  c
648.434 322.883 648.189 322.784 647.866 322.784  c
647.616 322.784 647.418 322.852 647.272 322.988  c
647.126 323.123 647.054 323.274 647.054 323.441  c
647.069 323.784 l
647.069 323.962 647.022 324.102 646.929 324.206  c
646.835 324.300 646.715 324.347 646.569 324.347  c
646.423 324.347 646.304 324.295 646.210 324.191  c
646.126 324.087 646.085 323.951 646.085 323.784  c
646.085 323.441 646.257 323.128 646.600 322.847  c
646.944 322.566 647.423 322.425 648.038 322.425  c
648.517 322.425 648.908 322.508 649.210 322.675  c
649.439 322.790 649.611 322.977 649.725 323.238  c
649.798 323.404 649.835 323.748 649.835 324.269  c
649.835 326.097 l
649.835 326.607 649.840 326.920 649.850 327.034  c
649.871 327.149 649.902 327.227 649.944 327.269  c
649.996 327.300 650.054 327.316 650.116 327.316  c
650.179 327.316 650.231 327.305 650.272 327.284  c
650.356 327.232 650.512 327.087 650.741 326.847  c
650.741 327.175 l
650.304 327.769 649.887 328.066 649.491 328.066  c
649.304 328.066 649.152 327.998 649.038 327.863  c
648.923 327.727 648.866 327.498 648.866 327.175  c
h
648.866 326.800 m
648.866 324.753 l
648.272 324.993 647.892 325.159 647.725 325.253  c
647.413 325.430 647.189 325.613 647.054 325.800  c
646.918 325.988 646.850 326.191 646.850 326.409  c
646.850 326.691 646.934 326.925 647.100 327.113  c
647.277 327.300 647.475 327.394 647.694 327.394  c
647.986 327.394 648.376 327.196 648.866 326.800  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 351.552 m
611.440 351.552 l
S
newpath
619.440 351.552 m
607.440 346.552 l
610.440 351.552 l
607.440 356.552 l
h
f
newpath
525.385 343.425 m
524.838 344.956 l
520.151 344.956 l
520.151 344.738 l
521.526 343.477 522.495 342.451 523.057 341.659  c
523.620 340.857 523.901 340.128 523.901 339.472  c
523.901 338.972 523.745 338.560 523.432 338.238  c
523.130 337.904 522.760 337.738 522.323 337.738  c
521.937 337.738 521.588 337.852 521.276 338.081  c
520.963 338.310 520.734 338.649 520.588 339.097  c
520.370 339.097 l
520.474 338.368 520.724 337.810 521.120 337.425  c
521.526 337.040 522.031 336.847 522.635 336.847  c
523.281 336.847 523.817 337.055 524.245 337.472  c
524.682 337.878 524.901 338.363 524.901 338.925  c
524.901 339.331 524.807 339.738 524.620 340.144  c
524.328 340.769 523.859 341.435 523.213 342.144  c
522.245 343.206 521.635 343.847 521.385 344.066  c
523.463 344.066 l
523.890 344.066 524.187 344.050 524.354 344.019  c
524.521 343.988 524.672 343.925 524.807 343.831  c
524.953 343.738 525.073 343.602 525.166 343.425  c
525.385 343.425 l
h
526.323 341.034 m
526.323 340.128 526.458 339.347 526.729 338.691  c
527.000 338.034 527.364 337.545 527.823 337.222  c
528.177 336.972 528.541 336.847 528.916 336.847  c
529.521 336.847 530.067 337.159 530.557 337.784  c
531.161 338.545 531.463 339.587 531.463 340.909  c
531.463 341.826 531.328 342.607 531.057 343.253  c
530.797 343.899 530.458 344.368 530.041 344.659  c
529.635 344.951 529.239 345.097 528.854 345.097  c
528.094 345.097 527.463 344.649 526.963 343.753  c
526.536 343.003 526.323 342.097 526.323 341.034  c
h
527.463 341.175 m
527.463 342.269 527.599 343.159 527.870 343.847  c
528.099 344.430 528.432 344.722 528.870 344.722  c
529.078 344.722 529.297 344.628 529.526 344.441  c
529.755 344.253 529.927 343.935 530.041 343.488  c
530.219 342.821 530.307 341.873 530.307 340.644  c
530.307 339.738 530.213 338.982 530.026 338.378  c
529.890 337.930 529.708 337.613 529.479 337.425  c
529.323 337.300 529.130 337.238 528.901 337.238  c
528.640 337.238 528.406 337.357 528.198 337.597  c
527.916 337.920 527.724 338.430 527.620 339.128  c
527.515 339.816 527.463 340.498 527.463 341.175  c
h
537.385 343.425 m
536.838 344.956 l
532.151 344.956 l
532.151 344.738 l
533.526 343.477 534.495 342.451 535.057 341.659  c
535.620 340.857 535.901 340.128 535.901 339.472  c
535.901 338.972 535.745 338.560 535.432 338.238  c
535.130 337.904 534.760 337.738 534.323 337.738  c
533.937 337.738 533.588 337.852 533.276 338.081  c
532.963 338.310 532.734 338.649 532.588 339.097  c
532.370 339.097 l
532.474 338.368 532.724 337.810 533.120 337.425  c
533.526 337.040 534.031 336.847 534.635 336.847  c
535.281 336.847 535.817 337.055 536.245 337.472  c
536.682 337.878 536.901 338.363 536.901 338.925  c
536.901 339.331 536.807 339.738 536.620 340.144  c
536.328 340.769 535.859 341.435 535.213 342.144  c
534.245 343.206 533.635 343.847 533.385 344.066  c
535.463 344.066 l
535.890 344.066 536.187 344.050 536.354 344.019  c
536.521 343.988 536.672 343.925 536.807 343.831  c
536.953 343.738 537.073 343.602 537.166 343.425  c
537.385 343.425 l
h
538.323 341.034 m
538.323 340.128 538.458 339.347 538.729 338.691  c
539.000 338.034 539.364 337.545 539.823 337.222  c
540.177 336.972 540.541 336.847 540.916 336.847  c
541.521 336.847 542.067 337.159 542.557 337.784  c
543.161 338.545 543.463 339.587 543.463 340.909  c
543.463 341.826 543.328 342.607 543.057 343.253  c
542.797 343.899 542.458 344.368 542.041 344.659  c
541.635 344.951 541.239 345.097 540.854 345.097  c
540.094 345.097 539.463 344.649 538.963 343.753  c
538.536 343.003 538.323 342.097 538.323 341.034  c
h
539.463 341.175 m
539.463 342.269 539.599 343.159 539.870 343.847  c
540.099 344.430 540.432 344.722 540.870 344.722  c
541.078 344.722 541.297 344.628 541.526 344.441  c
541.755 344.253 541.927 343.935 542.041 343.488  c
542.219 342.821 542.307 341.873 542.307 340.644  c
542.307 339.738 542.213 338.982 542.026 338.378  c
541.890 337.930 541.708 337.613 541.479 337.425  c
541.323 337.300 541.130 337.238 540.901 337.238  c
540.640 337.238 540.406 337.357 540.198 337.597  c
539.916 337.920 539.724 338.430 539.620 339.128  c
539.515 339.816 539.463 340.498 539.463 341.175  c
h
549.166 345.050 m
549.573 345.738 550.005 346.243 550.463 346.566  c
550.922 346.889 551.448 347.071 552.041 347.113  c
552.041 347.300 l
551.500 347.290 550.922 347.185 550.307 346.988  c
549.703 346.790 549.125 346.514 548.573 346.159  c
548.021 345.816 547.547 345.446 547.151 345.050  c
546.588 344.821 546.140 344.576 545.807 344.316  c
545.338 343.941 544.969 343.477 544.698 342.925  c
544.437 342.373 544.307 341.722 544.307 340.972  c
544.307 339.784 544.692 338.800 545.463 338.019  c
546.234 337.227 547.166 336.831 548.260 336.831  c
549.302 336.831 550.198 337.227 550.948 338.019  c
551.708 338.800 552.088 339.790 552.088 340.988  c
552.088 341.956 551.817 342.810 551.276 343.550  c
550.745 344.279 550.041 344.779 549.166 345.050  c
h
548.182 337.284 m
547.474 337.284 546.901 337.534 546.463 338.034  c
545.922 338.680 545.651 339.659 545.651 340.972  c
545.651 342.253 545.927 343.243 546.479 343.941  c
546.906 344.472 547.474 344.738 548.182 344.738  c
548.922 344.738 549.515 344.472 549.963 343.941  c
550.495 343.305 550.760 342.368 550.760 341.128  c
550.760 340.180 550.614 339.383 550.323 338.738  c
550.094 338.238 549.797 337.873 549.432 337.644  c
549.067 337.404 548.651 337.284 548.182 337.284  c
h
553.161 338.519 m
553.390 337.988 553.676 337.576 554.020 337.284  c
554.364 336.993 554.796 336.847 555.317 336.847  c
555.952 336.847 556.437 337.055 556.770 337.472  c
557.030 337.774 557.161 338.102 557.161 338.456  c
557.161 339.040 556.796 339.639 556.067 340.253  c
556.556 340.441 556.926 340.712 557.176 341.066  c
557.426 341.420 557.551 341.842 557.551 342.331  c
557.551 343.019 557.332 343.613 556.895 344.113  c
556.332 344.769 555.510 345.097 554.426 345.097  c
553.885 345.097 553.515 345.029 553.317 344.894  c
553.129 344.758 553.036 344.618 553.036 344.472  c
553.036 344.357 553.082 344.258 553.176 344.175  c
553.270 344.081 553.379 344.034 553.504 344.034  c
553.609 344.034 553.707 344.050 553.801 344.081  c
553.874 344.102 554.025 344.175 554.254 344.300  c
554.494 344.425 554.655 344.498 554.739 344.519  c
554.885 344.560 555.041 344.581 555.207 344.581  c
555.603 344.581 555.947 344.430 556.239 344.128  c
556.541 343.816 556.692 343.451 556.692 343.034  c
556.692 342.722 556.624 342.420 556.489 342.128  c
556.385 341.909 556.270 341.743 556.145 341.628  c
555.978 341.472 555.749 341.331 555.457 341.206  c
555.166 341.081 554.869 341.019 554.567 341.019  c
554.379 341.019 l
554.379 340.831 l
554.681 340.800 554.989 340.691 555.301 340.503  c
555.614 340.316 555.838 340.097 555.973 339.847  c
556.119 339.587 556.192 339.300 556.192 338.988  c
556.192 338.592 556.067 338.269 555.817 338.019  c
555.567 337.769 555.254 337.644 554.879 337.644  c
554.265 337.644 553.754 337.967 553.348 338.613  c
553.161 338.519 l
h
560.239 339.425 m
560.426 339.425 560.582 339.488 560.707 339.613  c
560.832 339.738 560.895 339.894 560.895 340.081  c
560.895 340.258 560.832 340.409 560.707 340.534  c
560.582 340.659 560.426 340.722 560.239 340.722  c
560.062 340.722 559.911 340.659 559.786 340.534  c
559.661 340.409 559.598 340.258 559.598 340.081  c
559.598 339.894 559.661 339.738 559.786 339.613  c
559.911 339.488 560.062 339.425 560.239 339.425  c
h
560.239 343.816 m
560.416 343.816 560.567 343.883 560.692 344.019  c
560.827 344.144 560.895 344.295 560.895 344.472  c
560.895 344.649 560.827 344.805 560.692 344.941  c
560.567 345.066 560.416 345.128 560.239 345.128  c
560.051 345.128 559.895 345.066 559.770 344.941  c
559.645 344.805 559.582 344.649 559.582 344.472  c
559.582 344.295 559.645 344.144 559.770 344.019  c
559.895 343.883 560.051 343.816 560.239 343.816  c
h
570.463 342.019 m
570.463 342.863 l
569.401 342.863 l
569.401 344.956 l
568.432 344.956 l
568.432 342.863 l
565.073 342.863 l
565.073 342.113 l
568.760 336.847 l
569.401 336.847 l
569.401 342.019 l
570.463 342.019 l
h
568.432 342.019 m
568.432 338.081 l
565.651 342.019 l
568.432 342.019 l
h
572.088 337.003 m
576.354 337.003 l
576.354 337.238 l
573.698 345.128 l
573.041 345.128 l
575.416 337.972 l
573.229 337.972 l
572.791 337.972 572.479 338.024 572.291 338.128  c
571.969 338.305 571.703 338.581 571.495 338.956  c
571.338 338.894 l
572.088 337.003 l
h
577.526 345.128 m
577.526 344.909 l
578.026 344.899 578.495 344.779 578.932 344.550  c
579.370 344.321 579.791 343.920 580.198 343.347  c
580.614 342.774 580.901 342.149 581.057 341.472  c
580.442 341.868 579.890 342.066 579.401 342.066  c
578.838 342.066 578.354 341.852 577.948 341.425  c
577.552 340.988 577.354 340.409 577.354 339.691  c
577.354 338.993 577.557 338.373 577.963 337.831  c
578.442 337.175 579.067 336.847 579.838 336.847  c
580.495 336.847 581.052 337.118 581.510 337.659  c
582.083 338.326 582.370 339.149 582.370 340.128  c
582.370 341.014 582.151 341.837 581.713 342.597  c
581.286 343.357 580.687 343.993 579.916 344.503  c
579.281 344.920 578.594 345.128 577.854 345.128  c
577.526 345.128 l
h
581.151 341.034 m
581.224 340.524 581.260 340.118 581.260 339.816  c
581.260 339.441 581.192 339.034 581.057 338.597  c
580.932 338.149 580.750 337.810 580.510 337.581  c
580.281 337.342 580.015 337.222 579.713 337.222  c
579.359 337.222 579.052 337.378 578.791 337.691  c
578.531 338.003 578.401 338.472 578.401 339.097  c
578.401 339.920 578.578 340.560 578.932 341.019  c
579.182 341.363 579.495 341.534 579.870 341.534  c
580.047 341.534 580.255 341.493 580.495 341.409  c
580.745 341.316 580.963 341.191 581.151 341.034  c
h
587.791 344.956 m
584.729 338.269 l
584.729 343.581 l
584.729 344.071 584.781 344.373 584.885 344.488  c
585.031 344.654 585.260 344.738 585.573 344.738  c
585.854 344.738 l
585.854 344.956 l
583.088 344.956 l
583.088 344.738 l
583.370 344.738 l
583.703 344.738 583.942 344.639 584.088 344.441  c
584.172 344.316 584.213 344.029 584.213 343.581  c
584.213 338.394 l
584.213 338.040 584.172 337.784 584.088 337.628  c
584.036 337.514 583.937 337.420 583.791 337.347  c
583.646 337.264 583.411 337.222 583.088 337.222  c
583.088 337.003 l
585.338 337.003 l
588.213 343.222 l
591.057 337.003 l
593.307 337.003 l
593.307 337.222 l
593.026 337.222 l
592.692 337.222 592.453 337.326 592.307 337.534  c
592.224 337.659 592.182 337.946 592.182 338.394  c
592.182 343.581 l
592.182 344.071 592.234 344.373 592.338 344.488  c
592.484 344.654 592.713 344.738 593.026 344.738  c
593.307 344.738 l
593.307 344.956 l
589.932 344.956 l
589.932 344.738 l
590.213 344.738 l
590.547 344.738 590.786 344.639 590.932 344.441  c
591.015 344.316 591.057 344.029 591.057 343.581  c
591.057 338.269 l
587.995 344.956 l
587.791 344.956 l
h
601.524 340.644 m
598.149 340.644 l
598.138 340.800 598.133 340.962 598.133 341.128  c
601.368 341.128 l
601.243 341.581 l
598.149 341.581 l
598.180 342.404 598.347 343.092 598.649 343.644  c
598.993 344.279 599.461 344.597 600.055 344.597  c
600.576 344.597 601.013 344.467 601.368 344.206  c
601.576 344.040 601.842 343.732 602.164 343.284  c
602.352 343.409 l
602.008 343.941 601.701 344.316 601.430 344.534  c
600.982 344.909 600.446 345.097 599.821 345.097  c
598.914 345.097 598.217 344.722 597.727 343.972  c
597.321 343.368 597.081 342.571 597.008 341.581  c
596.414 341.581 l
596.555 341.128 l
596.993 341.128 l
596.993 341.034 l
596.993 340.909 596.998 340.779 597.008 340.644  c
596.414 340.644 l
596.555 340.175 l
597.055 340.175 l
597.180 339.248 597.493 338.488 597.993 337.894  c
598.566 337.196 599.300 336.847 600.196 336.847  c
600.862 336.847 601.529 337.019 602.196 337.363  c
602.196 339.113 l
601.961 339.113 l
601.857 337.863 601.269 337.238 600.196 337.238  c
599.581 337.238 599.097 337.560 598.743 338.206  c
598.461 338.717 598.279 339.373 598.196 340.175  c
601.649 340.175 l
601.524 340.644 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
