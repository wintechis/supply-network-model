%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 187 62
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Dienstag, 26. November 2024 um 15:31:08 Mitteleuropäische Normalzeit
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
187 62 setpagesize
0 0 0 0 setmargins
0 0 setorigin
187 62 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
187.000 0.00000 l
187.000 62.0000 l
0.00000 62.0000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 187 62 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
468.000 214.000 m
655.000 214.000 l
655.000 276.000 l
468.000 276.000 l
468.000 214.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -468.000 -214.000 ] defaultmatrix matrix concatmatrix setmatrix
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
f
0 J
1.45000 M
newpath
503.000 256.000 m
503.000 264.284 496.284 271.000 488.000 271.000  c
479.716 271.000 473.000 264.284 473.000 256.000  c
473.000 247.716 479.716 241.000 488.000 241.000  c
496.284 241.000 503.000 247.716 503.000 256.000  c
h
S
2 J
10.0000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
f
0 J
1.45000 M
newpath
649.440 256.000 m
649.440 264.284 642.725 271.000 634.440 271.000  c
626.156 271.000 619.440 264.284 619.440 256.000  c
619.440 247.716 626.156 241.000 634.440 241.000  c
642.725 241.000 649.440 247.716 649.440 256.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
591.596 229.721 m
588.534 229.721 l
587.987 230.971 l
587.852 231.284 587.784 231.513 587.784 231.659  c
587.784 231.784 587.841 231.893 587.956 231.987  c
588.070 232.070 588.320 232.128 588.706 232.159  c
588.706 232.378 l
586.206 232.378 l
586.206 232.159 l
586.539 232.096 586.753 232.018 586.846 231.924  c
587.044 231.737 587.268 231.357 587.518 230.784  c
590.315 224.253 l
590.518 224.253 l
593.284 230.862 l
593.503 231.393 593.701 231.737 593.878 231.893  c
594.065 232.049 594.320 232.138 594.643 232.159  c
594.643 232.378 l
591.503 232.378 l
591.503 232.159 l
591.826 232.148 592.039 232.096 592.143 232.003  c
592.258 231.909 592.315 231.799 592.315 231.674  c
592.315 231.497 592.237 231.226 592.081 230.862  c
591.596 229.721 l
h
591.440 229.284 m
590.096 226.065 l
588.706 229.284 l
591.440 229.284 l
h
599.856 227.003 m
599.856 230.268 l
599.856 230.883 599.872 231.263 599.903 231.409  c
599.934 231.544 599.981 231.638 600.044 231.690  c
600.106 231.742 600.179 231.768 600.263 231.768  c
600.388 231.768 600.528 231.737 600.684 231.674  c
600.763 231.878 l
599.153 232.549 l
598.888 232.549 l
598.888 231.409 l
598.429 231.909 598.080 232.226 597.841 232.362  c
597.601 232.487 597.346 232.549 597.075 232.549  c
596.773 232.549 596.507 232.461 596.278 232.284  c
596.059 232.107 595.908 231.883 595.825 231.612  c
595.742 231.341 595.700 230.956 595.700 230.456  c
595.700 228.049 l
595.700 227.799 595.669 227.628 595.606 227.534  c
595.554 227.430 595.476 227.351 595.372 227.299  c
595.268 227.247 595.075 227.221 594.794 227.221  c
594.794 227.003 l
596.669 227.003 l
596.669 230.596 l
596.669 231.096 596.757 231.424 596.934 231.581  c
597.111 231.737 597.320 231.815 597.559 231.815  c
597.726 231.815 597.914 231.763 598.122 231.659  c
598.341 231.555 598.596 231.357 598.888 231.065  c
598.888 228.018 l
598.888 227.716 598.830 227.513 598.716 227.409  c
598.611 227.294 598.382 227.232 598.028 227.221  c
598.028 227.003 l
599.856 227.003 l
h
602.716 225.253 m
602.716 227.003 l
603.966 227.003 l
603.966 227.424 l
602.716 227.424 l
602.716 230.893 l
602.716 231.247 602.763 231.487 602.856 231.612  c
602.960 231.726 603.091 231.784 603.247 231.784  c
603.372 231.784 603.497 231.747 603.622 231.674  c
603.747 231.591 603.841 231.471 603.903 231.315  c
604.138 231.315 l
603.992 231.690 603.794 231.976 603.544 232.174  c
603.294 232.372 603.039 232.471 602.778 232.471  c
602.601 232.471 602.424 232.419 602.247 232.315  c
602.080 232.211 601.955 232.070 601.872 231.893  c
601.789 231.706 601.747 231.419 601.747 231.034  c
601.747 227.424 l
600.903 227.424 l
600.903 227.221 l
601.111 227.138 601.325 226.997 601.544 226.799  c
601.773 226.591 601.976 226.346 602.153 226.065  c
602.247 225.909 602.372 225.638 602.528 225.253  c
602.716 225.253 l
h
607.112 226.846 m
607.925 226.846 608.576 227.159 609.065 227.784  c
609.482 228.305 609.690 228.909 609.690 229.596  c
609.690 230.075 609.576 230.560 609.346 231.049  c
609.117 231.539 608.800 231.914 608.393 232.174  c
607.998 232.424 607.550 232.549 607.050 232.549  c
606.237 232.549 605.596 232.226 605.128 231.581  c
604.721 231.029 604.518 230.419 604.518 229.753  c
604.518 229.253 604.638 228.763 604.878 228.284  c
605.128 227.794 605.451 227.435 605.846 227.206  c
606.242 226.966 606.664 226.846 607.112 226.846  c
h
606.925 227.237 m
606.727 227.237 606.518 227.299 606.300 227.424  c
606.091 227.539 605.925 227.753 605.800 228.065  c
605.675 228.378 605.612 228.773 605.612 229.253  c
605.612 230.034 605.763 230.711 606.065 231.284  c
606.378 231.846 606.789 232.128 607.300 232.128  c
607.675 232.128 607.987 231.971 608.237 231.659  c
608.487 231.346 608.612 230.810 608.612 230.049  c
608.612 229.091 608.404 228.341 607.987 227.799  c
607.716 227.424 607.362 227.237 606.925 227.237  c
h
612.081 227.987 m
612.477 227.601 612.706 227.378 612.768 227.315  c
612.945 227.169 613.133 227.055 613.331 226.971  c
613.539 226.888 613.742 226.846 613.940 226.846  c
614.284 226.846 614.576 226.945 614.815 227.143  c
615.055 227.341 615.216 227.622 615.300 227.987  c
615.706 227.518 616.044 227.211 616.315 227.065  c
616.596 226.919 616.883 226.846 617.175 226.846  c
617.456 226.846 617.706 226.919 617.925 227.065  c
618.154 227.211 618.331 227.450 618.456 227.784  c
618.539 228.013 618.581 228.372 618.581 228.862  c
618.581 231.159 l
618.581 231.503 618.607 231.737 618.659 231.862  c
618.701 231.945 618.774 232.018 618.878 232.081  c
618.982 232.133 619.154 232.159 619.393 232.159  c
619.393 232.378 l
616.753 232.378 l
616.753 232.159 l
616.862 232.159 l
617.091 232.159 617.268 232.117 617.393 232.034  c
617.487 231.971 617.555 231.872 617.596 231.737  c
617.607 231.664 617.612 231.471 617.612 231.159  c
617.612 228.862 l
617.612 228.424 617.560 228.112 617.456 227.924  c
617.300 227.674 617.055 227.549 616.721 227.549  c
616.513 227.549 616.305 227.601 616.096 227.706  c
615.888 227.810 615.638 228.003 615.346 228.284  c
615.331 228.346 l
615.346 228.596 l
615.346 231.159 l
615.346 231.534 615.362 231.768 615.393 231.862  c
615.435 231.945 615.513 232.018 615.628 232.081  c
615.742 232.133 615.935 232.159 616.206 232.159  c
616.206 232.378 l
613.503 232.378 l
613.503 232.159 l
613.794 232.159 613.998 232.128 614.112 232.065  c
614.227 231.992 614.305 231.883 614.346 231.737  c
614.367 231.674 614.378 231.482 614.378 231.159  c
614.378 228.862 l
614.378 228.424 614.310 228.107 614.175 227.909  c
614.008 227.659 613.768 227.534 613.456 227.534  c
613.248 227.534 613.039 227.591 612.831 227.706  c
612.508 227.883 612.258 228.075 612.081 228.284  c
612.081 231.159 l
612.081 231.513 612.102 231.742 612.143 231.846  c
612.195 231.950 612.268 232.029 612.362 232.081  c
612.466 232.133 612.664 232.159 612.956 232.159  c
612.956 232.378 l
610.300 232.378 l
610.300 232.159 l
610.550 232.159 610.721 232.133 610.815 232.081  c
610.909 232.029 610.982 231.945 611.034 231.831  c
611.086 231.716 611.112 231.492 611.112 231.159  c
611.112 229.112 l
611.112 228.518 611.096 228.138 611.065 227.971  c
611.034 227.846 610.987 227.758 610.925 227.706  c
610.873 227.654 610.794 227.628 610.690 227.628  c
610.586 227.628 610.456 227.659 610.300 227.721  c
610.206 227.503 l
611.831 226.846 l
612.081 226.846 l
612.081 227.987 l
h
622.446 226.846 m
623.259 226.846 623.910 227.159 624.399 227.784  c
624.816 228.305 625.024 228.909 625.024 229.596  c
625.024 230.075 624.910 230.560 624.680 231.049  c
624.451 231.539 624.134 231.914 623.727 232.174  c
623.332 232.424 622.884 232.549 622.384 232.549  c
621.571 232.549 620.930 232.226 620.462 231.581  c
620.055 231.029 619.852 230.419 619.852 229.753  c
619.852 229.253 619.972 228.763 620.212 228.284  c
620.462 227.794 620.785 227.435 621.180 227.206  c
621.576 226.966 621.998 226.846 622.446 226.846  c
h
622.259 227.237 m
622.061 227.237 621.852 227.299 621.634 227.424  c
621.425 227.539 621.259 227.753 621.134 228.065  c
621.009 228.378 620.946 228.773 620.946 229.253  c
620.946 230.034 621.097 230.711 621.399 231.284  c
621.712 231.846 622.123 232.128 622.634 232.128  c
623.009 232.128 623.321 231.971 623.571 231.659  c
623.821 231.346 623.946 230.810 623.946 230.049  c
623.946 229.091 623.738 228.341 623.321 227.799  c
623.050 227.424 622.696 227.237 622.259 227.237  c
h
627.384 225.253 m
627.384 227.003 l
628.634 227.003 l
628.634 227.424 l
627.384 227.424 l
627.384 230.893 l
627.384 231.247 627.430 231.487 627.524 231.612  c
627.628 231.726 627.759 231.784 627.915 231.784  c
628.040 231.784 628.165 231.747 628.290 231.674  c
628.415 231.591 628.509 231.471 628.571 231.315  c
628.805 231.315 l
628.660 231.690 628.462 231.976 628.212 232.174  c
627.962 232.372 627.707 232.471 627.446 232.471  c
627.269 232.471 627.092 232.419 626.915 232.315  c
626.748 232.211 626.623 232.070 626.540 231.893  c
626.457 231.706 626.415 231.419 626.415 231.034  c
626.415 227.424 l
625.571 227.424 l
625.571 227.221 l
625.779 227.138 625.993 226.997 626.212 226.799  c
626.441 226.591 626.644 226.346 626.821 226.065  c
626.915 225.909 627.040 225.638 627.196 225.253  c
627.384 225.253 l
h
630.514 224.049 m
630.681 224.049 630.822 224.107 630.936 224.221  c
631.051 224.336 631.108 224.476 631.108 224.643  c
631.108 224.799 631.051 224.940 630.936 225.065  c
630.822 225.180 630.681 225.237 630.514 225.237  c
630.358 225.237 630.218 225.180 630.093 225.065  c
629.978 224.940 629.921 224.799 629.921 224.643  c
629.921 224.476 629.978 224.336 630.093 224.221  c
630.207 224.107 630.348 224.049 630.514 224.049  c
h
631.014 226.846 m
631.014 231.159 l
631.014 231.503 631.035 231.732 631.077 231.846  c
631.129 231.950 631.202 232.029 631.296 232.081  c
631.389 232.133 631.567 232.159 631.827 232.159  c
631.827 232.378 l
629.218 232.378 l
629.218 232.159 l
629.478 232.159 629.650 232.138 629.733 232.096  c
629.827 232.044 629.900 231.961 629.952 231.846  c
630.004 231.721 630.030 231.492 630.030 231.159  c
630.030 229.096 l
630.030 228.513 630.014 228.138 629.983 227.971  c
629.952 227.846 629.905 227.758 629.843 227.706  c
629.791 227.654 629.712 227.628 629.608 227.628  c
629.504 227.628 629.374 227.659 629.218 227.721  c
629.139 227.503 l
630.749 226.846 l
631.014 226.846 l
h
632.208 227.003 m
634.739 227.003 l
634.739 227.221 l
634.583 227.221 l
634.427 227.221 634.307 227.263 634.223 227.346  c
634.151 227.419 634.114 227.518 634.114 227.643  c
634.114 227.779 634.151 227.940 634.223 228.128  c
635.473 231.081 l
636.739 228.018 l
636.822 227.799 636.864 227.633 636.864 227.518  c
636.864 227.456 636.848 227.409 636.817 227.378  c
636.776 227.315 636.718 227.273 636.645 227.253  c
636.583 227.232 636.453 227.221 636.255 227.221  c
636.255 227.003 l
638.005 227.003 l
638.005 227.221 l
637.796 227.242 637.656 227.284 637.583 227.346  c
637.447 227.461 637.322 227.659 637.208 227.940  c
635.302 232.549 l
635.067 232.549 l
633.145 228.018 l
633.062 227.799 632.979 227.648 632.895 227.565  c
632.822 227.471 632.729 227.393 632.614 227.331  c
632.541 227.289 632.406 227.253 632.208 227.221  c
632.208 227.003 l
h
639.395 229.034 m
639.385 229.825 639.578 230.450 639.973 230.909  c
640.359 231.357 640.817 231.581 641.348 231.581  c
641.703 231.581 642.010 231.487 642.270 231.299  c
642.531 231.101 642.749 230.768 642.927 230.299  c
643.098 230.424 l
643.015 230.956 642.776 231.445 642.380 231.893  c
641.994 232.331 641.505 232.549 640.911 232.549  c
640.265 232.549 639.713 232.299 639.255 231.799  c
638.796 231.289 638.567 230.612 638.567 229.768  c
638.567 228.851 638.802 228.138 639.270 227.628  c
639.739 227.107 640.328 226.846 641.036 226.846  c
641.640 226.846 642.135 227.044 642.520 227.440  c
642.906 227.836 643.098 228.367 643.098 229.034  c
639.395 229.034 l
h
639.395 228.690 m
641.880 228.690 l
641.859 228.346 641.817 228.107 641.755 227.971  c
641.661 227.753 641.515 227.581 641.317 227.456  c
641.119 227.331 640.916 227.268 640.708 227.268  c
640.385 227.268 640.093 227.393 639.833 227.643  c
639.583 227.893 639.437 228.242 639.395 228.690  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
484.484 229.721 m
481.422 229.721 l
480.875 230.971 l
480.740 231.284 480.672 231.513 480.672 231.659  c
480.672 231.784 480.729 231.893 480.844 231.987  c
480.958 232.070 481.208 232.128 481.594 232.159  c
481.594 232.378 l
479.094 232.378 l
479.094 232.159 l
479.427 232.096 479.641 232.018 479.734 231.924  c
479.932 231.737 480.156 231.357 480.406 230.784  c
483.203 224.253 l
483.406 224.253 l
486.172 230.862 l
486.391 231.393 486.589 231.737 486.766 231.893  c
486.953 232.049 487.208 232.138 487.531 232.159  c
487.531 232.378 l
484.391 232.378 l
484.391 232.159 l
484.714 232.148 484.927 232.096 485.031 232.003  c
485.146 231.909 485.203 231.799 485.203 231.674  c
485.203 231.497 485.125 231.226 484.969 230.862  c
484.484 229.721 l
h
484.328 229.284 m
482.984 226.065 l
481.594 229.284 l
484.328 229.284 l
h
492.744 227.003 m
492.744 230.268 l
492.744 230.883 492.760 231.263 492.791 231.409  c
492.822 231.544 492.869 231.638 492.932 231.690  c
492.994 231.742 493.067 231.768 493.150 231.768  c
493.275 231.768 493.416 231.737 493.572 231.674  c
493.650 231.878 l
492.041 232.549 l
491.775 232.549 l
491.775 231.409 l
491.317 231.909 490.968 232.226 490.729 232.362  c
490.489 232.487 490.234 232.549 489.963 232.549  c
489.661 232.549 489.395 232.461 489.166 232.284  c
488.947 232.107 488.796 231.883 488.713 231.612  c
488.630 231.341 488.588 230.956 488.588 230.456  c
488.588 228.049 l
488.588 227.799 488.557 227.628 488.494 227.534  c
488.442 227.430 488.364 227.351 488.260 227.299  c
488.156 227.247 487.963 227.221 487.682 227.221  c
487.682 227.003 l
489.557 227.003 l
489.557 230.596 l
489.557 231.096 489.645 231.424 489.822 231.581  c
489.999 231.737 490.208 231.815 490.447 231.815  c
490.614 231.815 490.801 231.763 491.010 231.659  c
491.229 231.555 491.484 231.357 491.775 231.065  c
491.775 228.018 l
491.775 227.716 491.718 227.513 491.604 227.409  c
491.499 227.294 491.270 227.232 490.916 227.221  c
490.916 227.003 l
492.744 227.003 l
h
495.604 225.253 m
495.604 227.003 l
496.854 227.003 l
496.854 227.424 l
495.604 227.424 l
495.604 230.893 l
495.604 231.247 495.650 231.487 495.744 231.612  c
495.848 231.726 495.979 231.784 496.135 231.784  c
496.260 231.784 496.385 231.747 496.510 231.674  c
496.635 231.591 496.729 231.471 496.791 231.315  c
497.025 231.315 l
496.880 231.690 496.682 231.976 496.432 232.174  c
496.182 232.372 495.926 232.471 495.666 232.471  c
495.489 232.471 495.312 232.419 495.135 232.315  c
494.968 232.211 494.843 232.070 494.760 231.893  c
494.676 231.706 494.635 231.419 494.635 231.034  c
494.635 227.424 l
493.791 227.424 l
493.791 227.221 l
493.999 227.138 494.213 226.997 494.432 226.799  c
494.661 226.591 494.864 226.346 495.041 226.065  c
495.135 225.909 495.260 225.638 495.416 225.253  c
495.604 225.253 l
h
500.000 226.846 m
500.812 226.846 501.464 227.159 501.953 227.784  c
502.370 228.305 502.578 228.909 502.578 229.596  c
502.578 230.075 502.464 230.560 502.234 231.049  c
502.005 231.539 501.688 231.914 501.281 232.174  c
500.885 232.424 500.438 232.549 499.938 232.549  c
499.125 232.549 498.484 232.226 498.016 231.581  c
497.609 231.029 497.406 230.419 497.406 229.753  c
497.406 229.253 497.526 228.763 497.766 228.284  c
498.016 227.794 498.339 227.435 498.734 227.206  c
499.130 226.966 499.552 226.846 500.000 226.846  c
h
499.812 227.237 m
499.615 227.237 499.406 227.299 499.188 227.424  c
498.979 227.539 498.812 227.753 498.688 228.065  c
498.562 228.378 498.500 228.773 498.500 229.253  c
498.500 230.034 498.651 230.711 498.953 231.284  c
499.266 231.846 499.677 232.128 500.188 232.128  c
500.562 232.128 500.875 231.971 501.125 231.659  c
501.375 231.346 501.500 230.810 501.500 230.049  c
501.500 229.091 501.292 228.341 500.875 227.799  c
500.604 227.424 500.250 227.237 499.812 227.237  c
h
504.969 227.987 m
505.365 227.601 505.594 227.378 505.656 227.315  c
505.833 227.169 506.021 227.055 506.219 226.971  c
506.427 226.888 506.630 226.846 506.828 226.846  c
507.172 226.846 507.464 226.945 507.703 227.143  c
507.943 227.341 508.104 227.622 508.188 227.987  c
508.594 227.518 508.932 227.211 509.203 227.065  c
509.484 226.919 509.771 226.846 510.062 226.846  c
510.344 226.846 510.594 226.919 510.812 227.065  c
511.042 227.211 511.219 227.450 511.344 227.784  c
511.427 228.013 511.469 228.372 511.469 228.862  c
511.469 231.159 l
511.469 231.503 511.495 231.737 511.547 231.862  c
511.589 231.945 511.661 232.018 511.766 232.081  c
511.870 232.133 512.042 232.159 512.281 232.159  c
512.281 232.378 l
509.641 232.378 l
509.641 232.159 l
509.750 232.159 l
509.979 232.159 510.156 232.117 510.281 232.034  c
510.375 231.971 510.443 231.872 510.484 231.737  c
510.495 231.664 510.500 231.471 510.500 231.159  c
510.500 228.862 l
510.500 228.424 510.448 228.112 510.344 227.924  c
510.188 227.674 509.943 227.549 509.609 227.549  c
509.401 227.549 509.193 227.601 508.984 227.706  c
508.776 227.810 508.526 228.003 508.234 228.284  c
508.219 228.346 l
508.234 228.596 l
508.234 231.159 l
508.234 231.534 508.250 231.768 508.281 231.862  c
508.323 231.945 508.401 232.018 508.516 232.081  c
508.630 232.133 508.823 232.159 509.094 232.159  c
509.094 232.378 l
506.391 232.378 l
506.391 232.159 l
506.682 232.159 506.885 232.128 507.000 232.065  c
507.115 231.992 507.193 231.883 507.234 231.737  c
507.255 231.674 507.266 231.482 507.266 231.159  c
507.266 228.862 l
507.266 228.424 507.198 228.107 507.062 227.909  c
506.896 227.659 506.656 227.534 506.344 227.534  c
506.135 227.534 505.927 227.591 505.719 227.706  c
505.396 227.883 505.146 228.075 504.969 228.284  c
504.969 231.159 l
504.969 231.513 504.990 231.742 505.031 231.846  c
505.083 231.950 505.156 232.029 505.250 232.081  c
505.354 232.133 505.552 232.159 505.844 232.159  c
505.844 232.378 l
503.188 232.378 l
503.188 232.159 l
503.438 232.159 503.609 232.133 503.703 232.081  c
503.797 232.029 503.870 231.945 503.922 231.831  c
503.974 231.716 504.000 231.492 504.000 231.159  c
504.000 229.112 l
504.000 228.518 503.984 228.138 503.953 227.971  c
503.922 227.846 503.875 227.758 503.812 227.706  c
503.760 227.654 503.682 227.628 503.578 227.628  c
503.474 227.628 503.344 227.659 503.188 227.721  c
503.094 227.503 l
504.719 226.846 l
504.969 226.846 l
504.969 227.987 l
h
515.334 226.846 m
516.146 226.846 516.798 227.159 517.287 227.784  c
517.704 228.305 517.912 228.909 517.912 229.596  c
517.912 230.075 517.798 230.560 517.568 231.049  c
517.339 231.539 517.021 231.914 516.615 232.174  c
516.219 232.424 515.771 232.549 515.271 232.549  c
514.459 232.549 513.818 232.226 513.350 231.581  c
512.943 231.029 512.740 230.419 512.740 229.753  c
512.740 229.253 512.860 228.763 513.100 228.284  c
513.350 227.794 513.673 227.435 514.068 227.206  c
514.464 226.966 514.886 226.846 515.334 226.846  c
h
515.146 227.237 m
514.949 227.237 514.740 227.299 514.521 227.424  c
514.313 227.539 514.146 227.753 514.021 228.065  c
513.896 228.378 513.834 228.773 513.834 229.253  c
513.834 230.034 513.985 230.711 514.287 231.284  c
514.600 231.846 515.011 232.128 515.521 232.128  c
515.896 232.128 516.209 231.971 516.459 231.659  c
516.709 231.346 516.834 230.810 516.834 230.049  c
516.834 229.091 516.626 228.341 516.209 227.799  c
515.938 227.424 515.584 227.237 515.146 227.237  c
h
520.271 225.253 m
520.271 227.003 l
521.521 227.003 l
521.521 227.424 l
520.271 227.424 l
520.271 230.893 l
520.271 231.247 520.318 231.487 520.412 231.612  c
520.516 231.726 520.646 231.784 520.803 231.784  c
520.928 231.784 521.053 231.747 521.178 231.674  c
521.303 231.591 521.396 231.471 521.459 231.315  c
521.693 231.315 l
521.548 231.690 521.350 231.976 521.100 232.174  c
520.850 232.372 520.594 232.471 520.334 232.471  c
520.157 232.471 519.980 232.419 519.803 232.315  c
519.636 232.211 519.511 232.070 519.428 231.893  c
519.344 231.706 519.303 231.419 519.303 231.034  c
519.303 227.424 l
518.459 227.424 l
518.459 227.221 l
518.667 227.138 518.881 226.997 519.100 226.799  c
519.329 226.591 519.532 226.346 519.709 226.065  c
519.803 225.909 519.928 225.638 520.084 225.253  c
520.271 225.253 l
h
523.402 224.049 m
523.569 224.049 523.710 224.107 523.824 224.221  c
523.939 224.336 523.996 224.476 523.996 224.643  c
523.996 224.799 523.939 224.940 523.824 225.065  c
523.710 225.180 523.569 225.237 523.402 225.237  c
523.246 225.237 523.105 225.180 522.980 225.065  c
522.866 224.940 522.809 224.799 522.809 224.643  c
522.809 224.476 522.866 224.336 522.980 224.221  c
523.095 224.107 523.236 224.049 523.402 224.049  c
h
523.902 226.846 m
523.902 231.159 l
523.902 231.503 523.923 231.732 523.965 231.846  c
524.017 231.950 524.090 232.029 524.184 232.081  c
524.277 232.133 524.454 232.159 524.715 232.159  c
524.715 232.378 l
522.105 232.378 l
522.105 232.159 l
522.366 232.159 522.538 232.138 522.621 232.096  c
522.715 232.044 522.788 231.961 522.840 231.846  c
522.892 231.721 522.918 231.492 522.918 231.159  c
522.918 229.096 l
522.918 228.513 522.902 228.138 522.871 227.971  c
522.840 227.846 522.793 227.758 522.730 227.706  c
522.678 227.654 522.600 227.628 522.496 227.628  c
522.392 227.628 522.262 227.659 522.105 227.721  c
522.027 227.503 l
523.637 226.846 l
523.902 226.846 l
h
525.096 227.003 m
527.627 227.003 l
527.627 227.221 l
527.471 227.221 l
527.314 227.221 527.195 227.263 527.111 227.346  c
527.038 227.419 527.002 227.518 527.002 227.643  c
527.002 227.779 527.038 227.940 527.111 228.128  c
528.361 231.081 l
529.627 228.018 l
529.710 227.799 529.752 227.633 529.752 227.518  c
529.752 227.456 529.736 227.409 529.705 227.378  c
529.663 227.315 529.606 227.273 529.533 227.253  c
529.471 227.232 529.340 227.221 529.143 227.221  c
529.143 227.003 l
530.893 227.003 l
530.893 227.221 l
530.684 227.242 530.544 227.284 530.471 227.346  c
530.335 227.461 530.210 227.659 530.096 227.940  c
528.189 232.549 l
527.955 232.549 l
526.033 228.018 l
525.950 227.799 525.867 227.648 525.783 227.565  c
525.710 227.471 525.617 227.393 525.502 227.331  c
525.429 227.289 525.294 227.253 525.096 227.221  c
525.096 227.003 l
h
532.283 229.034 m
532.273 229.825 532.465 230.450 532.861 230.909  c
533.247 231.357 533.705 231.581 534.236 231.581  c
534.590 231.581 534.898 231.487 535.158 231.299  c
535.419 231.101 535.637 230.768 535.814 230.299  c
535.986 230.424 l
535.903 230.956 535.663 231.445 535.268 231.893  c
534.882 232.331 534.393 232.549 533.799 232.549  c
533.153 232.549 532.601 232.299 532.143 231.799  c
531.684 231.289 531.455 230.612 531.455 229.768  c
531.455 228.851 531.689 228.138 532.158 227.628  c
532.627 227.107 533.215 226.846 533.924 226.846  c
534.528 226.846 535.023 227.044 535.408 227.440  c
535.794 227.836 535.986 228.367 535.986 229.034  c
532.283 229.034 l
h
532.283 228.690 m
534.768 228.690 l
534.747 228.346 534.705 228.107 534.643 227.971  c
534.549 227.753 534.403 227.581 534.205 227.456  c
534.007 227.331 533.804 227.268 533.596 227.268  c
533.273 227.268 532.981 227.393 532.721 227.643  c
532.471 227.893 532.325 228.242 532.283 228.690  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
503.000 256.000 m
611.440 256.000 l
S
newpath
619.440 256.000 m
607.440 251.000 l
610.440 256.000 l
607.440 261.000 l
h
f
newpath
529.551 247.873 m
529.004 249.404 l
524.317 249.404 l
524.317 249.186 l
525.692 247.925 526.661 246.899 527.223 246.107  c
527.786 245.305 528.067 244.576 528.067 243.920  c
528.067 243.420 527.911 243.008 527.598 242.686  c
527.296 242.352 526.926 242.186 526.489 242.186  c
526.103 242.186 525.754 242.300 525.442 242.529  c
525.129 242.758 524.900 243.097 524.754 243.545  c
524.536 243.545 l
524.640 242.816 524.890 242.258 525.286 241.873  c
525.692 241.488 526.197 241.295 526.801 241.295  c
527.447 241.295 527.984 241.503 528.411 241.920  c
528.848 242.326 529.067 242.811 529.067 243.373  c
529.067 243.779 528.973 244.186 528.786 244.592  c
528.494 245.217 528.025 245.883 527.379 246.592  c
526.411 247.654 525.801 248.295 525.551 248.514  c
527.629 248.514 l
528.056 248.514 528.353 248.498 528.520 248.467  c
528.687 248.436 528.838 248.373 528.973 248.279  c
529.119 248.186 529.239 248.050 529.332 247.873  c
529.551 247.873 l
h
530.489 245.482 m
530.489 244.576 530.624 243.795 530.895 243.139  c
531.166 242.482 531.530 241.993 531.989 241.670  c
532.343 241.420 532.707 241.295 533.082 241.295  c
533.687 241.295 534.234 241.607 534.723 242.232  c
535.327 242.993 535.629 244.035 535.629 245.357  c
535.629 246.274 535.494 247.055 535.223 247.701  c
534.963 248.347 534.624 248.816 534.207 249.107  c
533.801 249.399 533.405 249.545 533.020 249.545  c
532.260 249.545 531.629 249.097 531.129 248.201  c
530.702 247.451 530.489 246.545 530.489 245.482  c
h
531.629 245.623 m
531.629 246.717 531.765 247.607 532.036 248.295  c
532.265 248.878 532.598 249.170 533.036 249.170  c
533.244 249.170 533.463 249.076 533.692 248.889  c
533.921 248.701 534.093 248.383 534.207 247.936  c
534.385 247.269 534.473 246.321 534.473 245.092  c
534.473 244.186 534.379 243.430 534.192 242.826  c
534.056 242.378 533.874 242.061 533.645 241.873  c
533.489 241.748 533.296 241.686 533.067 241.686  c
532.806 241.686 532.572 241.805 532.364 242.045  c
532.082 242.368 531.890 242.878 531.786 243.576  c
531.681 244.264 531.629 244.946 531.629 245.623  c
h
541.551 247.873 m
541.004 249.404 l
536.317 249.404 l
536.317 249.186 l
537.692 247.925 538.661 246.899 539.223 246.107  c
539.786 245.305 540.067 244.576 540.067 243.920  c
540.067 243.420 539.911 243.008 539.598 242.686  c
539.296 242.352 538.926 242.186 538.489 242.186  c
538.103 242.186 537.754 242.300 537.442 242.529  c
537.129 242.758 536.900 243.097 536.754 243.545  c
536.536 243.545 l
536.640 242.816 536.890 242.258 537.286 241.873  c
537.692 241.488 538.197 241.295 538.801 241.295  c
539.447 241.295 539.984 241.503 540.411 241.920  c
540.848 242.326 541.067 242.811 541.067 243.373  c
541.067 243.779 540.973 244.186 540.786 244.592  c
540.494 245.217 540.025 245.883 539.379 246.592  c
538.411 247.654 537.801 248.295 537.551 248.514  c
539.629 248.514 l
540.056 248.514 540.353 248.498 540.520 248.467  c
540.687 248.436 540.838 248.373 540.973 248.279  c
541.119 248.186 541.239 248.050 541.332 247.873  c
541.551 247.873 l
h
542.661 242.967 m
542.890 242.436 543.176 242.024 543.520 241.732  c
543.864 241.441 544.296 241.295 544.817 241.295  c
545.452 241.295 545.937 241.503 546.270 241.920  c
546.530 242.222 546.661 242.550 546.661 242.904  c
546.661 243.488 546.296 244.087 545.567 244.701  c
546.056 244.889 546.426 245.160 546.676 245.514  c
546.926 245.868 547.051 246.290 547.051 246.779  c
547.051 247.467 546.832 248.061 546.395 248.561  c
545.832 249.217 545.010 249.545 543.926 249.545  c
543.385 249.545 543.015 249.477 542.817 249.342  c
542.629 249.206 542.536 249.066 542.536 248.920  c
542.536 248.805 542.582 248.706 542.676 248.623  c
542.770 248.529 542.879 248.482 543.004 248.482  c
543.109 248.482 543.207 248.498 543.301 248.529  c
543.374 248.550 543.525 248.623 543.754 248.748  c
543.994 248.873 544.155 248.946 544.239 248.967  c
544.385 249.008 544.541 249.029 544.707 249.029  c
545.103 249.029 545.447 248.878 545.739 248.576  c
546.041 248.264 546.192 247.899 546.192 247.482  c
546.192 247.170 546.124 246.868 545.989 246.576  c
545.885 246.357 545.770 246.191 545.645 246.076  c
545.478 245.920 545.249 245.779 544.957 245.654  c
544.666 245.529 544.369 245.467 544.067 245.467  c
543.879 245.467 l
543.879 245.279 l
544.181 245.248 544.489 245.139 544.801 244.951  c
545.114 244.764 545.338 244.545 545.473 244.295  c
545.619 244.035 545.692 243.748 545.692 243.436  c
545.692 243.040 545.567 242.717 545.317 242.467  c
545.067 242.217 544.754 242.092 544.379 242.092  c
543.765 242.092 543.254 242.415 542.848 243.061  c
542.661 242.967 l
h
549.739 243.873 m
549.926 243.873 550.082 243.936 550.207 244.061  c
550.332 244.186 550.395 244.342 550.395 244.529  c
550.395 244.706 550.332 244.857 550.207 244.982  c
550.082 245.107 549.926 245.170 549.739 245.170  c
549.562 245.170 549.411 245.107 549.286 244.982  c
549.161 244.857 549.098 244.706 549.098 244.529  c
549.098 244.342 549.161 244.186 549.286 244.061  c
549.411 243.936 549.562 243.873 549.739 243.873  c
h
549.739 248.264 m
549.916 248.264 550.067 248.331 550.192 248.467  c
550.327 248.592 550.395 248.743 550.395 248.920  c
550.395 249.097 550.327 249.253 550.192 249.389  c
550.067 249.514 549.916 249.576 549.739 249.576  c
549.551 249.576 549.395 249.514 549.270 249.389  c
549.145 249.253 549.082 249.097 549.082 248.920  c
549.082 248.743 549.145 248.592 549.270 248.467  c
549.395 248.331 549.551 248.264 549.739 248.264  c
h
555.791 242.232 m
557.729 241.295 l
557.916 241.295 l
557.916 247.998 l
557.916 248.446 557.932 248.727 557.963 248.842  c
558.005 248.946 558.083 249.029 558.198 249.092  c
558.323 249.144 558.562 249.175 558.916 249.186  c
558.916 249.404 l
555.932 249.404 l
555.932 249.186 l
556.307 249.175 556.547 249.144 556.651 249.092  c
556.765 249.029 556.844 248.951 556.885 248.857  c
556.927 248.764 556.948 248.477 556.948 247.998  c
556.948 243.717 l
556.948 243.133 556.932 242.764 556.901 242.607  c
556.870 242.482 556.817 242.389 556.745 242.326  c
556.672 242.264 556.583 242.232 556.479 242.232  c
556.333 242.232 556.135 242.295 555.885 242.420  c
555.791 242.232 l
h
561.026 251.404 m
561.026 251.139 l
561.432 251.014 561.745 250.811 561.963 250.529  c
562.182 250.248 562.291 249.951 562.291 249.639  c
562.291 249.566 562.276 249.503 562.245 249.451  c
562.213 249.420 562.187 249.404 562.166 249.404  c
562.125 249.404 562.031 249.441 561.885 249.514  c
561.812 249.555 561.734 249.576 561.651 249.576  c
561.463 249.576 561.312 249.519 561.198 249.404  c
561.083 249.290 561.026 249.133 561.026 248.936  c
561.026 248.738 561.099 248.571 561.245 248.436  c
561.390 248.300 561.573 248.232 561.791 248.232  c
562.041 248.232 562.265 248.347 562.463 248.576  c
562.672 248.795 562.776 249.092 562.776 249.467  c
562.776 249.863 562.635 250.232 562.354 250.576  c
562.073 250.930 561.630 251.206 561.026 251.404  c
h
564.588 241.451 m
568.854 241.451 l
568.854 241.686 l
566.198 249.576 l
565.541 249.576 l
567.916 242.420 l
565.729 242.420 l
565.291 242.420 564.979 242.472 564.791 242.576  c
564.469 242.753 564.203 243.029 563.995 243.404  c
563.838 243.342 l
564.588 241.451 l
h
571.682 245.404 m
571.057 244.883 570.651 244.467 570.463 244.154  c
570.286 243.842 570.198 243.519 570.198 243.186  c
570.198 242.675 570.396 242.232 570.791 241.857  c
571.198 241.482 571.729 241.295 572.385 241.295  c
573.031 241.295 573.547 241.472 573.932 241.826  c
574.328 242.170 574.526 242.561 574.526 242.998  c
574.526 243.300 574.416 243.607 574.198 243.920  c
573.989 244.222 573.552 244.581 572.885 244.998  c
573.573 245.529 574.026 245.951 574.245 246.264  c
574.547 246.660 574.698 247.076 574.698 247.514  c
574.698 248.076 574.484 248.555 574.057 248.951  c
573.630 249.347 573.073 249.545 572.385 249.545  c
571.625 249.545 571.036 249.311 570.620 248.842  c
570.286 248.456 570.120 248.040 570.120 247.592  c
570.120 247.238 570.234 246.889 570.463 246.545  c
570.703 246.201 571.109 245.821 571.682 245.404  c
h
572.604 244.779 m
573.073 244.352 573.370 244.019 573.495 243.779  c
573.620 243.529 573.682 243.253 573.682 242.951  c
573.682 242.535 573.567 242.212 573.338 241.982  c
573.109 241.753 572.797 241.639 572.401 241.639  c
572.005 241.639 571.682 241.753 571.432 241.982  c
571.182 242.212 571.057 242.482 571.057 242.795  c
571.057 242.993 571.104 243.196 571.198 243.404  c
571.302 243.602 571.453 243.795 571.651 243.982  c
572.604 244.779 l
h
571.963 245.623 m
571.640 245.894 571.401 246.191 571.245 246.514  c
571.088 246.837 571.010 247.186 571.010 247.561  c
571.010 248.071 571.146 248.477 571.416 248.779  c
571.698 249.081 572.052 249.232 572.479 249.232  c
572.896 249.232 573.229 249.113 573.479 248.873  c
573.739 248.633 573.870 248.342 573.870 247.998  c
573.870 247.717 573.797 247.467 573.651 247.248  c
573.370 246.831 572.807 246.290 571.963 245.623  c
h
575.823 245.482 m
575.823 244.576 575.958 243.795 576.229 243.139  c
576.500 242.482 576.864 241.993 577.323 241.670  c
577.677 241.420 578.041 241.295 578.416 241.295  c
579.021 241.295 579.567 241.607 580.057 242.232  c
580.661 242.993 580.963 244.035 580.963 245.357  c
580.963 246.274 580.828 247.055 580.557 247.701  c
580.297 248.347 579.958 248.816 579.541 249.107  c
579.135 249.399 578.739 249.545 578.354 249.545  c
577.594 249.545 576.963 249.097 576.463 248.201  c
576.036 247.451 575.823 246.545 575.823 245.482  c
h
576.963 245.623 m
576.963 246.717 577.099 247.607 577.370 248.295  c
577.599 248.878 577.932 249.170 578.370 249.170  c
578.578 249.170 578.797 249.076 579.026 248.889  c
579.255 248.701 579.427 248.383 579.541 247.936  c
579.719 247.269 579.807 246.321 579.807 245.092  c
579.807 244.186 579.713 243.430 579.526 242.826  c
579.390 242.378 579.208 242.061 578.979 241.873  c
578.823 241.748 578.630 241.686 578.401 241.686  c
578.140 241.686 577.906 241.805 577.698 242.045  c
577.416 242.368 577.224 242.878 577.120 243.576  c
577.015 244.264 576.963 244.946 576.963 245.623  c
h
586.932 245.342 m
587.484 245.467 587.896 245.654 588.166 245.904  c
588.541 246.269 588.729 246.712 588.729 247.232  c
588.729 247.628 588.604 248.008 588.354 248.373  c
588.104 248.727 587.760 248.988 587.323 249.154  c
586.896 249.321 586.234 249.404 585.338 249.404  c
581.588 249.404 l
581.588 249.186 l
581.885 249.186 l
582.219 249.186 582.458 249.081 582.604 248.873  c
582.687 248.738 582.729 248.446 582.729 247.998  c
582.729 242.857 l
582.729 242.368 582.672 242.061 582.557 241.936  c
582.411 241.758 582.187 241.670 581.885 241.670  c
581.588 241.670 l
581.588 241.451 l
585.026 241.451 l
585.661 241.451 586.172 241.498 586.557 241.592  c
587.140 241.738 587.588 241.993 587.901 242.357  c
588.213 242.712 588.370 243.118 588.370 243.576  c
588.370 243.972 588.245 244.331 587.995 244.654  c
587.755 244.967 587.401 245.196 586.932 245.342  c
h
583.854 245.029 m
584.000 245.061 584.166 245.081 584.354 245.092  c
584.541 245.102 584.745 245.107 584.963 245.107  c
585.536 245.107 585.963 245.050 586.245 244.936  c
586.536 244.811 586.755 244.623 586.901 244.373  c
587.057 244.113 587.135 243.831 587.135 243.529  c
587.135 243.071 586.948 242.680 586.573 242.357  c
586.198 242.024 585.646 241.857 584.916 241.857  c
584.521 241.857 584.166 241.899 583.854 241.982  c
583.854 245.029 l
h
583.854 248.826 m
584.312 248.930 584.760 248.982 585.198 248.982  c
585.906 248.982 586.442 248.826 586.807 248.514  c
587.182 248.191 587.370 247.795 587.370 247.326  c
587.370 247.024 587.286 246.732 587.120 246.451  c
586.953 246.160 586.677 245.930 586.291 245.764  c
585.916 245.597 585.453 245.514 584.901 245.514  c
584.651 245.514 584.437 245.519 584.260 245.529  c
584.094 245.540 583.958 245.555 583.854 245.576  c
583.854 248.826 l
h
597.358 245.092 m
593.983 245.092 l
593.972 245.248 593.967 245.410 593.967 245.576  c
597.202 245.576 l
597.077 246.029 l
593.983 246.029 l
594.014 246.852 594.181 247.540 594.483 248.092  c
594.827 248.727 595.295 249.045 595.889 249.045  c
596.410 249.045 596.847 248.915 597.202 248.654  c
597.410 248.488 597.676 248.180 597.998 247.732  c
598.186 247.857 l
597.842 248.389 597.535 248.764 597.264 248.982  c
596.816 249.357 596.280 249.545 595.655 249.545  c
594.748 249.545 594.051 249.170 593.561 248.420  c
593.155 247.816 592.915 247.019 592.842 246.029  c
592.248 246.029 l
592.389 245.576 l
592.827 245.576 l
592.827 245.482 l
592.827 245.357 592.832 245.227 592.842 245.092  c
592.248 245.092 l
592.389 244.623 l
592.889 244.623 l
593.014 243.696 593.327 242.936 593.827 242.342  c
594.400 241.644 595.134 241.295 596.030 241.295  c
596.696 241.295 597.363 241.467 598.030 241.811  c
598.030 243.561 l
597.795 243.561 l
597.691 242.311 597.103 241.686 596.030 241.686  c
595.415 241.686 594.931 242.008 594.577 242.654  c
594.295 243.165 594.113 243.821 594.030 244.623  c
597.483 244.623 l
597.358 245.092 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
